name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v3.1.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.23.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          OUTPUT_NAME=db-intel-unified-${{ matrix.os }}-${{ matrix.arch }}
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          
          cd distributions/unified
          go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" \
            -o ../../${OUTPUT_NAME} .
          
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: db-intel-unified-*

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployments/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          merge-multiple: true
          
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Create checksums
        run: |
          sha256sum db-intel-unified-* > checksums.txt
          
      - name: Generate release notes
        run: |
          cat > release-notes.md <<EOF
          # Database Intelligence ${{ steps.version.outputs.version }}
          
          ## 🚀 Features
          
          - Enhanced receivers for PostgreSQL, MySQL, MongoDB, and Redis
          - Multi-database monitoring dashboard support
          - Adaptive sampling and circuit breaker processors
          - Profile-based deployment (minimal, standard, enterprise)
          
          ## 📦 Installation
          
          ### Binary
          \`\`\`bash
          # Download for your platform
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/db-intel-unified-linux-amd64
          chmod +x db-intel-unified-linux-amd64
          ./db-intel-unified-linux-amd64 --help
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          docker run -d \\
            -v \$(pwd)/config.yaml:/etc/db-intel/config.yaml \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          \`\`\`
          
          ### Kubernetes
          \`\`\`bash
          helm repo add db-intel https://database-intelligence.github.io/helm-charts
          helm install db-intel db-intel/db-intel --version ${{ steps.version.outputs.version }}
          \`\`\`
          
          ## 📋 Supported Databases
          
          - ✅ PostgreSQL (12+)
          - ✅ MySQL (5.7+, 8.0+)
          - ✅ MongoDB (3.6+) - Beta
          - ✅ Redis (2.8+) - Beta
          
          ## 📊 Dashboards
          
          Pre-built dashboards available for:
          - Grafana (Prometheus)
          - New Relic (NRQL)
          
          ## 📝 Changelog
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
          
          ## 🔐 Checksums
          
          \`\`\`
          $(cat checksums.txt)
          \`\`\`
          EOF
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Database Intelligence ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            db-intel-unified-*
            checksums.txt

  publish-helm-chart:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          # Remove 'v' prefix for Helm
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Update Chart version
        run: |
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.version }}/" deployments/helm/db-intel/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: ${{ steps.version.outputs.version }}/" deployments/helm/db-intel/Chart.yaml
          
      - name: Package Helm chart
        run: |
          helm package deployments/helm/db-intel
          
      - name: Upload to chart repository
        run: |
          # This would typically push to a Helm chart repository
          # For now, we'll attach it to the release
          echo "Helm chart packaged: db-intel-${{ steps.version.outputs.version }}.tgz"