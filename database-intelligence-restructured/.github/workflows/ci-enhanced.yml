name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  OTEL_VERSION: '0.105.0'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/database-intelligence-collector

jobs:
  validate-configs:
    name: Validate Configurations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate YAML syntax
        run: |
          sudo apt-get update && sudo apt-get install -y yamllint
          yamllint -d relaxed configs/
          
      - name: Check environment variables consistency
        run: |
          echo "Checking environment variable naming consistency..."
          # Extract env vars from configs
          grep -h '\${env:' configs/**/*.yaml | sed 's/.*\${env:\([^:}]*\).*/\1/' | sort | uniq > config_vars.txt
          # Extract env vars from template
          grep -E '^[A-Z_]+=' configs/templates/env.template.fixed | cut -d= -f1 | sort > template_vars.txt
          # Check for undefined vars
          comm -23 config_vars.txt template_vars.txt > undefined_vars.txt
          if [ -s undefined_vars.txt ]; then
            echo "Warning: Variables used in configs but not in template:"
            cat undefined_vars.txt
          fi

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
          
      - name: Run golangci-lint
        run: |
          golangci-lint run --timeout=10m --config=.golangci.yml ./...
          
      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" --include="*.go" . | grep -v "vendor/" | grep -v ".git/"; then
            echo "Found TODO/FIXME comments that should be addressed"
            exit 1
          fi

  test:
    name: Test Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - receivers/ash
          - receivers/enhancedsql
          - receivers/kernelmetrics
          - processors/adaptivesampler
          - processors/circuitbreaker
          - processors/costcontrol
          - processors/nrerrormonitor
          - processors/planattributeextractor
          - processors/querycorrelator
          - processors/verification
          - exporters/nri
          - extensions/healthcheck
          - common
          - internal
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Run tests for ${{ matrix.component }}
        run: |
          cd components/${{ matrix.component }}
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./components/${{ matrix.component }}/coverage.out
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage
          
      - name: Check test coverage
        run: |
          cd components/${{ matrix.component }}
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 70" | bc -l) )); then
            echo "Coverage is below 70%"
            exit 1
          fi

  build-collector:
    name: Build Collector
    runs-on: ubuntu-latest
    needs: [validate-configs, lint, test]
    strategy:
      matrix:
        config:
          - name: basic
            file: otelcol-builder-config.yaml
          - name: complete
            file: otelcol-builder-config-complete.yaml
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install OpenTelemetry Collector Builder
        run: |
          go install go.opentelemetry.io/collector/cmd/builder@v${{ env.OTEL_VERSION }}
          
      - name: Build ${{ matrix.config.name }} collector
        run: |
          builder --config=${{ matrix.config.file }} --skip-compilation=false
          
      - name: Test collector binary
        run: |
          ./distributions/production/database-intelligence-collector --version
          ./distributions/production/database-intelligence-collector components
          
      - name: Validate configurations with built collector
        run: |
          for config in configs/production/*.yaml; do
            echo "Validating $config with ${{ matrix.config.name }} collector..."
            ./distributions/production/database-intelligence-collector validate --config="$config" || true
          done
          
      - name: Upload collector binary
        uses: actions/upload-artifact@v3
        with:
          name: collector-${{ matrix.config.name }}-${{ github.sha }}
          path: distributions/production/database-intelligence-collector

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-collector
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Download complete collector binary
        uses: actions/download-artifact@v3
        with:
          name: collector-complete-${{ github.sha }}
          path: distributions/production/
          
      - name: Make binary executable
        run: chmod +x distributions/production/database-intelligence-collector
        
      - name: Create test environment
        run: |
          cat > test.env << EOF
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5432
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB=testdb
          MYSQL_HOST=localhost
          MYSQL_PORT=3306
          MYSQL_USER=root
          MYSQL_PASSWORD=mysql
          MYSQL_DB=testdb
          NEW_RELIC_LICENSE_KEY=test-key-123456789
          SERVICE_NAME=integration-test
          DEPLOYMENT_ENVIRONMENT=ci
          EOF
          
      - name: Start collector with test config
        run: |
          export $(cat test.env | xargs)
          timeout 30s ./distributions/production/database-intelligence-collector \
            --config=configs/development/config.yaml || true
            
      - name: Run E2E tests
        run: |
          cd tests/e2e
          go test -v -tags=integration ./...
        env:
          COLLECTOR_ENDPOINT: http://localhost:4317
          POSTGRES_HOST: localhost
          MYSQL_HOST: localhost

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-collector, integration-test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download collector binaries
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: distributions/production/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build-collector, docker-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'
          
      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'gosec-results.sarif'
          
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-collector, docker-build, security-scan]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./release-artifacts
          
      - name: Create checksums
        run: |
          cd release-artifacts
          find . -name "database-intelligence-collector" -type f | while read file; do
            sha256sum "$file" > "$file.sha256"
          done
          
      - name: Create release notes
        run: |
          cat > RELEASE_NOTES.md << EOF
          # Database Intelligence Collector ${{ github.ref_name }}
          
          ## What's New
          - Enhanced configuration with resource processors
          - TLS support for database connections
          - Custom components for advanced monitoring
          - Improved CI/CD pipeline
          
          ## Docker Images
          \`\`\`bash
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          \`\`\`
          
          ## Configuration
          See the included env.template.fixed for all configuration options.
          
          ## Checksums
          Verify downloaded binaries with the included .sha256 files.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/**/*
            configs/templates/env.template.fixed
            RELEASE_NOTES.md
          body_path: RELEASE_NOTES.md
          generate_release_notes: true
          draft: false
          prerelease: false