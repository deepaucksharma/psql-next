name: Continuous Deployment

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  KUBE_NAMESPACE: database-intelligence
  HELM_CHART_PATH: ./deployments/kubernetes/helm
  
jobs:
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
          
      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${{ github.sha }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: prepare-deployment
    environment: ${{ needs.prepare-deployment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        if: vars.CLOUD_PROVIDER == 'AWS'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-deployment
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Configure GCP credentials
        if: vars.CLOUD_PROVIDER == 'GCP'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Configure Azure credentials
        if: vars.CLOUD_PROVIDER == 'AZURE'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          
      - name: Update kubeconfig
        run: |
          case "${{ vars.CLOUD_PROVIDER }}" in
            AWS)
              aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
              ;;
            GCP)
              gcloud container clusters get-credentials ${{ vars.CLUSTER_NAME }} --zone ${{ vars.GCP_ZONE }} --project ${{ vars.GCP_PROJECT }}
              ;;
            AZURE)
              az aks get-credentials --resource-group ${{ vars.AZURE_RG }} --name ${{ vars.CLUSTER_NAME }}
              ;;
          esac
          
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry github-registry \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Deploy with Helm
        run: |
          helm upgrade --install database-intelligence \
            ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.KUBE_NAMESPACE }} \
            --set image.repository=ghcr.io/${{ github.repository }}/database-intelligence-collector \
            --set image.tag=${{ needs.prepare-deployment.outputs.version }} \
            --set environment=${{ needs.prepare-deployment.outputs.environment }} \
            --set newrelic.licenseKey=${{ secrets.NEW_RELIC_LICENSE_KEY }} \
            --set postgres.host=${{ vars.POSTGRES_HOST }} \
            --set postgres.user=${{ secrets.POSTGRES_USER }} \
            --set postgres.password=${{ secrets.POSTGRES_PASSWORD }} \
            --set mysql.host=${{ vars.MYSQL_HOST }} \
            --set mysql.user=${{ secrets.MYSQL_USER }} \
            --set mysql.password=${{ secrets.MYSQL_PASSWORD }} \
            --wait \
            --timeout 10m
            
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/database-intelligence -n ${{ env.KUBE_NAMESPACE }}
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=database-intelligence
          
  deploy-docker-compose:
    name: Deploy with Docker Compose
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.environment == 'development'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to development server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /opt/database-intelligence
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker-compose ps
            
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-kubernetes, deploy-docker-compose]
    if: always() && (needs.deploy-kubernetes.result == 'success' || needs.deploy-docker-compose.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Run smoke tests
        run: |
          cd tests/smoke
          go test -v ./... -tags=smoke
        env:
          COLLECTOR_ENDPOINT: ${{ vars.COLLECTOR_ENDPOINT }}
          NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
          
      - name: Check collector health
        run: |
          curl -f ${{ vars.COLLECTOR_ENDPOINT }}/health || exit 1
          
      - name: Verify metrics in New Relic
        run: |
          # Query New Relic for recent metrics
          curl -X POST https://api.newrelic.com/graphql \
            -H "Content-Type: application/json" \
            -H "API-Key: ${{ secrets.NEW_RELIC_API_KEY }}" \
            -d '{
              "query": "{ actor { account(id: ${{ vars.NEW_RELIC_ACCOUNT_ID }}) { nrql(query: \"SELECT count(*) FROM Metric WHERE service.name = '"'"'database-intelligence-collector'"'"' SINCE 5 minutes ago\") { results } } } }"
            }'
            
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure cloud credentials
        # Same as deploy-kubernetes job
        run: echo "Configure cloud credentials..."
        
      - name: Rollback Helm deployment
        run: |
          helm rollback database-intelligence 0 \
            --namespace ${{ env.KUBE_NAMESPACE }} \
            --wait
            
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Deployment rolled back due to failed smoke tests'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [prepare-deployment, smoke-tests]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.smoke-tests.result }}
          text: |
            Deployment to ${{ needs.prepare-deployment.outputs.environment }} ${{ needs.smoke-tests.result }}
            Version: ${{ needs.prepare-deployment.outputs.version }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Create New Relic deployment marker
        if: needs.smoke-tests.result == 'success'
        run: |
          curl -X POST https://api.newrelic.com/v2/applications/${{ vars.NEW_RELIC_APP_ID }}/deployments.json \
            -H "X-Api-Key: ${{ secrets.NEW_RELIC_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment": {
                "revision": "${{ needs.prepare-deployment.outputs.version }}",
                "user": "${{ github.actor }}",
                "description": "Deployed from GitHub Actions"
              }
            }'