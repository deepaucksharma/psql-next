# Config-Only Mode - Production Ready
# Uses only standard OpenTelemetry components
# No custom components required

receivers:
  postgresql:
    endpoint: ${env:DB_POSTGRES_HOST}:${env:DB_POSTGRES_PORT}
    username: ${env:DB_POSTGRES_USER}
    password: ${env:DB_POSTGRES_PASSWORD}
    databases:
      - ${env:DB_POSTGRES_DATABASE}
    collection_interval: ${env:POSTGRES_COLLECTION_INTERVAL:-30s}
    tls:
      insecure: ${env:POSTGRES_TLS_INSECURE:-true}
      insecure_skip_verify: ${env:POSTGRES_TLS_SKIP_VERIFY:-true}

  mysql:
    endpoint: ${env:DB_MYSQL_HOST}:${env:DB_MYSQL_PORT}
    username: ${env:DB_MYSQL_USER}
    password: ${env:DB_MYSQL_PASSWORD}
    database: ${env:DB_MYSQL_DATABASE}
    collection_interval: ${env:MYSQL_COLLECTION_INTERVAL:-30s}
    tls:
      insecure: ${env:MYSQL_TLS_INSECURE:-true}

  sqlquery:
    driver: postgres
    datasource: "host=${env:DB_POSTGRES_HOST} port=${env:DB_POSTGRES_PORT} user=${env:DB_POSTGRES_USER} password=${env:DB_POSTGRES_PASSWORD} dbname=${env:DB_POSTGRES_DATABASE} sslmode=${env:POSTGRES_SSLMODE:-disable}"
    queries:
      - sql: |
          SELECT 
            usename as username,
            application_name,
            client_addr,
            state,
            COUNT(*) as connection_count,
            MAX(EXTRACT(EPOCH FROM (now() - state_change))) as max_connection_age_seconds
          FROM pg_stat_activity
          WHERE state IS NOT NULL
          GROUP BY usename, application_name, client_addr, state
        metrics:
          - metric_name: db.user.connections
            value_column: connection_count
            attribute_columns: [username, application_name, client_addr, state]
            value_type: int
          - metric_name: db.user.connection.age.max
            value_column: max_connection_age_seconds
            attribute_columns: [username, application_name, client_addr, state]
            value_type: double
    collection_interval: ${env:POSTGRES_QUERY_INTERVAL:-60s}

processors:
  memory_limiter:
    check_interval: ${env:MEMORY_CHECK_INTERVAL:-1s}
    limit_mib: ${env:MEMORY_LIMIT_MIB:-512}
    spike_limit_mib: ${env:MEMORY_SPIKE_LIMIT_MIB:-128}

  resource:
    attributes:
      - key: service.name
        value: ${env:SERVICE_NAME}
        action: upsert
      - key: service.version
        value: ${env:SERVICE_VERSION}
        action: upsert
      - key: deployment.environment
        value: ${env:ENVIRONMENT}
        action: upsert

  batch:
    timeout: ${env:BATCH_TIMEOUT:-10s}
    send_batch_size: ${env:BATCH_SIZE:-1024}

exporters:
  otlphttp:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

  debug:
    verbosity: ${env:DEBUG_VERBOSITY:-normal}
    sampling_initial: ${env:DEBUG_SAMPLING_INITIAL:-2}
    sampling_thereafter: ${env:DEBUG_SAMPLING_THEREAFTER:-500}

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health

  pprof:
    endpoint: 0.0.0.0:1777

  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    metrics:
      receivers: [postgresql, mysql, sqlquery]
      processors: [memory_limiter, resource, batch]
      exporters: [otlphttp, debug]
      
  telemetry:
    logs:
      level: ${env:LOG_LEVEL:-info}
      output_paths: ["stdout"]
      error_output_paths: ["stderr"]
    metrics:
      level: detailed
      address: 0.0.0.0:8888