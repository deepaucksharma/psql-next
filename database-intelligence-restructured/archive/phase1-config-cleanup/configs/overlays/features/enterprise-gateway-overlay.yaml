# Enterprise Gateway Overlay Configuration
# Advanced enterprise features including tail sampling and load balancing

# Enterprise extensions
extensions:
  # Bearer token authentication
  bearertokenauth:
    token: ${env:BEARER_TOKEN}
    filename: ${env:BEARER_TOKEN_FILE}

  # OAuth2 client credentials for enterprise authentication
  oauth2client:
    client_id: ${env:OAUTH2_CLIENT_ID}
    client_secret: ${env:OAUTH2_CLIENT_SECRET}
    token_url: ${env:OAUTH2_TOKEN_URL}
    scopes: [${env:OAUTH2_SCOPES:-read,write}]
    endpoint_params:
      audience: ${env:OAUTH2_AUDIENCE}

# Enterprise processors
processors:
  # Tail-based sampling for intelligent trace selection
  tail_sampling:
    decision_wait: ${env:TAIL_SAMPLING_DECISION_WAIT:-10s}
    num_traces: ${env:TAIL_SAMPLING_NUM_TRACES:-50000}
    expected_new_traces_per_sec: ${env:TAIL_SAMPLING_EXPECTED_TRACES:-1000}
    policies:
      # Error-based sampling policy
      - name: errors-policy
        type: status_code
        status_code:
          status_codes: [ERROR]
      
      # Critical service sampling
      - name: critical-services
        type: and
        and:
          and_sub_policy:
            - name: service-name
              type: string_attribute
              string_attribute:
                key: service.name
                values: [${env:CRITICAL_SERVICES}]
            - name: min-duration
              type: latency
              latency:
                threshold_ms: ${env:CRITICAL_SERVICE_MIN_LATENCY:-100}
      
      # Database operation sampling
      - name: database-operations
        type: string_attribute
        string_attribute:
          key: db.operation
          values: [SELECT, INSERT, UPDATE, DELETE]
          match_type: REGEXP
      
      # High-value trace sampling
      - name: high-value-traces
        type: composite
        composite:
          max_total_spans_per_second: ${env:HIGH_VALUE_MAX_SPANS:-500}
          policy_order: [errors-policy, critical-services, database-operations]
          
      # Probabilistic fallback
      - name: probabilistic-fallback
        type: probabilistic
        probabilistic:
          sampling_percentage: ${env:FALLBACK_SAMPLING_PERCENTAGE:-1}

  # Advanced cost control with enforcement
  costcontrol:
    daily_budget_usd: ${env:DAILY_BUDGET_USD:-500}
    monthly_budget_usd: ${env:MONTHLY_BUDGET_USD:-15000}
    cost_per_gb: ${env:COST_PER_GB:-0.25}
    cost_per_million_events: ${env:COST_PER_MILLION_EVENTS:-2.00}
    alert_threshold_percentage: ${env:COST_ALERT_THRESHOLD:-80}
    enforcement_enabled: ${env:COST_ENFORCEMENT_ENABLED:-true}
    enforcement_actions:
      - threshold: 80
        action: alert
      - threshold: 90
        action: reduce_sampling
        sampling_reduction: 0.5
      - threshold: 95
        action: circuit_break
        duration: 300s

  # Enterprise-grade span processor
  span:
    name:
      to_attributes:
        rules:
          - pattern: ^(SELECT|INSERT|UPDATE|DELETE)\s+.*
            name_pattern: db.operation.{operation}
      from_attributes: [db.operation, db.sql.table]

# Enterprise exporters
exporters:
  # Load balancing OTLP exporter
  loadbalancing/traces:
    protocol:
      otlp:
        endpoint: ${env:LB_ENDPOINT:-otel-processing-tier-headless:4317}
        compression: gzip
        timeout: ${env:LB_TIMEOUT:-30s}
        retry_on_failure:
          enabled: true
          initial_interval: ${env:LB_RETRY_INITIAL:-5s}
          max_interval: ${env:LB_RETRY_MAX:-30s}
    resolver:
      dns:
        hostname: ${env:LB_HOSTNAME:-otel-processing-tier-headless}
        port: ${env:LB_PORT:-4317}
        interval: ${env:LB_RESOLVER_INTERVAL:-5s}
        timeout: ${env:LB_RESOLVER_TIMEOUT:-1s}

  # Enterprise New Relic exporter with advanced settings
  otlphttp/newrelic-enterprise:
    endpoint: ${env:NEW_RELIC_ENTERPRISE_ENDPOINT:-https://otlp.nr-data.net}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
      nr-account-id: ${env:NEW_RELIC_ACCOUNT_ID}
      nr-routing-key: ${env:NEW_RELIC_ROUTING_KEY}
    auth:
      authenticator: bearertokenauth
    compression: gzip
    timeout: ${env:NR_ENTERPRISE_TIMEOUT:-30s}
    retry_on_failure:
      enabled: true
      initial_interval: ${env:NR_ENTERPRISE_RETRY_INITIAL:-5s}
      max_interval: ${env:NR_ENTERPRISE_RETRY_MAX:-30s}
      max_elapsed_time: ${env:NR_ENTERPRISE_RETRY_MAX_ELAPSED:-300s}
    sending_queue:
      enabled: true
      num_consumers: ${env:NR_ENTERPRISE_QUEUE_CONSUMERS:-20}
      queue_size: ${env:NR_ENTERPRISE_QUEUE_SIZE:-10000}

  # Enterprise Kafka exporter for streaming
  kafka/enterprise:
    brokers: [${env:KAFKA_BROKERS}]
    topic: ${env:KAFKA_TOPIC:-otel-enterprise-traces}
    encoding: ${env:KAFKA_ENCODING:-otlp_proto}
    partition_key: ${env:KAFKA_PARTITION_KEY:-service.name}
    timeout: ${env:KAFKA_TIMEOUT:-10s}
    retry:
      max_retries: ${env:KAFKA_MAX_RETRIES:-5}
      backoff: ${env:KAFKA_RETRY_BACKOFF:-100ms}
    auth:
      sasl:
        mechanism: ${env:KAFKA_SASL_MECHANISM:-PLAIN}
        username: ${env:KAFKA_USERNAME}
        password: ${env:KAFKA_PASSWORD}
      tls:
        cert_file: ${env:KAFKA_CERT_FILE}
        key_file: ${env:KAFKA_KEY_FILE}
        ca_file: ${env:KAFKA_CA_FILE}

# Enterprise service configuration
service:
  extensions: [health_check, pprof, zpages, memory_ballast, bearertokenauth, oauth2client]
  pipelines:
    # Enterprise traces pipeline with tail sampling
    traces/enterprise:
      receivers: [otlp, enhancedsql/postgresql]
      processors: [
        memory_limiter,
        span,
        tail_sampling,
        planattributeextractor,
        verification,
        costcontrol,
        querycorrelator,
        resource,
        attributes,
        batch
      ]
      exporters: [loadbalancing/traces, otlphttp/newrelic-enterprise, kafka/enterprise]
    
    # Enterprise metrics pipeline
    metrics/enterprise:
      receivers: [postgresql, mysql, sqlquery/postgresql, otlp]
      processors: [
        memory_limiter,
        costcontrol,
        planattributeextractor,
        verification,
        resource,
        attributes,
        batch
      ]
      exporters: [otlphttp/newrelic-enterprise, prometheus]
    
    # Enterprise logs pipeline
    logs/enterprise:
      receivers: [otlp]
      processors: [
        memory_limiter,
        verification,
        costcontrol,
        resource,
        attributes,
        batch
      ]
      exporters: [otlphttp/newrelic-enterprise, kafka/enterprise]

  telemetry:
    logs:
      level: ${env:OTEL_LOG_LEVEL:-info}
      encoding: json
    metrics:
      level: ${env:OTEL_METRICS_LEVEL:-normal}
      address: 0.0.0.0:8888
    resource:
      service.name: ${env:SERVICE_NAME:-database-intelligence-enterprise-gateway}
      service.version: ${env:SERVICE_VERSION:-2.0.0}
      deployment.environment: ${env:DEPLOYMENT_ENVIRONMENT:-production}
      enterprise.tier: gateway