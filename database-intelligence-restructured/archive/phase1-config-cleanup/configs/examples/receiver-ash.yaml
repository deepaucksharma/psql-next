# ASH (Active Session History) Receiver Configuration
# Provides Oracle-like session monitoring for PostgreSQL

receivers:
  ash:
    # Database connection
    driver: postgres
    datasource: "host=${POSTGRES_HOST} port=${POSTGRES_PORT} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=postgres sslmode=disable"
    
    # Collection settings
    collection_interval: 1s
    initial_delay: 5s
    
    # Adaptive sampling configuration
    sampling:
      base_rate: 1.0              # Sample 100% by default
      min_rate: 0.1               # Never go below 10% sampling
      max_rate: 1.0               # Maximum 100% sampling
      low_session_threshold: 50   # Below this, sample everything
      high_session_threshold: 500 # Above this, reduce sampling
      always_sample_blocked: true
      always_sample_long_running: true
      always_sample_maintenance: true
    
    # Storage settings
    buffer_size: 10000            # Number of snapshots to keep in memory
    retention_duration: 1h        # How long to keep data
    aggregation_windows:
      - 1m                        # 1-minute aggregations
      - 5m                        # 5-minute aggregations
      - 15m                       # 15-minute aggregations
      - 1h                        # 1-hour aggregations
    
    # Feature detection
    enable_feature_detection: true
    
    # Analysis settings
    enable_wait_analysis: true
    enable_blocking_analysis: true
    enable_anomaly_detection: false  # Experimental
    
    # Performance thresholds
    slow_query_threshold_ms: 1000    # Queries longer than 1s
    blocked_session_threshold: 5     # Alert if more than 5 blocked sessions
    
    # Retry configuration
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 5m

processors:
  # Add wait event analysis processor
  waitanalysis:
    # Categorize wait events
    categories:
      cpu:
        - "CPU"
      io:
        - "IO:DataFileRead"
        - "IO:DataFileWrite"
        - "IO:WALWrite"
      lock:
        - "Lock:relation"
        - "Lock:tuple"
        - "Lock:transactionid"
      network:
        - "Client:ClientRead"
        - "Client:ClientWrite"
      idle:
        - "Client:ClientRead"
    
    # Threshold alerts
    thresholds:
      lock_wait_threshold_ms: 1000
      io_wait_threshold_ms: 500
      total_wait_threshold_pct: 50
  
  # Add anomaly detection processor
  anomalydetector:
    enabled: false  # Set to true to enable
    algorithms:
      - type: zscore
        window: 5m
        threshold: 3.0
      - type: isolation_forest
        contamination: 0.1
    
    # What to detect
    detect:
      - sudden_spike_in_sessions
      - unusual_wait_patterns
      - blocking_chain_anomalies
      - query_time_anomalies

exporters:
  # Prometheus for metrics
  prometheus:
    endpoint: 0.0.0.0:8889
    namespace: ash
    
  # OTLP for both metrics and logs
  otlp:
    endpoint: ${OTLP_ENDPOINT}
    compression: gzip
    
  # Optional: New Relic for integrated monitoring
  newrelic:
    api_key: ${NEW_RELIC_API_KEY}
    
service:
  pipelines:
    # Metrics pipeline
    metrics/ash:
      receivers: [ash]
      processors: [waitanalysis]
      exporters: [prometheus, otlp]
    
    # Logs pipeline for detailed session data
    logs/ash:
      receivers: [ash]
      processors: []
      exporters: [otlp]
      
  telemetry:
    logs:
      level: info
      
# Example queries that can be run against the collected ASH data:
# 
# 1. Current session distribution:
#    db_ash_active_sessions{state="active"}
#
# 2. Wait event analysis:
#    db_ash_wait_events{wait_event_type="Lock"}
#
# 3. Blocked sessions over time:
#    db_ash_blocked_sessions
#
# 4. Long running queries:
#    db_ash_long_running_queries{threshold_ms="1000"}
#
# 5. Blocking chain depth:
#    db_ash_blocking_chain_depth