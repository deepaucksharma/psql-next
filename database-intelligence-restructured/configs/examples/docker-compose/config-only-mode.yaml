receivers:
  # PostgreSQL receiver for standard metrics
  postgresql:
    endpoint: ${env:POSTGRES_HOST}:${env:POSTGRES_PORT}
    transport: tcp
    username: ${env:POSTGRES_USER}
    password: ${env:POSTGRES_PASSWORD}
    databases:
      - ${env:POSTGRES_DB}
    collection_interval: 10s
    tls:
      insecure: true
    metrics:
      postgresql.backends:
        enabled: true
      postgresql.bgwriter.buffers.allocated:
        enabled: true
      postgresql.bgwriter.buffers.writes:
        enabled: true
      postgresql.bgwriter.checkpoint.count:
        enabled: true
      postgresql.bgwriter.duration:
        enabled: true
      postgresql.bgwriter.maxwritten:
        enabled: true
      postgresql.blocks_read:
        enabled: true
      postgresql.commits:
        enabled: true
      postgresql.connection.max:
        enabled: true
      postgresql.database.count:
        enabled: true
      postgresql.database.locks:
        enabled: true
      postgresql.database.size:
        enabled: true
      postgresql.deadlocks:
        enabled: true
      postgresql.index.scans:
        enabled: true
      postgresql.index.size:
        enabled: true
      postgresql.live_rows:
        enabled: true
      postgresql.operations:
        enabled: true
      postgresql.replication.data_delay:
        enabled: true
      postgresql.rollbacks:
        enabled: true
      postgresql.sequential_scans:
        enabled: true
      postgresql.table.count:
        enabled: true
      postgresql.table.size:
        enabled: true
      postgresql.table.vacuum.count:
        enabled: true
      postgresql.temp_files:
        enabled: true
      postgresql.wal.age:
        enabled: true
      postgresql.wal.delay:
        enabled: true
      postgresql.wal.lag:
        enabled: true
      # Additional available metrics (disabled by default)
      postgresql.rows:
        enabled: true  # Rows returned, fetched, inserted, updated, deleted
      postgresql.blks_hit:
        enabled: true  # Number of times disk blocks were found in buffer cache
      postgresql.blks_read:
        enabled: true  # Number of disk blocks read
      # Additional metrics for comprehensive monitoring
      postgresql.database.rows:
        enabled: true  # Row activity (inserted, updated, deleted, returned, fetched)
      postgresql.bgwriter.stat.checkpoints_timed:
        enabled: true  # Scheduled checkpoints
      postgresql.bgwriter.stat.checkpoints_req:
        enabled: true  # Requested checkpoints  
      postgresql.buffer.hit:
        enabled: true  # Buffer hit ratio
      postgresql.conflicts:
        enabled: true  # Query conflicts
      postgresql.locks:
        enabled: true  # Lock statistics
      postgresql.stat_activity.count:
        enabled: true  # Active connections by state


  # SQL Query receiver for custom queries
  sqlquery/postgresql:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST} port=${env:POSTGRES_PORT} user=${env:POSTGRES_USER} password=${env:POSTGRES_PASSWORD} dbname=${env:POSTGRES_DB} sslmode=disable"
    collection_interval: 30s
    queries:
      - sql: |
          SELECT 
            state,
            COUNT(*) as connection_count
          FROM pg_stat_activity
          WHERE pid != pg_backend_pid()
          GROUP BY state
        metrics:
          - metric_name: pg.connection_count
            value_column: "connection_count"
            attribute_columns: ["state"]
            value_type: int
            
      - sql: |
          SELECT 
            wait_event_type,
            wait_event,
            COUNT(*) as count
          FROM pg_stat_activity
          WHERE wait_event IS NOT NULL
          GROUP BY wait_event_type, wait_event
        metrics:
          - metric_name: pg.wait_events
            value_column: "count"
            attribute_columns: ["wait_event_type", "wait_event"]
            value_type: int

      - sql: |
          SELECT 
            datname,
            numbackends,
            tup_returned,
            tup_fetched,
            tup_inserted,
            tup_updated,
            tup_deleted,
            conflicts,
            temp_files,
            temp_bytes,
            deadlocks,
            checksum_failures,
            blks_read,
            blks_hit,
            blk_read_time,
            blk_write_time
          FROM pg_stat_database
          WHERE datname NOT IN ('template0', 'template1')
        metrics:
          - metric_name: pg.database.operations
            value_column: "tup_returned"
            attribute_columns: ["datname"]
            value_type: int
            data_type: sum
            

  # Host metrics for system monitoring
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
          system.disk.operations:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
          system.network.errors:
            enabled: true

processors:
  # Add deployment mode attribute
  attributes:
    actions:
      - key: deployment.mode
        value: config-only
        action: insert
      - key: service.name
        value: ${env:OTEL_SERVICE_NAME}
        action: insert
      - key: service.version
        value: "1.0.0"
        action: insert

  # Resource detection
  resourcedetection:
    detectors: [env, system, docker]
    system:
      hostname_sources: ["os"]
    docker:
      use_hostname_if_present: true

  # Batch processing
  batch:
    timeout: 10s
    send_batch_size: 1000

  # Memory limiter
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

exporters:
  # New Relic OTLP exporter
  otlp:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    
  # Debug exporter for troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 100


service:
  telemetry:
    logs:
      level: info
      encoding: console
    metrics:
      level: detailed

  pipelines:
    metrics:
      receivers: 
        - postgresql
        - sqlquery/postgresql
        - hostmetrics
      processors:
        - memory_limiter
        - resourcedetection
        - attributes
        - batch
      exporters:
        - otlp
        - debug