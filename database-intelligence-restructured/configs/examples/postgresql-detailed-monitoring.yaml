# PostgreSQL Detailed Monitoring Configuration
# Matches OHI collection intervals and query patterns

receivers:
  # PostgreSQL receiver with standard metrics
  postgresql/detailed:
    endpoint: ${POSTGRES_HOST}:${POSTGRES_PORT}
    transport: tcp
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    databases:
      - postgres
      - ${POSTGRES_DB}
    collection_interval: 15s  # OHI default interval
    tls:
      insecure: true
      insecure_skip_verify: true
    
  # Detailed pg_stat_statements collection
  sqlquery/pg_stat_statements:
    driver: postgres
    datasource: "host=${POSTGRES_HOST} port=${POSTGRES_PORT} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=postgres sslmode=disable"
    collection_interval: 60s  # Match OHI slow query collection
    
    queries:
      # Reset pg_stat_statements periodically to prevent drift
      - sql: |
          SELECT pg_stat_statements_reset() 
          WHERE EXTRACT(MINUTE FROM NOW())::INTEGER % 30 = 0
            AND EXTRACT(SECOND FROM NOW()) < 5
        metrics: []  # No metrics, just side effect
        
      # Detailed query performance with all OHI fields
      - sql: |
          WITH query_stats AS (
            SELECT 
              s.userid,
              s.dbid,
              s.queryid,
              s.query,
              s.calls,
              s.total_exec_time,
              s.min_exec_time,
              s.max_exec_time,
              s.mean_exec_time,
              s.stddev_exec_time,
              s.rows,
              s.shared_blks_hit,
              s.shared_blks_read,
              s.shared_blks_dirtied,
              s.shared_blks_written,
              s.local_blks_hit,
              s.local_blks_read,
              s.local_blks_dirtied,
              s.local_blks_written,
              s.temp_blks_read,
              s.temp_blks_written,
              s.blk_read_time,
              s.blk_write_time,
              s.wal_records,
              s.wal_fpi,
              s.wal_bytes,
              d.datname,
              u.usename,
              -- Calculate derived metrics
              CASE 
                WHEN (s.shared_blks_hit + s.shared_blks_read) > 0 
                THEN (s.shared_blks_hit::float / (s.shared_blks_hit + s.shared_blks_read)) * 100
                ELSE 0 
              END as cache_hit_ratio,
              -- Normalize query text
              CASE 
                WHEN LENGTH(s.query) > 100 
                THEN LEFT(s.query, 97) || '...'
                ELSE s.query
              END as query_normalized,
              -- Query pattern extraction
              CASE
                WHEN s.query ~* '^SELECT' THEN 'SELECT'
                WHEN s.query ~* '^INSERT' THEN 'INSERT'
                WHEN s.query ~* '^UPDATE' THEN 'UPDATE'
                WHEN s.query ~* '^DELETE' THEN 'DELETE'
                WHEN s.query ~* '^CREATE' THEN 'DDL'
                WHEN s.query ~* '^ALTER' THEN 'DDL'
                WHEN s.query ~* '^DROP' THEN 'DDL'
                ELSE 'OTHER'
              END as statement_type,
              -- Table extraction (simple pattern)
              CASE
                WHEN s.query ~* 'FROM\\s+([a-zA-Z_][a-zA-Z0-9_]*)' 
                THEN (regexp_match(s.query, 'FROM\\s+([a-zA-Z_][a-zA-Z0-9_]*)', 'i'))[1]
                ELSE NULL
              END as primary_table
            FROM pg_stat_statements s
            JOIN pg_database d ON d.oid = s.dbid
            JOIN pg_user u ON u.usesysid = s.userid
            WHERE s.query NOT SIMILAR TO '%pg_stat%|%pg_catalog%'  -- Exclude system queries
          )
          SELECT 
            queryid,
            query_normalized as query_text,
            datname as database_name,
            usename as user_name,
            statement_type,
            primary_table,
            calls as execution_count,
            total_exec_time,
            mean_exec_time as avg_elapsed_time_ms,
            min_exec_time,
            max_exec_time,
            stddev_exec_time,
            rows,
            rows::float / NULLIF(calls, 0) as avg_rows,
            shared_blks_hit,
            shared_blks_read,
            shared_blks_hit + shared_blks_read as total_blocks_accessed,
            cache_hit_ratio,
            shared_blks_dirtied,
            shared_blks_written,
            temp_blks_read + temp_blks_written as temp_blocks_used,
            blk_read_time,
            blk_write_time,
            blk_read_time + blk_write_time as total_io_time,
            wal_records,
            wal_bytes
          FROM query_stats
          WHERE 
            -- OHI filtering criteria
            (calls > 20 OR mean_exec_time > 500)  -- Count or duration threshold
            AND total_exec_time > 0  -- Exclude queries with no execution time
          ORDER BY total_exec_time DESC
          LIMIT 200  -- Increased limit for better coverage
        metrics:
          - metric_name: db.query.execution_count
            value_column: execution_count
            value_type: int
            attributes:
              - queryid
              - database_name
              - user_name
              - statement_type
              - primary_table
              - query_text
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.query.total_time
            value_column: total_exec_time
            value_type: double
            unit: ms
            attributes:
              - queryid
              - database_name
              - statement_type
              - query_text
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.query.mean_time
            value_column: avg_elapsed_time_ms
            value_type: double
            unit: ms
            attributes:
              - queryid
              - database_name
              - statement_type
              - query_text
            data_point_type: gauge
            
          - metric_name: db.query.max_time
            value_column: max_exec_time
            value_type: double
            unit: ms
            attributes:
              - queryid
              - database_name
              - statement_type
            data_point_type: gauge
            
          - metric_name: db.query.rows_returned
            value_column: rows
            value_type: int
            attributes:
              - queryid
              - database_name
              - statement_type
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.query.avg_rows
            value_column: avg_rows
            value_type: double
            attributes:
              - queryid
              - database_name
              - statement_type
            data_point_type: gauge
            
          - metric_name: db.query.cache_hit_ratio
            value_column: cache_hit_ratio
            value_type: double
            unit: percent
            attributes:
              - queryid
              - database_name
            data_point_type: gauge
            
          - metric_name: db.query.blocks_read
            value_column: shared_blks_read
            value_type: int
            attributes:
              - queryid
              - database_name
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.query.blocks_hit
            value_column: shared_blks_hit
            value_type: int
            attributes:
              - queryid
              - database_name
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.query.temp_blocks
            value_column: temp_blocks_used
            value_type: int
            attributes:
              - queryid
              - database_name
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.query.io_time
            value_column: total_io_time
            value_type: double
            unit: ms
            attributes:
              - queryid
              - database_name
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.query.wal_bytes
            value_column: wal_bytes
            value_type: int
            unit: By
            attributes:
              - queryid
              - database_name
            data_point_type: sum
            monotonic: true
            
      # Index usage statistics
      - sql: |
          SELECT 
            schemaname,
            tablename,
            indexname,
            idx_scan,
            idx_tup_read,
            idx_tup_fetch,
            pg_size_pretty(pg_relation_size(indexrelid)) as index_size
          FROM pg_stat_user_indexes
          WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
            AND idx_scan = 0  -- Unused indexes
          ORDER BY pg_relation_size(indexrelid) DESC
          LIMIT 50
        metrics:
          - metric_name: db.index.unused_size
            value_column: pg_relation_size(indexrelid)
            value_type: int
            unit: By
            attributes:
              - schemaname
              - tablename
              - indexname
            data_point_type: gauge
            
      # Table statistics for correlation
      - sql: |
          SELECT 
            schemaname,
            tablename,
            n_tup_ins,
            n_tup_upd,
            n_tup_del,
            n_tup_hot_upd,
            n_live_tup,
            n_dead_tup,
            n_mod_since_analyze,
            last_vacuum,
            last_autovacuum,
            last_analyze,
            last_autoanalyze,
            vacuum_count,
            autovacuum_count,
            analyze_count,
            autoanalyze_count
          FROM pg_stat_user_tables
          WHERE schemaname NOT IN ('pg_catalog', 'information_schema')
        metrics:
          - metric_name: db.table.modifications
            value_column: n_tup_ins + n_tup_upd + n_tup_del
            value_type: int
            attributes:
              - schemaname
              - tablename
            data_point_type: sum
            monotonic: true
            
          - metric_name: db.table.dead_tuples
            value_column: n_dead_tup
            value_type: int
            attributes:
              - schemaname
              - tablename
            data_point_type: gauge
            
processors:
  # Query correlation processor
  groupbyattrs/query_correlation:
    keys:
      - database_name
      - queryid
      - statement_type
      
  # Add correlation IDs for tracking
  attributes/correlation:
    actions:
      - key: correlation.id
        from_attribute: queryid
        action: hash
        
      - key: correlation.database
        from_attribute: database_name
        action: insert
        
      - key: correlation.type
        from_attribute: statement_type
        action: insert
        
  # Resource detection for query data
  resource/query_context:
    attributes:
      - key: telemetry.source
        value: pg_stat_statements
        action: insert
        
      - key: collection.interval
        value: 60s
        action: insert
        
      - key: ohi.compatibility
        value: "true"
        action: insert