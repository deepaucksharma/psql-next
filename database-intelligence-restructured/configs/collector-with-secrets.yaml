# Example OpenTelemetry Collector configuration with secrets management
# 
# This configuration demonstrates how to use secrets placeholders
# that will be resolved at runtime from environment variables or
# other secret providers (Kubernetes secrets, Vault, etc.)

receivers:
  # PostgreSQL receiver with secrets
  postgresql:
    endpoint: ${secret:POSTGRES_HOST}:${secret:POSTGRES_PORT}
    username: ${secret:POSTGRES_USER}
    password: ${secret:POSTGRES_PASSWORD}
    databases:
      - ${secret:POSTGRES_DATABASE}
    collection_interval: 10s
    tls:
      insecure: true
  
  # SQL query receiver with connection string from secrets
  sqlquery:
    driver: postgres
    datasource: postgres://${secret:POSTGRES_USER}:${secret:POSTGRES_PASSWORD}@${secret:POSTGRES_HOST}:${secret:POSTGRES_PORT}/${secret:POSTGRES_DATABASE}?sslmode=disable
    queries:
      - sql: "SELECT count(*) as connection_count FROM pg_stat_activity"
        metrics:
          - metric_name: postgresql.connections.active
            value_column: connection_count
  
  # Enhanced SQL receiver with pooling and secrets
  enhancedsql:
    driver: postgres
    datasource: postgres://${secret:POSTGRES_USER}:${secret:POSTGRES_PASSWORD}@${secret:POSTGRES_HOST}:${secret:POSTGRES_PORT}/${secret:POSTGRES_DATABASE}?sslmode=disable
    collection_interval: 30s
    max_open_connections: 20  # Connection pooling
    max_idle_connections: 10
    feature_detection:
      enabled: true
      cache_duration: 5m
    queries:
      - name: slow_queries
        category: slow_queries
        timeout: 30s

processors:
  # Batch processor
  batch:
    timeout: 10s
    send_batch_size: 1000
  
  # Adaptive sampler with configuration
  adaptivesampler:
    sampling_rules:
      - service_name: "database-*"
        initial_sampling_rate: 0.1
        target_rate: 0.5
        min_rate: 0.01
        max_rate: 1.0
  
  # Circuit breaker for reliability
  circuitbreaker:
    failure_threshold: 5
    recovery_timeout: 30s
    half_open_requests: 3
  
  # Rate limiter (using internal rate limiting)
  rate_limiter:
    rps: 1000
    burst: 100

exporters:
  # New Relic exporter with API key from secrets
  newrelic:
    api_key: ${secret:NEW_RELIC_API_KEY}
    api_key_header: Api-Key
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
  
  # NRI exporter with secrets and rate limiting
  nri:
    integration_name: com.newrelic.postgresql
    integration_version: 2.0.0
    protocol_version: 2
    entity:
      type: PostgreSQLInstance
      name_source: db.name
      display_name_template: "{{.db.name}} ({{.net.host.name}})"
    output:
      mode: http
      http_endpoint: https://metric-api.newrelic.com/metric/v1
      api_key: ${secret:NEW_RELIC_INGEST_KEY}
      batch_size: 100
      flush_interval: 10s
    rate_limiting:
      enabled: true
      rps: 500
      burst: 100
      enable_adaptive: true
      min_rps: 100
      max_rps: 2000
      database_limits:
        production:
          rps: 1000
          burst: 200
        staging:
          rps: 500
          burst: 100
  
  # OTLP exporter for additional telemetry backend
  otlp:
    endpoint: ${secret:OTLP_ENDPOINT}
    headers:
      Authorization: Bearer ${secret:OTLP_AUTH_TOKEN}
    tls:
      insecure: false
      cert_file: ${secret:OTLP_CERT_PATH}
      key_file: ${secret:OTLP_KEY_PATH}
  
  # Debug exporter (disabled in production)
  debug:
    verbosity: detailed
    sampling_initial: 10
    sampling_thereafter: 100

extensions:
  # Health check with monitoring endpoints
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health
    check_collector_pipeline:
      enabled: true
      interval: 15s
      exporter_failure_threshold: 5
  
  # Performance profiling
  zpages:
    endpoint: 0.0.0.0:55679
  
  # Memory monitoring
  memory_ballast:
    size_mib: 512

service:
  # Extension configuration
  extensions: [health_check, zpages, memory_ballast]
  
  # Pipeline configuration
  pipelines:
    # Metrics pipeline with all features
    metrics:
      receivers: [postgresql, sqlquery, enhancedsql]
      processors: [batch, adaptivesampler, circuitbreaker]
      exporters: [newrelic, nri, otlp]
    
    # Logs pipeline for database events
    logs:
      receivers: [enhancedsql]
      processors: [batch]
      exporters: [nri, otlp]
  
  # Telemetry configuration
  telemetry:
    logs:
      level: info
      initial_fields:
        service: database-intelligence-collector
    metrics:
      level: detailed
      address: 0.0.0.0:8888

# Environment variable examples (set these before running):
# export POSTGRES_HOST=localhost
# export POSTGRES_PORT=5432
# export POSTGRES_USER=postgres
# export POSTGRES_PASSWORD=secretpassword
# export POSTGRES_DATABASE=mydb
# export NEW_RELIC_API_KEY=NRAK-XXXXXXXXXXXXXXXXXXXXXXXXX
# export NEW_RELIC_INGEST_KEY=NRII-XXXXXXXXXXXXXXXXXXXXXXXXX
# export OTLP_ENDPOINT=https://otlp.example.com:4317
# export OTLP_AUTH_TOKEN=my-auth-token
# export OTLP_CERT_PATH=/path/to/cert.pem
# export OTLP_KEY_PATH=/path/to/key.pem