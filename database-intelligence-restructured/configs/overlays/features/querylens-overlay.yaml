# QueryLens Overlay Configuration
# Advanced PostgreSQL query lens integration with plan tracking

# Additional receivers for QueryLens functionality
receivers:
  # Auto-explain receiver for plan collection
  autoexplain:
    log_path: ${env:POSTGRES_LOG_PATH:-/var/log/postgresql/postgresql.log}
    log_format: ${env:POSTGRES_LOG_FORMAT:-json}
    plan_collection:
      enabled: ${env:ENABLE_PLAN_COLLECTION:-true}
      min_duration: ${env:PLAN_MIN_DURATION:-100ms}
      regression_detection:
        enabled: ${env:ENABLE_REGRESSION_DETECTION:-true}
        performance_degradation_threshold: ${env:REGRESSION_THRESHOLD:-0.2}

  # Enhanced SQL receiver with QueryLens features
  enhancedsql/postgresql:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST:-localhost} port=${env:POSTGRES_PORT:-5432} user=${env:POSTGRES_USER:-postgres} password=${env:POSTGRES_PASSWORD:-postgres} dbname=${env:POSTGRES_DB:-postgres} sslmode=disable"
    collection_interval: ${env:ENHANCED_SQL_INTERVAL:-60s}
    feature_detection:
      enabled: ${env:ENABLE_FEATURE_DETECTION:-true}
      cache_duration: ${env:FEATURE_CACHE_DURATION:-5m}
      refresh_interval: ${env:FEATURE_REFRESH_INTERVAL:-30m}
    enable_plan_collection: ${env:ENABLE_PLAN_COLLECTION:-true}
    plan_cache_size: ${env:PLAN_CACHE_SIZE:-1000}

  # Specialized QueryLens SQL queries
  sqlquery/querylens:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST:-localhost} port=${env:POSTGRES_PORT:-5432} user=${env:POSTGRES_USER:-postgres} password=${env:POSTGRES_PASSWORD:-postgres} dbname=${env:POSTGRES_DB:-postgres} sslmode=disable"
    collection_interval: ${env:QUERYLENS_INTERVAL:-300s}
    queries:
      # QueryLens plan history
      - sql: |
          SELECT 
            queryid,
            plan_id,
            plan_text,
            regression_severity,
            change_timestamp,
            execution_count,
            total_time,
            mean_time
          FROM pg_querylens.plan_history
          WHERE change_timestamp > NOW() - INTERVAL '1 hour'
          ORDER BY change_timestamp DESC
          LIMIT 1000
        metrics:
          - metric_name: querylens_plan_history
            value_column: execution_count
            attribute_columns: [queryid, plan_id, regression_severity]

      # QueryLens performance regression detection
      - sql: |
          SELECT 
            queryid,
            current_plan_id,
            previous_plan_id,
            performance_change_percent,
            regression_type,
            detected_at
          FROM pg_querylens.performance_regressions
          WHERE detected_at > NOW() - INTERVAL '5 minutes'
        metrics:
          - metric_name: querylens_regressions
            value_column: performance_change_percent
            attribute_columns: [queryid, regression_type]

      # QueryLens query fingerprints
      - sql: |
          SELECT 
            query_fingerprint,
            normalized_query,
            plan_count,
            avg_execution_time,
            total_calls
          FROM pg_querylens.query_fingerprints
          WHERE last_seen > NOW() - INTERVAL '1 hour'
        metrics:
          - metric_name: querylens_fingerprints
            value_column: total_calls
            attribute_columns: [query_fingerprint]

# Enhanced processors for QueryLens
processors:
  # Enhanced plan attribute extractor with QueryLens integration
  planattributeextractor:
    enable_anonymization: ${env:ENABLE_ANONYMIZATION:-true}
    enable_plan_analysis: ${env:ENABLE_PLAN_ANALYSIS:-true}
    max_query_length: ${env:MAX_QUERY_LENGTH:-4096}
    querylens:
      enabled: ${env:ENABLE_QUERYLENS:-true}
      plan_history_hours: ${env:PLAN_HISTORY_HOURS:-24}
      regression_detection:
        time_increase: ${env:REGRESSION_TIME_INCREASE:-1.5}
        io_increase: ${env:REGRESSION_IO_INCREASE:-2.0}
        memory_increase: ${env:REGRESSION_MEMORY_INCREASE:-1.8}
      plan_tracking:
        enabled: ${env:ENABLE_PLAN_TRACKING:-true}
        cache_size: ${env:PLAN_TRACKING_CACHE_SIZE:-5000}
    query_anonymization:
      generate_fingerprint: ${env:GENERATE_FINGERPRINT:-true}
      normalize_parameters: ${env:NORMALIZE_PARAMETERS:-true}
      preserve_literals: ${env:PRESERVE_LITERALS:-false}

# QueryLens-specific service configuration
service:
  extensions: [health_check, pprof, zpages, memory_ballast]
  pipelines:
    metrics:
      receivers: [postgresql, sqlquery/querylens, autoexplain, enhancedsql/postgresql]
      processors: [memory_limiter, planattributeextractor, resource, batch]
      exporters: [otlphttp/newrelic, prometheus]
    traces:
      receivers: [autoexplain, enhancedsql/postgresql]
      processors: [memory_limiter, planattributeextractor, resource, batch]
      exporters: [otlphttp/newrelic]