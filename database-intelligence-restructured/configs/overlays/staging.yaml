# Staging Environment Overlay
# This overlay modifies the base configuration for staging/pre-production use
# 
# Changes from base:
# - Production-like settings with some debugging enabled
# - Moderate collection intervals
# - Sampling enabled for cost control
# - Both OTLP and Prometheus exports
# - Additional monitoring processors

# Receivers with staging-appropriate intervals
receivers:
  postgresql:
    collection_interval: 30s
    tls:
      insecure: false
      ca_file: ${env:POSTGRES_CA_FILE}
      cert_file: ${env:POSTGRES_CERT_FILE}
      key_file: ${env:POSTGRES_KEY_FILE}

  mysql:
    collection_interval: 30s

  sqlquery/postgresql:
    collection_interval: 120s
  
  sqlquery/mysql:
    collection_interval: 120s

# Enhanced SQL receiver for advanced monitoring
  enhancedsql/postgresql:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST:-localhost} port=${env:POSTGRES_PORT:-5432} user=${env:POSTGRES_USER:-postgres} password=${env:POSTGRES_PASSWORD:-postgres} dbname=${env:POSTGRES_DB:-postgres} sslmode=${env:POSTGRES_SSLMODE:-require}"
    collection_interval: 60s
    enable_plan_collection: true
    plan_cache_size: 500

# Staging processors with monitoring features
processors:
  # Moderate memory limits
  memory_limiter:
    limit_mib: 768
    spike_limit_mib: 192

  # Standard batching
  batch:
    timeout: 2s
    send_batch_size: 512
    send_batch_max_size: 1024

  # Adaptive sampling for cost control
  adaptivesampler:
    sampling_percentage: 25
    max_traces_per_second: 500
    decision_cache:
      sampled_cache_size: 50000
      nonsampled_cache_size: 50000
    sampling_rules:
      - service_name_pattern: "database-.*"
        span_name_pattern: "SELECT.*"
        sampling_percentage: 10
      - service_name_pattern: "database-.*"
        span_name_pattern: "(INSERT|UPDATE|DELETE).*"
        sampling_percentage: 75

  # Circuit breaker for protection
  circuit_breaker:
    max_failures: 3
    failure_threshold_percentage: 30
    timeout: 20s
    recovery_timeout: 40s
    per_database_circuit: true
    health_check_interval: 15s

  # Plan attribute extractor
  planattributeextractor:
    enable_anonymization: true
    enable_plan_analysis: true
    max_query_length: 2048
    plan_cache:
      enabled: true
      max_size: 5000
      ttl: 1800s

  # Verification processor
  verification:
    enable_pii_detection: true
    enable_data_validation: true
    max_field_length: 500
    sample_rate: 0.5

# Staging exporters
exporters:
  # Primary OTLP export
  otlphttp:
    endpoint: ${env:STAGING_OTLP_ENDPOINT:-https://staging-otlp.nr-data.net}
    headers:
      api-key: ${env:STAGING_API_KEY}
    compression: gzip
    timeout: 20s
    retry_on_failure:
      enabled: true
      initial_interval: 2s
      max_interval: 20s
      max_elapsed_time: 180s

  # Prometheus for monitoring
  prometheus:
    endpoint: 0.0.0.0:8889
    namespace: database_intelligence_staging
    metric_expiration: 5m

  # Reduced logging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 100

  # Limited debug output
  debug:
    verbosity: basic
    sampling:
      initial: 10
      thereafter: 1000

# Service configuration for staging
service:
  extensions: [health_check, pprof, zpages, memory_ballast, filestorage]

  telemetry:
    logs:
      level: info
      development: false
      encoding: json
      output_paths: ["stdout", "/var/log/otel-collector/staging.log"]
    metrics:
      level: normal
      address: 0.0.0.0:8888

  # Staging pipelines with multiple processors
  pipelines:
    metrics/primary:
      receivers: [postgresql, mysql, sqlquery/postgresql, sqlquery/mysql, enhancedsql/postgresql]
      processors: 
        - memory_limiter
        - batch
        - adaptivesampler
        - circuit_breaker
        - planattributeextractor
        - verification
        - resource
        - attributes
      exporters: [otlphttp, prometheus, logging]

    metrics/critical:
      receivers: [postgresql, mysql]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [otlphttp]

    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, adaptivesampler, resource, attributes]
      exporters: [otlphttp, logging]

    logs:
      receivers: [otlp, enhancedsql/postgresql]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [otlphttp]