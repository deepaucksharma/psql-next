# Exporter Configurations
# All available exporters for Database Intelligence

exporters:
  # =============================================================================
  # STANDARD EXPORTERS (Production Ready)
  # =============================================================================
  
  # OTLP HTTP exporter - Primary New Relic export
  otlphttp:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: ${env:OTLP_COMPRESSION}
    timeout: ${env:OTLP_TIMEOUT}
    retry_on_failure:
      enabled: true
      initial_interval: ${env:RETRY_INITIAL_INTERVAL}
      max_interval: ${env:RETRY_MAX_INTERVAL}
      max_elapsed_time: ${env:RETRY_MAX_ELAPSED}
    sending_queue:
      enabled: true
      num_consumers: ${env:EXPORT_NUM_CONSUMERS}
      queue_size: ${env:EXPORT_QUEUE_SIZE}
      storage: ${env:EXPORT_STORAGE}
    tls:
      insecure: false
      insecure_skip_verify: false
      ca_file: ${env:OTLP_CA_FILE}
      cert_file: ${env:OTLP_CERT_FILE}
      key_file: ${env:OTLP_KEY_FILE}

  # OTLP gRPC exporter - Alternative export path
  otlp:
    endpoint: ${env:OTLP_GRPC_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: ${env:OTLP_COMPRESSION}
    timeout: ${env:OTLP_TIMEOUT}
    retry_on_failure:
      enabled: true
      initial_interval: ${env:RETRY_INITIAL_INTERVAL}
      max_interval: ${env:RETRY_MAX_INTERVAL}
      max_elapsed_time: ${env:RETRY_MAX_ELAPSED}
    sending_queue:
      enabled: true
      num_consumers: ${env:EXPORT_NUM_CONSUMERS}
      queue_size: ${env:EXPORT_QUEUE_SIZE}
    tls:
      insecure: false
      insecure_skip_verify: false

  # Debug exporter - Development and troubleshooting
  debug:
    verbosity: ${env:DEBUG_VERBOSITY}
    sampling_initial: ${env:DEBUG_SAMPLING_INITIAL}
    sampling_thereafter: ${env:DEBUG_SAMPLING_THEREAFTER}

  # Logging exporter - Structured logging output
  logging:
    loglevel: ${env:LOG_LEVEL}
    sampling_initial: ${env:LOG_SAMPLING_INITIAL}
    sampling_thereafter: ${env:LOG_SAMPLING_THEREAFTER}

  # File exporter - Local data archival
  file:
    path: ${env:FILE_EXPORT_PATH}
    rotation:
      enabled: true
      max_megabytes: ${env:FILE_MAX_SIZE_MB}
      max_days: ${env:FILE_MAX_DAYS}
      max_backups: ${env:FILE_MAX_BACKUPS}
      localtime: true
    format: ${env:FILE_FORMAT}
    compression: ${env:FILE_COMPRESSION}

  # Prometheus exporter - Metrics endpoint
  prometheus:
    endpoint: ${env:PROMETHEUS_ENDPOINT}
    namespace: ${env:PROMETHEUS_NAMESPACE}
    const_labels:
      service: ${env:SERVICE_NAME}
      environment: ${env:ENVIRONMENT}
    resource_to_telemetry_conversion:
      enabled: true
    enable_open_metrics: true
    metric_expiration: ${env:PROMETHEUS_METRIC_EXPIRATION}

  # =============================================================================
  # CUSTOM EXPORTERS (Require Enhanced Build)
  # =============================================================================
  
  # New Relic Infrastructure exporter - Legacy compatibility
  nri:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    api_key: ${env:NEW_RELIC_LICENSE_KEY}
    account_id: ${env:NEW_RELIC_ACCOUNT_ID}
    timeout: ${env:NRI_TIMEOUT}
    retry_on_failure:
      enabled: true
      initial_interval: ${env:RETRY_INITIAL_INTERVAL}
      max_interval: ${env:RETRY_MAX_INTERVAL}
    compression: gzip
    format: "ohi"  # OHI compatibility mode

  # New Relic error monitor exporter
  nrerrormonitor:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    api_key: ${env:NEW_RELIC_LICENSE_KEY}
    alert_thresholds:
      error_rate: ${env:ALERT_ERROR_RATE}
      latency_p99: ${env:ALERT_LATENCY_P99}
      throughput_drop: ${env:ALERT_THROUGHPUT_DROP}
    notification_channels:
      - type: email
        config:
          to: ${env:ALERT_EMAIL}
      - type: slack
        config:
          webhook: ${env:ALERT_SLACK_WEBHOOK}
      - type: pagerduty
        config:
          integration_key: ${env:ALERT_PAGERDUTY_KEY}

  # Failover exporter configuration
  loadbalancing:
    protocol:
      otlp:
        timeout: ${env:OTLP_TIMEOUT}
        retry_on_failure:
          enabled: true
    resolver:
      static:
        hostnames:
          - ${env:NEW_RELIC_OTLP_ENDPOINT}
          - ${env:NEW_RELIC_OTLP_ENDPOINT_BACKUP}