# Extension Configurations
# All available extensions for Database Intelligence

extensions:
  # =============================================================================
  # STANDARD EXTENSIONS (Production Ready)
  # =============================================================================
  
  # Health check extension - Liveness and readiness probes
  health_check:
    endpoint: ${env:HEALTH_CHECK_ENDPOINT}
    path: ${env:HEALTH_CHECK_PATH}
    tls:
      cert_file: ${env:HEALTH_TLS_CERT}
      key_file: ${env:HEALTH_TLS_KEY}
    check_collector_pipeline:
      enabled: true
      interval: ${env:HEALTH_CHECK_INTERVAL}
      exporter_failure_threshold: ${env:HEALTH_EXPORTER_THRESHOLD}

  # Performance profiler extension
  pprof:
    endpoint: ${env:PPROF_ENDPOINT}
    block_profile_fraction: ${env:PPROF_BLOCK_FRACTION}
    mutex_profile_fraction: ${env:PPROF_MUTEX_FRACTION}
    save_to_file: ${env:PPROF_SAVE_TO_FILE}

  # zPages extension - Live debugging
  zpages:
    endpoint: ${env:ZPAGES_ENDPOINT}

  # File storage extension - Persistent queue state
  file_storage:
    directory: ${env:STORAGE_DIR}
    timeout: ${env:STORAGE_TIMEOUT}
    compaction:
      on_start: true
      on_shutdown: true
      directory: ${env:STORAGE_COMPACTION_DIR}
    ttl: ${env:STORAGE_TTL}

  # Basic auth extension
  basicauth/client:
    client_auth:
      username: ${env:BASIC_AUTH_USERNAME}
      password: ${env:BASIC_AUTH_PASSWORD}

  # Bearer token auth extension
  bearertokenauth:
    token: ${env:BEARER_TOKEN}
    filename: ${env:BEARER_TOKEN_FILE}
    scheme: ${env:BEARER_SCHEME}

  # OAuth2 client credentials extension
  oauth2client:
    client_id: ${env:OAUTH_CLIENT_ID}
    client_secret: ${env:OAUTH_CLIENT_SECRET}
    token_url: ${env:OAUTH_TOKEN_URL}
    scopes: ${env:OAUTH_SCOPES}
    timeout: ${env:OAUTH_TIMEOUT}

  # =============================================================================
  # CUSTOM EXTENSIONS (Require Enhanced Build)
  # =============================================================================
  
  # PostgreSQL query extension - Direct query execution
  postgresqlquery:
    endpoint: ${env:DB_POSTGRES_HOST}:${env:DB_POSTGRES_PORT}
    username: ${env:DB_POSTGRES_USER}
    password: ${env:DB_POSTGRES_PASSWORD}
    database: ${env:DB_POSTGRES_DATABASE}
    max_connections: ${env:PG_QUERY_MAX_CONNECTIONS}
    connection_timeout: ${env:PG_QUERY_TIMEOUT}
    query_timeout: ${env:PG_QUERY_EXEC_TIMEOUT}
    enable_ssl: ${env:PG_QUERY_SSL_ENABLED}
    ssl_mode: ${env:PG_QUERY_SSL_MODE}

  # Feature detection extension
  featuredetection:
    databases:
      - type: postgresql
        endpoint: ${env:DB_POSTGRES_HOST}:${env:DB_POSTGRES_PORT}
        username: ${env:DB_POSTGRES_USER}
        password: ${env:DB_POSTGRES_PASSWORD}
      - type: mysql
        endpoint: ${env:DB_MYSQL_HOST}:${env:DB_MYSQL_PORT}
        username: ${env:DB_MYSQL_USER}
        password: ${env:DB_MYSQL_PASSWORD}
    check_interval: ${env:FEATURE_CHECK_INTERVAL}
    features_to_detect:
      - pg_stat_statements
      - pg_stat_activity
      - performance_schema
      - sys_schema

  # Healthcheck extension with database validation
  healthcheck/advanced:
    endpoint: ${env:HEALTH_CHECK_ENDPOINT}
    path: ${env:HEALTH_CHECK_PATH}
    database_checks:
      - name: postgres_connectivity
        type: postgresql
        endpoint: ${env:DB_POSTGRES_HOST}:${env:DB_POSTGRES_PORT}
        query: "SELECT 1"
        timeout: ${env:DB_HEALTH_TIMEOUT}
      - name: mysql_connectivity
        type: mysql
        endpoint: ${env:DB_MYSQL_HOST}:${env:DB_MYSQL_PORT}
        query: "SELECT 1"
        timeout: ${env:DB_HEALTH_TIMEOUT}
    thresholds:
      response_time: ${env:HEALTH_RESPONSE_TIME_MS}
      error_rate: ${env:HEALTH_ERROR_RATE}
      
  # Memory ballast extension (deprecated, use memory_limiter processor)
  # Kept for backward compatibility
  memory_ballast:
    size_mib: ${env:BALLAST_SIZE_MIB}
    size_in_percentage: ${env:BALLAST_SIZE_PERCENTAGE}