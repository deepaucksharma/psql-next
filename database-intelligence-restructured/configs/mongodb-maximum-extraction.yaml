# MongoDB Maximum Metrics Extraction - Config Only Approach
# This configuration extracts the maximum possible metrics using only stock OpenTelemetry components
# Leverages MongoDB receiver and advanced aggregation pipelines via mongodbatlas receiver

receivers:
  # ============================================
  # CORE MONGODB RECEIVER
  # ============================================
  mongodb:
    hosts:
      - endpoint: ${env:MONGODB_HOST:localhost}:${env:MONGODB_PORT:27017}
    username: ${env:MONGODB_USER:admin}
    password: ${env:MONGODB_PASSWORD}
    collection_interval: 10s
    tls:
      insecure: true
      insecure_skip_verify: true
    # Enable all available metrics
    metrics:
      mongodb.cache.operations:
        enabled: true
      mongodb.collection.count:
        enabled: true
      mongodb.connection.count:
        enabled: true
      mongodb.cursor.count:
        enabled: true
      mongodb.cursor.timeout.count:
        enabled: true
      mongodb.data.size:
        enabled: true
      mongodb.database.count:
        enabled: true
      mongodb.document.operation.count:
        enabled: true
      mongodb.document.count:
        enabled: true
      mongodb.extent.count:
        enabled: true
      mongodb.global_lock.time:
        enabled: true
      mongodb.health:
        enabled: true
      mongodb.index.access.count:
        enabled: true
      mongodb.index.count:
        enabled: true
      mongodb.index.size:
        enabled: true
      mongodb.lock.acquire.count:
        enabled: true
      mongodb.lock.acquire.time:
        enabled: true
      mongodb.lock.acquire.wait_count:
        enabled: true
      mongodb.lock.acquire.wait_time:
        enabled: true
      mongodb.lock.deadlock.count:
        enabled: true
      mongodb.memory.usage:
        enabled: true
      mongodb.network.io.receive:
        enabled: true
      mongodb.network.io.transmit:
        enabled: true
      mongodb.network.request.count:
        enabled: true
      mongodb.object.count:
        enabled: true
      mongodb.operation.count:
        enabled: true
      mongodb.operation.latency.time:
        enabled: true
      mongodb.operation.repl.count:
        enabled: true
      mongodb.operation.time:
        enabled: true
      mongodb.session.count:
        enabled: true
      mongodb.storage.size:
        enabled: true
      mongodb.uptime:
        enabled: true

  # ============================================
  # MONGODB ATLAS RECEIVER (ADVANCED METRICS)
  # ============================================
  mongodbatlas:
    public_key: ${env:MONGODB_ATLAS_PUBLIC_KEY}
    private_key: ${env:MONGODB_ATLAS_PRIVATE_KEY}
    projects:
      - name: ${env:MONGODB_ATLAS_PROJECT:default}
        include_clusters:
          - ${env:MONGODB_ATLAS_CLUSTER:all}
    collection_interval: 60s
    metrics:
      mongodbatlas.db.counts:
        enabled: true
      mongodbatlas.db.size:
        enabled: true
      mongodbatlas.disk.partition.iops.average:
        enabled: true
      mongodbatlas.disk.partition.iops.max:
        enabled: true
      mongodbatlas.disk.partition.latency.average:
        enabled: true
      mongodbatlas.disk.partition.latency.max:
        enabled: true
      mongodbatlas.disk.partition.space.average:
        enabled: true
      mongodbatlas.disk.partition.space.max:
        enabled: true
      mongodbatlas.disk.partition.usage.average:
        enabled: true
      mongodbatlas.disk.partition.usage.max:
        enabled: true
      mongodbatlas.disk.partition.utilization.average:
        enabled: true
      mongodbatlas.disk.partition.utilization.max:
        enabled: true
      mongodbatlas.process.asserts:
        enabled: true
      mongodbatlas.process.background_flush:
        enabled: true
      mongodbatlas.process.cache.bytes:
        enabled: true
      mongodbatlas.process.cache.evicted:
        enabled: true
      mongodbatlas.process.cache.io:
        enabled: true
      mongodbatlas.process.connections:
        enabled: true
      mongodbatlas.process.cpu.usage.average:
        enabled: true
      mongodbatlas.process.cpu.usage.max:
        enabled: true
      mongodbatlas.process.cursors:
        enabled: true
      mongodbatlas.process.db.document.rate:
        enabled: true
      mongodbatlas.process.db.operations.rate:
        enabled: true
      mongodbatlas.process.db.operations.time:
        enabled: true
      mongodbatlas.process.db.query_executor.scanned:
        enabled: true
      mongodbatlas.process.db.query_targeting.scanned_per_returned:
        enabled: true
      mongodbatlas.process.fts.cpu.usage:
        enabled: true
      mongodbatlas.process.fts.disk.utilization:
        enabled: true
      mongodbatlas.process.fts.memory.usage:
        enabled: true
      mongodbatlas.process.global_lock:
        enabled: true
      mongodbatlas.process.index.btree_miss_ratio:
        enabled: true
      mongodbatlas.process.journaling.commits:
        enabled: true
      mongodbatlas.process.journaling.data_files:
        enabled: true
      mongodbatlas.process.journaling.written:
        enabled: true
      mongodbatlas.process.memory.usage:
        enabled: true
      mongodbatlas.process.network.io:
        enabled: true
      mongodbatlas.process.network.requests:
        enabled: true
      mongodbatlas.process.oplog.rate:
        enabled: true
      mongodbatlas.process.oplog.time:
        enabled: true
      mongodbatlas.process.page_faults:
        enabled: true
      mongodbatlas.process.restarts:
        enabled: true
      mongodbatlas.process.tickets:
        enabled: true
      mongodbatlas.system.cpu.usage.average:
        enabled: true
      mongodbatlas.system.cpu.usage.max:
        enabled: true
      mongodbatlas.system.fts.cpu.usage:
        enabled: true
      mongodbatlas.system.fts.disk.used:
        enabled: true
      mongodbatlas.system.fts.memory.usage:
        enabled: true
      mongodbatlas.system.memory.usage.average:
        enabled: true
      mongodbatlas.system.memory.usage.max:
        enabled: true
      mongodbatlas.system.network.io.average:
        enabled: true
      mongodbatlas.system.network.io.max:
        enabled: true
      mongodbatlas.system.paging.io.average:
        enabled: true
      mongodbatlas.system.paging.io.max:
        enabled: true
      mongodbatlas.system.paging.usage.average:
        enabled: true
      mongodbatlas.system.paging.usage.max:
        enabled: true

  # ============================================
  # CUSTOM METRICS VIA EXEC RECEIVER
  # ============================================
  exec/mongodb_custom:
    commands:
      - 'echo "db.currentOp()" | mongosh --quiet --host ${env:MONGODB_HOST:localhost}:${env:MONGODB_PORT:27017} -u ${env:MONGODB_USER:admin} -p ${env:MONGODB_PASSWORD} --authenticationDatabase admin --eval "JSON.stringify(db.currentOp())"'
    collection_interval: 5s
    timeout: 10s

  # ============================================
  # HOST METRICS
  # ============================================
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      disk:
        metrics:
          system.disk.io:
            enabled: true
          system.disk.operations:
            enabled: true
      network:
        metrics:
          system.network.io:
            enabled: true
          system.network.connections:
            enabled: true
      load:
        metrics:
          system.cpu.load_average.1m:
            enabled: true
          system.cpu.load_average.5m:
            enabled: true
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
      process:
        metrics:
          process.cpu.utilization:
            enabled: true
          process.memory.utilization:
            enabled: true

processors:
  # ============================================
  # MEMORY MANAGEMENT
  # ============================================
  memory_limiter:
    check_interval: 1s
    limit_mib: 1024
    spike_limit_mib: 256

  # ============================================
  # BATCH PROCESSING
  # ============================================
  batch:
    send_batch_size: 10000
    timeout: 10s
    send_batch_max_size: 11000

  # ============================================
  # RESOURCE DETECTION
  # ============================================
  resource:
    attributes:
      - key: deployment.mode
        value: config-only-maximum
        action: upsert
      - key: database.type
        value: mongodb
        action: upsert
      - key: collector.name
        value: database-intelligence-mongodb
        action: upsert

  # ============================================
  # METRIC TRANSFORMATIONS
  # ============================================
  transform/add_metadata:
    metric_statements:
      # Classify operation latencies
      - context: metric
        statements:
          - set(attributes["operation.performance"], "fast") where name == "mongodb.operation.latency.time" and value < 10
          - set(attributes["operation.performance"], "normal") where name == "mongodb.operation.latency.time" and value >= 10 and value < 100
          - set(attributes["operation.performance"], "slow") where name == "mongodb.operation.latency.time" and value >= 100 and value < 1000
          - set(attributes["operation.performance"], "very_slow") where name == "mongodb.operation.latency.time" and value >= 1000
      
      # Classify lock wait times
      - context: metric
        statements:
          - set(attributes["lock.severity"], "low") where name == "mongodb.lock.acquire.wait_time" and value < 100
          - set(attributes["lock.severity"], "medium") where name == "mongodb.lock.acquire.wait_time" and value >= 100 and value < 1000
          - set(attributes["lock.severity"], "high") where name == "mongodb.lock.acquire.wait_time" and value >= 1000

      # Add replication status
      - context: metric
        statements:
          - set(attributes["replication.health"], "healthy") where name == "mongodb.health" and value == 1
          - set(attributes["replication.health"], "unhealthy") where name == "mongodb.health" and value == 0

  # ============================================
  # JSON PARSING FOR EXEC RECEIVER
  # ============================================
  transform/parse_json:
    log_statements:
      - context: log
        statements:
          - merge_maps(cache, ParseJSON(body), "insert") where IsMatch(body, "^\\{.*\\}$")
          - set(attributes["mongodb.currentOp.active"], cache["inprog"] != nil ? Len(cache["inprog"]) : 0)
          - set(attributes["mongodb.currentOp.total"], cache["totalOps"])

  # ============================================
  # AGGREGATION PROCESSOR
  # ============================================
  groupbyattrs:
    keys:
      - database.name
      - collection.name
      - operation.type
      - replication.state

  # ============================================
  # FILTERING
  # ============================================
  filter/reduce_cardinality:
    metrics:
      metric:
        # Keep only production databases
        - 'attributes["database.name"] == "admin" or attributes["database.name"] == "config" or attributes["database.name"] == "local"'

exporters:
  # ============================================
  # NEW RELIC EXPORTER
  # ============================================
  otlp/newrelic:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT:https://otlp.nr-data.net:4317}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

  # ============================================
  # LOCAL DEBUGGING
  # ============================================
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

  # ============================================
  # PROMETHEUS ENDPOINT
  # ============================================
  prometheus:
    endpoint: "0.0.0.0:8890"
    namespace: db_mongodb
    const_labels:
      deployment.mode: config_only_maximum

service:
  pipelines:
    # ============================================
    # HIGH FREQUENCY METRICS (5s)
    # ============================================
    metrics/high_frequency:
      receivers: [exec/mongodb_custom]
      processors: [memory_limiter, resource, transform/parse_json, transform/add_metadata, batch]
      exporters: [otlp/newrelic]

    # ============================================
    # STANDARD METRICS (10s)
    # ============================================
    metrics/standard:
      receivers: [mongodb, hostmetrics]
      processors: [memory_limiter, resource, batch]
      exporters: [otlp/newrelic]

    # ============================================
    # CLOUD METRICS (60s)
    # ============================================
    metrics/cloud:
      receivers: [mongodbatlas]
      processors: [memory_limiter, resource, groupbyattrs, filter/reduce_cardinality, batch]
      exporters: [otlp/newrelic]

  telemetry:
    logs:
      level: info
      development: false
      encoding: json
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  extensions: [health_check, pprof, zpages]

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: "/health"
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679