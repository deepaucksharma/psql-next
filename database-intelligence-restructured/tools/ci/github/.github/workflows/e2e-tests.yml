name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - nrdb

env:
  GO_VERSION: '1.21'
  OTEL_VERSION: 'v0.88.0'
  POSTGRES_VERSION: '15'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install OpenTelemetry Collector
      run: |
        wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/${{ env.OTEL_VERSION }}/otelcol_$(echo ${{ env.OTEL_VERSION }} | tr -d 'v')_linux_amd64.tar.gz
        tar -xvf otelcol_*.tar.gz
        sudo mv otelcol /usr/local/bin/
        otelcol --version

    - name: Set up PostgreSQL extensions
      env:
        PGPASSWORD: test_password
      run: |
        psql -h localhost -U test_user -d test_db -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"
        psql -h localhost -U test_user -d test_db -c "ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_statements';"
        psql -h localhost -U test_user -d test_db -c "ALTER SYSTEM SET pg_stat_statements.track = 'all';"
        psql -h localhost -U test_user -d test_db -c "ALTER SYSTEM SET log_min_duration_statement = 0;"
        psql -h localhost -U test_user -d test_db -c "ALTER SYSTEM SET auto_explain.log_min_duration = '10ms';"

    - name: Install dependencies
      run: |
        go mod download
        go install gotest.tools/gotestsum@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Run linters
      run: |
        golangci-lint run ./tests/e2e/...

    - name: Set up test environment
      run: |
        mkdir -p test-results/current
        mkdir -p /tmp/test-logs
        
        # Export environment variables
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "POSTGRES_USER=test_user" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=test_password" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
        echo "POSTGRES_LOG_PATH=/tmp/test-logs/postgresql.log" >> $GITHUB_ENV
        echo "TEST_RUN_ID=ci-${{ github.run_id }}-${{ github.run_number }}" >> $GITHUB_ENV

    - name: Run E2E tests
      run: |
        case "${{ github.event.inputs.test_category || 'all' }}" in
          unit)
            gotestsum --junitfile test-results/current/junit.xml -- -v -short ./tests/e2e/...
            ;;
          integration)
            gotestsum --junitfile test-results/current/junit.xml -- -v -run TestFullIntegrationE2E -timeout 20m ./tests/e2e/
            ;;
          performance)
            gotestsum --junitfile test-results/current/junit.xml -- -v -run TestPerformanceE2E -timeout 30m ./tests/e2e/
            ;;
          nrdb)
            if [[ -n "${{ secrets.NEW_RELIC_ACCOUNT_ID }}" ]]; then
              export NEW_RELIC_ACCOUNT_ID="${{ secrets.NEW_RELIC_ACCOUNT_ID }}"
              export NEW_RELIC_LICENSE_KEY="${{ secrets.NEW_RELIC_LICENSE_KEY }}"
              export NEW_RELIC_API_KEY="${{ secrets.NEW_RELIC_API_KEY }}"
              gotestsum --junitfile test-results/current/junit.xml -- -v -run TestNRQLDashboardQueries -timeout 15m ./tests/e2e/
            else
              echo "Skipping NRDB tests - New Relic credentials not configured"
            fi
            ;;
          all|*)
            gotestsum --junitfile test-results/current/junit.xml -- -v -timeout 30m ./tests/e2e/
            ;;
        esac

    - name: Run benchmarks
      if: github.event_name == 'schedule' || github.event.inputs.test_category == 'performance'
      run: |
        go test -bench=. -benchmem -benchtime=10s -run=^$ ./tests/e2e/ | tee test-results/current/benchmarks.txt

    - name: Collect test artifacts
      if: always()
      run: |
        # Collect PostgreSQL logs
        docker logs ${{ job.services.postgres.id }} > test-results/current/postgres.log 2>&1 || true
        
        # Collect any collector logs
        if [ -f /tmp/test-logs/collector.log ]; then
          cp /tmp/test-logs/collector.log test-results/current/
        fi
        
        # Generate summary
        echo "Test Run Summary" > test-results/current/summary.txt
        echo "================" >> test-results/current/summary.txt
        echo "Run ID: ${{ github.run_id }}" >> test-results/current/summary.txt
        echo "Commit: ${{ github.sha }}" >> test-results/current/summary.txt
        echo "Branch: ${{ github.ref }}" >> test-results/current/summary.txt
        echo "Category: ${{ github.event.inputs.test_category || 'all' }}" >> test-results/current/summary.txt
        echo "" >> test-results/current/summary.txt
        
        # Add test results summary
        if [ -f test-results/current/junit.xml ]; then
          echo "Test Results:" >> test-results/current/summary.txt
          grep -E "tests=|failures=|errors=" test-results/current/junit.xml >> test-results/current/summary.txt || true
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results-${{ github.run_id }}
        path: test-results/current/
        retention-days: 30

    - name: Upload test report
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: E2E Test Results
        path: test-results/current/junit.xml
        reporter: java-junit

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-results/current/summary.txt', 'utf8');
          
          const comment = `## E2E Test Results
          
          ${summary}
          
          [View full test artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  nrdb-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' && github.repository == 'database-intelligence-mvp/database-intelligence-mvp'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run NRDB integration tests
      env:
        NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
        NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
        NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}
      run: |
        go test -v -run TestNRQLDashboardQueries -timeout 30m ./tests/e2e/

    - name: Validate dashboards
      run: |
        # Validate dashboard JSON
        python3 -m json.tool dashboards/newrelic-dashboards.json > /dev/null
        echo "Dashboard JSON is valid"

  performance-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4

    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        ref: main
        path: main

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run benchmarks on main
      working-directory: main
      run: |
        go test -bench=. -benchmem -benchtime=30s -run=^$ ./tests/e2e/ | tee ../main-benchmarks.txt

    - name: Run benchmarks on PR
      run: |
        go test -bench=. -benchmem -benchtime=30s -run=^$ ./tests/e2e/ | tee pr-benchmarks.txt

    - name: Compare benchmarks
      run: |
        go install golang.org/x/perf/cmd/benchstat@latest
        benchstat main-benchmarks.txt pr-benchmarks.txt | tee comparison.txt

    - name: Comment PR with benchmark results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const comparison = fs.readFileSync('comparison.txt', 'utf8');
          
          const comment = `## Performance Benchmark Comparison
          
          \`\`\`
          ${comparison}
          \`\`\`
          
          **Note**: Performance regressions > 10% should be investigated before merging.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });