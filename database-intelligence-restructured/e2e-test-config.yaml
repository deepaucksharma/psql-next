extensions:
  health_check:
    endpoint: 0.0.0.0:13133

receivers:
  postgresql:
    endpoint: localhost:5432
    username: postgres
    password: password
    databases:
      - testdb
    collection_interval: 10s
    tls:
      insecure: true

  mysql:
    endpoint: localhost:3306
    username: root
    password: password
    database: testdb
    collection_interval: 10s

  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      memory:
      disk:
      network:

processors:
  batch:
    timeout: 10s
    send_batch_size: 1000

  resource:
    attributes:
      - key: service.name
        value: database-intelligence-e2e
        action: insert
      - key: environment
        value: e2e-test
        action: insert
      - key: test.run.id
        value: ${env:TEST_RUN_ID}
        action: insert

  attributes:
    actions:
      - key: collector.version
        value: "0.1.0"
        action: insert

exporters:
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

  file:
    path: ${env:LOG_DIR}/metrics.json
    rotation:
      enabled: true
      max_megabytes: 10
      max_days: 1
      max_backups: 3

  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: database_intelligence
    const_labels:
      environment: e2e
      test_run: ${env:TEST_RUN_ID}

service:
  telemetry:
    logs:
      level: debug
      development: true
      encoding: console
      output_paths: ["stdout", "${env:LOG_DIR}/collector.log"]
    metrics:
      level: detailed
      address: 0.0.0.0:8888

  extensions: [health_check]
  
  pipelines:
    metrics:
      receivers: [postgresql, mysql, hostmetrics]
      processors: [batch, resource, attributes]
      exporters: [debug, file, prometheus]
