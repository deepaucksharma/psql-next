# Database Intelligence - Unified Docker Compose
# Complete testing environment with all databases, collector, and monitoring

version: '3.8'

services:
  # =============================================================================
  # DATABASES
  # =============================================================================
  
  postgres:
    image: postgres:16
    container_name: db-intel-postgres
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/scripts/test/sql/postgres-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./tools/scripts/test/sql/postgres-test-data.sql:/docker-entrypoint-initdb.d/02-test-data.sql
    command: >
      postgres
        -c shared_preload_libraries=pg_stat_statements,auto_explain
        -c pg_stat_statements.track=all
        -c auto_explain.log_min_duration=100ms
        -c auto_explain.log_analyze=true
        -c auto_explain.log_verbose=true
        -c log_statement=all
        -c log_min_duration_statement=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: db-intel-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./tools/scripts/test/sql/mysql-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./tools/scripts/test/sql/mysql-test-data.sql:/docker-entrypoint-initdb.d/02-test-data.sql
    command: >
      --performance-schema=ON
      --performance_schema_consumer_events_statements_current=ON
      --performance_schema_consumer_events_statements_history=ON
      --performance_schema_consumer_events_statements_history_long=ON
      --slow-query-log=1
      --long-query-time=0.1
      --log-queries-not-using-indexes=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # DATABASE INTELLIGENCE COLLECTOR
  # =============================================================================
  
  collector:
    build:
      context: .
      dockerfile: deployments/docker/dockerfiles/Dockerfile.custom
    container_name: db-intel-collector
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Internal metrics
      - "13133:13133" # Health check
      - "55679:55679" # zPages
      - "1777:1777"   # pprof (optional)
    volumes:
      - ./configs/unified/database-intelligence-complete.yaml:/etc/otelcol-contrib/config.yaml
      - ./telemetry-output:/app/output
    environment:
      # Database connections
      - DB_POSTGRES_ENDPOINT=postgres:5432
      - DB_POSTGRES_USER=postgres
      - DB_POSTGRES_PASSWORD=password
      - DB_POSTGRES_DATABASE=testdb
      - DB_MYSQL_ENDPOINT=mysql:3306
      - DB_MYSQL_USER=root
      - DB_MYSQL_PASSWORD=password
      - DB_MYSQL_DATABASE=testdb
      
      # Export configuration
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY:-your_key_here}
      - ENVIRONMENT=docker-compose
      
      # Feature flags
      - ENABLE_ADAPTIVE_SAMPLER=true
      - ENABLE_CIRCUIT_BREAKER=true
      - ENABLE_COST_CONTROL=true
      - ENABLE_PLAN_EXTRACTOR=true
      - ENABLE_VERIFICATION=true
      - ENABLE_ERROR_MONITOR=true
      - ENABLE_QUERY_CORRELATOR=true
      - ENABLE_PII_DETECTION=true
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:13133/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING & OBSERVABILITY - New Relic Only
  # =============================================================================
  
  # Note: All metrics are sent directly to New Relic via OTLP
  # No local Prometheus or Grafana needed

  # =============================================================================
  # LOAD GENERATION
  # =============================================================================
  
  load-generator:
    build:
      context: .
      dockerfile: deployments/docker/dockerfiles/Dockerfile.loadgen
    container_name: db-intel-load-gen
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    environment:
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/testdb
      - MYSQL_URL=mysql://root:password@mysql:3306/testdb
      - LOAD_DURATION=300s
      - QUERIES_PER_SECOND=10
      - CONCURRENT_CONNECTIONS=5
    volumes:
      - ./tools/scripts/test/load:/app/scripts
    profiles:
      - load-testing

  # =============================================================================
  # E2E TESTING
  # =============================================================================
  
  e2e-tests:
    build:
      context: .
      dockerfile: deployments/docker/dockerfiles/Dockerfile.test
    container_name: db-intel-e2e
    depends_on:
      collector:
        condition: service_healthy
    environment:
      - COLLECTOR_ENDPOINT=http://collector:4318
      - TEST_DURATION=300s
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
    volumes:
      - ./tests/e2e:/app/tests
      - ./tools/scripts/test:/app/scripts
      - ./test-results:/app/results
    profiles:
      - testing

volumes:
  postgres_data:
  mysql_data:

networks:
  default:
    name: database-intelligence
    driver: bridge