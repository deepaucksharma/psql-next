receivers:
  # Standard PostgreSQL receiver
  postgresql:
    endpoint: ${env:POSTGRES_HOST}:${env:POSTGRES_PORT}
    transport: tcp
    username: ${env:POSTGRES_USER}
    password: ${env:POSTGRES_PASSWORD}
    databases:
      - ${env:POSTGRES_DB}
    collection_interval: 10s
    tls:
      insecure: true


  # ASH (Active Session History) receiver
  ash:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST} port=${env:POSTGRES_PORT} user=${env:POSTGRES_USER} password=${env:POSTGRES_PASSWORD} dbname=${env:POSTGRES_DB} sslmode=disable"
    collection_interval: 1s
    sampling:
      base_rate: 1.0
      min_rate: 0.1
      max_rate: 1.0
      low_session_threshold: 50
      high_session_threshold: 500
      always_sample_blocked: true
      always_sample_long_running: true
      always_sample_maintenance: true
    buffer_size: 10000
    retention_duration: 1h
    aggregation_windows:
      - 1m
      - 5m
      - 15m
      - 1h
    enable_feature_detection: true
    enable_wait_analysis: true
    enable_blocking_analysis: true
    enable_anomaly_detection: true
    slow_query_threshold_ms: 1000
    blocked_session_threshold: 5

  # Enhanced SQL receiver for detailed query metrics
  enhancedsql:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST} port=${env:POSTGRES_PORT} user=${env:POSTGRES_USER} password=${env:POSTGRES_PASSWORD} dbname=${env:POSTGRES_DB} sslmode=disable"
    collection_interval: 30s
    queries:
      # Query performance statistics
      - name: query_stats
        sql: |
          SELECT 
            queryid::text as query_id,
            LEFT(query, 100) as query_text,
            calls,
            total_exec_time,
            mean_exec_time,
            min_exec_time,
            max_exec_time,
            stddev_exec_time,
            rows,
            shared_blks_hit,
            shared_blks_read,
            shared_blks_dirtied,
            shared_blks_written,
            local_blks_hit,
            local_blks_read,
            local_blks_dirtied,
            local_blks_written,
            temp_blks_read,
            temp_blks_written,
            wal_records,
            wal_fpi,
            wal_bytes
          FROM pg_stat_statements
          WHERE query NOT LIKE '%pg_stat_statements%'
          ORDER BY total_exec_time DESC
          LIMIT 100

      # Table statistics
      - name: table_stats
        sql: |
          SELECT 
            schemaname,
            tablename,
            n_tup_ins,
            n_tup_upd,
            n_tup_del,
            n_tup_hot_upd,
            n_live_tup,
            n_dead_tup,
            last_vacuum,
            last_autovacuum,
            last_analyze,
            last_autoanalyze,
            vacuum_count,
            autovacuum_count,
            analyze_count,
            autoanalyze_count
          FROM pg_stat_user_tables

      # Index usage statistics
      - name: index_stats
        sql: |
          SELECT 
            schemaname,
            tablename,
            indexname,
            idx_scan,
            idx_tup_read,
            idx_tup_fetch
          FROM pg_stat_user_indexes
          WHERE idx_scan > 0

  # Kernel metrics receiver (custom)
  kernelmetrics:
    collection_interval: 30s
    enable_disk_metrics: true
    enable_network_metrics: true
    enable_process_metrics: true

  # Host metrics
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu:
      memory:
      disk:
      network:
      filesystem:
      load:
      processes:

processors:
  # Adaptive sampling for high-volume metrics
  adaptivesampler:
    sampling_percentage: 100
    evaluation_interval: 30s
    decision_wait: 10s
    num_traces: 100000
    expected_new_traces_per_sec: 10000
    policies:
      - policy_type: adaptive
        sampling_percentage: 100
        
  # Circuit breaker for protection
  circuitbreaker:
    failure_threshold: 5
    recovery_timeout: 30s
    metrics_limit: 100000
    
  # Cost control processor
  costcontrol:
    max_datapoints_per_minute: 1000000
    enforcement_mode: drop
    
  # Query plan extraction
  planattributeextractor:
    timeout: 5s
    cache_size: 1000
    extract_parameters: true
    
  # Query correlation
  querycorrelator:
    correlation_window: 5m
    max_correlated_queries: 100
    
  # OHI transformation for compatibility
  ohitransform:
    transform_rules:
      - source_metric: "db.ash.active_sessions"
        target_event: "PostgresSlowQueries"
        mappings:
          "db.postgresql.query_id": "query_id"
          "db.query.execution_time_mean": "avg_elapsed_time_ms"
          "db.query.count": "execution_count"
          "db.query.disk_reads": "avg_disk_reads"
          "db.query.disk_writes": "avg_disk_writes"
          "db.name": "database_name"
          "db.schema": "schema_name"
          "db.statement": "query_text"
          "db.operation": "statement_type"
          
      - source_metric: "db.ash.wait_events"
        target_event: "PostgresWaitEvents"
        mappings:
          "db.wait_event.name": "wait_event_name"
          "db.wait_event.type": "wait_event_type"
          "db.wait_event.count": "total_wait_time_ms"
          
  # Verification processor
  verification:
    verify_attributes: true
    verify_metrics: true
    drop_invalid: false
    
  # Error monitoring
  nrerrormonitor:
    error_rate_threshold: 0.1
    sample_errors: true
    
  # Standard processors
  attributes:
    actions:
      - key: deployment.mode
        value: custom
        action: insert
      - key: service.name
        value: ${env:OTEL_SERVICE_NAME}
        action: insert
      - key: service.version
        value: "2.0.0"
        action: insert
      - key: enhanced.features
        value: "ash,query_plans,adaptive_sampling,cost_control"
        action: insert

  resourcedetection:
    detectors: [env, system, docker]
    
  batch:
    timeout: 10s
    send_batch_size: 1000
    
  memory_limiter:
    check_interval: 1s
    limit_mib: 1024
    spike_limit_mib: 256

exporters:
  # New Relic OTLP exporter
  otlp:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    
  # New Relic Infrastructure (NRI) exporter for events
  nri:
    license_key: ${env:NEW_RELIC_LICENSE_KEY}
    events:
      enabled: true
    metrics:
      enabled: false
      
  # Debug exporter
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 100
    

extensions:
  # PostgreSQL query extension
  postgresqlquery:
    datasource: "host=${env:POSTGRES_HOST} port=${env:POSTGRES_PORT} user=${env:POSTGRES_USER} password=${env:POSTGRES_PASSWORD} dbname=${env:POSTGRES_DB} sslmode=disable"
    
  # Health check
  health_check:
    endpoint: 0.0.0.0:13133
    
  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

service:
  extensions: [health_check, pprof, postgresqlquery]
  
  telemetry:
    logs:
      level: info
      encoding: console
    metrics:
      level: detailed

  pipelines:
    # Metrics pipeline
    metrics:
      receivers: 
        - postgresql
        - ash
        - enhancedsql
        - kernelmetrics
        - hostmetrics
      processors:
        - memory_limiter
        - circuitbreaker
        - adaptivesampler
        - costcontrol
        - planattributeextractor
        - querycorrelator
        - resourcedetection
        - attributes
        - verification
        - batch
      exporters:
        - otlp
        - debug
        
    # Events pipeline (for OHI compatibility)
    metrics/events:
      receivers:
        - ash
        - enhancedsql
      processors:
        - memory_limiter
        - ohitransform
        - nrerrormonitor
        - batch
      exporters:
        - nri
        - debug