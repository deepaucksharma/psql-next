# Database Intelligence MVP - Production OTEL-First Setup
# Full production setup with all features including custom processors
# Includes PostgreSQL, MySQL, monitoring, and high availability

version: '3.8'

services:
  # Primary OpenTelemetry Collector
  otel-collector-primary:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: db-intel-collector-primary
    hostname: db-intel-collector-primary
    
    volumes:
      - ./configs/collector-production.yaml:/etc/otelcol-contrib/config.yaml:ro
      - collector-storage-primary:/var/lib/otel/storage
      - collector-logs:/var/log
      
    environment:
      # Database connections
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_USER=monitoring
      - POSTGRES_PASSWORD=monitoring123
      - POSTGRES_DB=proddb
      - POSTGRES_DSN=postgres://monitoring:monitoring123@postgres-primary:5432/proddb?sslmode=disable
      
      - MYSQL_HOST=mysql-primary
      - MYSQL_PORT=3306
      - MYSQL_USER=monitoring
      - MYSQL_PASSWORD=monitoring123
      - MYSQL_DATABASE=proddb
      - MYSQL_DSN=monitoring:monitoring123@tcp(mysql-primary:3306)/proddb
      
      # OpenTelemetry settings
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - OTLP_ENDPOINT=${OTLP_ENDPOINT:-https://otlp.nr-data.net:4318}
      - ENVIRONMENT=production
      
      # Collection settings
      - COLLECTION_INTERVAL=30s
      - LOG_LEVEL=info
      - INSTANCE_ROLE=primary
      - COLLECTOR_ID=primary-001
      
      # Custom processor settings
      - ADAPTIVE_SAMPLING_ENABLED=true
      - CIRCUIT_BREAKER_ENABLED=true
      - VERIFICATION_ENABLED=true
    
    ports:
      - "13133:13133"  # Health check
      - "8888:8888"    # Internal metrics
      - "8889:8889"    # Prometheus metrics
      - "55679:55679"  # zPages
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    depends_on:
      postgres-primary:
        condition: service_healthy
      mysql-primary:
        condition: service_healthy
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Secondary OpenTelemetry Collector (HA)
  otel-collector-secondary:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: db-intel-collector-secondary
    hostname: db-intel-collector-secondary
    
    volumes:
      - ./configs/collector-production.yaml:/etc/otelcol-contrib/config.yaml:ro
      - collector-storage-secondary:/var/lib/otel/storage
      - collector-logs:/var/log
      
    environment:
      # Same as primary but different instance role
      - POSTGRES_HOST=postgres-primary
      - POSTGRES_PORT=5432
      - POSTGRES_USER=monitoring
      - POSTGRES_PASSWORD=monitoring123
      - POSTGRES_DB=proddb
      - POSTGRES_DSN=postgres://monitoring:monitoring123@postgres-primary:5432/proddb?sslmode=disable
      
      - MYSQL_HOST=mysql-primary
      - MYSQL_PORT=3306
      - MYSQL_USER=monitoring
      - MYSQL_PASSWORD=monitoring123
      - MYSQL_DATABASE=proddb
      - MYSQL_DSN=monitoring:monitoring123@tcp(mysql-primary:3306)/proddb
      
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - OTLP_ENDPOINT=${OTLP_ENDPOINT:-https://otlp.nr-data.net:4318}
      - ENVIRONMENT=production
      - COLLECTION_INTERVAL=30s
      - LOG_LEVEL=info
      - INSTANCE_ROLE=secondary
      - COLLECTOR_ID=secondary-001
      
      - ADAPTIVE_SAMPLING_ENABLED=true
      - CIRCUIT_BREAKER_ENABLED=true
      - VERIFICATION_ENABLED=true
    
    ports:
      - "13134:13133"  # Health check (different port)
      - "8890:8888"    # Internal metrics
      - "8891:8889"    # Prometheus metrics
      - "55680:55679"  # zPages
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    depends_on:
      postgres-primary:
        condition: service_healthy
      mysql-primary:
        condition: service_healthy
    
    profiles: ["ha"]  # Start with HA profile
    restart: unless-stopped

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15
    container_name: db-intel-postgres-primary
    hostname: postgres-primary
    
    environment:
      - POSTGRES_DB=proddb
      - POSTGRES_USER=produser
      - POSTGRES_PASSWORD=prodpass123
      - POSTGRES_INITDB_ARGS=--auth-host=md5
      
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./init-scripts/postgres-production-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./init-scripts/postgres-monitoring-setup.sql:/docker-entrypoint-initdb.d/02-monitoring.sql:ro
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - postgres-logs:/var/log/postgresql
    
    ports:
      - "5432:5432"
    
    command: |
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements,auto_explain
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c track_activity_query_size=4096
      -c log_statement=none
      -c log_min_duration_statement=100
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_destination=stderr,csvlog
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB
      -c track_io_timing=on
      -c track_functions=all
      -c auto_explain.log_min_duration=1000
      -c auto_explain.log_analyze=on
      -c auto_explain.log_buffers=on
      -c auto_explain.log_verbose=on
      -c auto_explain.log_nested_statements=on
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U produser -d proddb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    restart: unless-stopped

  # MySQL Primary Database
  mysql-primary:
    image: mysql:8.0
    container_name: db-intel-mysql-primary
    hostname: mysql-primary
    
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass123
      - MYSQL_DATABASE=proddb
      - MYSQL_USER=produser
      - MYSQL_PASSWORD=prodpass123
      
    volumes:
      - mysql-primary-data:/var/lib/mysql
      - ./init-scripts/mysql-production-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./init-scripts/mysql-monitoring-setup.sql:/docker-entrypoint-initdb.d/02-monitoring.sql:ro
      - ./configs/mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
      - mysql-logs:/var/log/mysql
    
    ports:
      - "3306:3306"
    
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "produser", "-pprodpass123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    restart: unless-stopped

  # Prometheus for metrics collection and alerting
  prometheus:
    image: prom/prometheus:latest
    container_name: db-intel-prometheus
    hostname: prometheus
    
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus-data:/prometheus
    
    ports:
      - "9090:9090"
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    depends_on:
      - otel-collector-primary
    
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: db-intel-grafana
    hostname: grafana
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./configs/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    
    ports:
      - "3000:3000"
    
    depends_on:
      - prometheus
    
    restart: unless-stopped

  # Load balancer for HA collector setup
  nginx:
    image: nginx:alpine
    container_name: db-intel-nginx
    hostname: nginx
    
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
    
    ports:
      - "80:80"
      - "8080:8080"  # Collector metrics endpoint
    
    depends_on:
      - otel-collector-primary
    
    restart: unless-stopped

  # Health monitor for failover
  health-monitor:
    image: alpine:latest
    container_name: db-intel-health-monitor
    
    volumes:
      - ./scripts/health-monitor.sh:/health-monitor.sh:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    environment:
      - PRIMARY_URL=http://otel-collector-primary:13133
      - SECONDARY_URL=http://otel-collector-secondary:13133
      - CHECK_INTERVAL=30
      - FAILOVER_THRESHOLD=3
    
    command: sh /health-monitor.sh
    
    depends_on:
      - otel-collector-primary
    
    restart: unless-stopped

  # Log aggregator (optional)
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: db-intel-fluent-bit
    
    volumes:
      - ./configs/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - collector-logs:/var/log/collector:ro
      - postgres-logs:/var/log/postgresql:ro
      - mysql-logs:/var/log/mysql:ro
    
    depends_on:
      - otel-collector-primary
    
    profiles: ["logging"]
    restart: unless-stopped

volumes:
  # Collector storage
  collector-storage-primary:
    driver: local
  collector-storage-secondary:
    driver: local
  collector-logs:
    driver: local
  
  # Database storage
  postgres-primary-data:
    driver: local
  postgres-logs:
    driver: local
  mysql-primary-data:
    driver: local
  mysql-logs:
    driver: local
  
  # Monitoring storage
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    name: db-intelligence-production
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16