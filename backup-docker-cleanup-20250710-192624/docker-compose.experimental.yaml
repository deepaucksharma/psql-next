version: '3.8'

# Docker Compose configuration for experimental components
# This runs the custom-built collector with advanced features

services:
  # Build custom collector image
  builder:
    image: golang:1.21-alpine
    working_dir: /workspace
    volumes:
      - ../../:/workspace
      - go-cache:/go/pkg/mod
    command: |
      sh -c "
        apk add --no-cache git make gcc musl-dev
        if ! command -v builder; then
          go install go.opentelemetry.io/collector/cmd/builder@latest
        fi
        builder --config=otelcol-builder.yaml --skip-compilation=false
      "
    profiles:
      - build

  # Experimental collector with custom components
  db-intelligence-experimental:
    build:
      context: ../../dist
      dockerfile: Dockerfile
    image: db-intelligence-custom:latest
    container_name: db-intel-experimental
    hostname: experimental-collector
    restart: unless-stopped
    
    # Use experimental configuration
    command: ["--config", "/etc/otel/collector-experimental.yaml"]
    
    volumes:
      - ../../config/collector-experimental.yaml:/etc/otel/collector-experimental.yaml:ro
      - ../../config/queries:/etc/otel/queries:ro
      - collector-data:/var/lib/otelcol
    
    ports:
      - "13134:13133"  # Health check (different port)
      - "8889:8888"    # Prometheus metrics
      - "55680:55679"  # ZPages
      - "6061:6060"    # pprof
    
    environment:
      # Database connections
      PG_REPLICA_DSN: ${PG_REPLICA_DSN}
      PG_ANALYTICS_DSN: ${PG_ANALYTICS_DSN:-}
      MYSQL_READONLY_DSN: ${MYSQL_READONLY_DSN:-}
      
      # New Relic
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      OTLP_ENDPOINT: ${OTLP_ENDPOINT:-https://otlp.nr-data.net:4317}
      
      # Component configuration
      ENABLE_ASH_SAMPLING: ${ENABLE_ASH_SAMPLING:-true}
      ENABLE_PLAN_COLLECTION: ${ENABLE_PLAN_COLLECTION:-false}
      ADAPTIVE_SAMPLING_ENABLED: ${ADAPTIVE_SAMPLING_ENABLED:-true}
      CIRCUIT_BREAKER_ENABLED: ${CIRCUIT_BREAKER_ENABLED:-true}
      
      # Resource limits
      GOMEMLIMIT: 1500MiB
      GOGC: 80
    
    mem_limit: 2g
    cpus: '1.0'
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    depends_on:
      postgres-test:
        condition: service_healthy
    
    networks:
      - db-intelligence

  # Test PostgreSQL with extensions
  postgres-test:
    image: postgres:15
    container_name: db-intel-postgres-test
    environment:
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: dbpass
      POSTGRES_DB: testdb
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=pg_stat_statements"
    
    volumes:
      - ./init-test-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - postgres-test-data:/var/lib/postgresql/data
    
    ports:
      - "5433:5432"  # Different port for test instance
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - db-intelligence

  # Redis for state management (optional)
  redis:
    image: redis:7-alpine
    container_name: db-intel-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db-intelligence
    profiles:
      - with-state

  # Grafana for monitoring experimental components
  grafana:
    image: grafana/grafana:10.2.0
    container_name: db-intel-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"  # Different port
    networks:
      - db-intelligence
    profiles:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: db-intel-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus-experimental.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"  # Different port
    networks:
      - db-intelligence
    profiles:
      - monitoring

networks:
  db-intelligence:
    driver: bridge

volumes:
  collector-data:
  postgres-test-data:
  redis-data:
  grafana-data:
  prometheus-data:
  go-cache: