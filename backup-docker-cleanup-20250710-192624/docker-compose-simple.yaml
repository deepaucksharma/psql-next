# Database Intelligence MVP - Simple OTEL-First Setup
# Minimal configuration with PostgreSQL and standard OTEL components
# Perfect for development and testing

version: '3.8'

services:
  # OpenTelemetry Collector with OTEL-first approach
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: db-intel-collector-simple
    hostname: db-intel-collector
    
    # Mount configuration files
    volumes:
      - ./configs/collector-simple.yaml:/etc/otelcol-contrib/config.yaml:ro
      - collector-logs:/var/log
    
    # Environment variables for database connection
    environment:
      # Database connection settings
      - POSTGRES_HOST=postgres-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=monitoring
      - POSTGRES_PASSWORD=monitoring123
      - POSTGRES_DB=testdb
      - POSTGRES_DSN=postgres://monitoring:monitoring123@postgres-db:5432/testdb?sslmode=disable
      
      # OpenTelemetry settings  
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - OTLP_ENDPOINT=${OTLP_ENDPOINT:-https://otlp.nr-data.net:4318}
      - ENVIRONMENT=development
      
      # Collection settings
      - COLLECTION_INTERVAL=30s
      - LOG_LEVEL=info
    
    # Expose monitoring ports
    ports:
      - "13133:13133"  # Health check endpoint
      - "8888:8888"    # Prometheus metrics
      - "8889:8889"    # Custom metrics endpoint
      - "55679:55679"  # zPages for debugging
    
    # Health check using standard OTEL health check extension
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
    # Resource limits to prevent resource exhaustion
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Wait for database to be ready
    depends_on:
      postgres-db:
        condition: service_healthy
    
    restart: unless-stopped
    
    # Structured logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "2"

  # PostgreSQL database for testing
  postgres-db:
    image: postgres:15
    container_name: db-intel-postgres-simple
    hostname: postgres-db
    
    # Database configuration
    environment:
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpass
      
    # Enable monitoring user with limited privileges
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres-simple-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./init-scripts/postgres-monitoring-setup.sql:/docker-entrypoint-initdb.d/02-monitoring.sql:ro
    
    # Expose PostgreSQL port
    ports:
      - "5432:5432"
    
    # PostgreSQL configuration for monitoring
    command: |
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c track_activity_query_size=2048
      -c log_statement=none
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_destination=stderr
      -c logging_collector=off
      -c track_io_timing=on
      -c track_functions=all
    
    # Health check for PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    
    restart: unless-stopped

  # Simple load generator for testing
  load-generator:
    image: postgres:15
    container_name: db-intel-load-generator
    
    # Generate some test queries
    command: |
      bash -c '
        echo "Waiting for database to be ready..."
        sleep 30
        
        echo "Starting load generation..."
        while true; do
          # Simple queries to generate metrics
          psql -h postgres-db -U testuser -d testdb -c "SELECT COUNT(*) FROM test_table;" || true
          psql -h postgres-db -U testuser -d testdb -c "SELECT * FROM test_table WHERE id = $$((RANDOM() % 1000 + 1));" || true
          psql -h postgres-db -U testuser -d testdb -c "INSERT INTO test_table (name, value) VALUES ('"'"'test'"'"', RANDOM());" || true
          
          # Wait between queries
          sleep 5
        done
      '
    
    environment:
      - PGPASSWORD=testpass
    
    depends_on:
      postgres-db:
        condition: service_healthy
    
    profiles: ["load-test"]  # Optional service for load testing
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  collector-logs:
    driver: local

networks:
  default:
    name: db-intelligence-simple
    driver: bridge