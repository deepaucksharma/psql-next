# Replication Monitor - Consolidated Configuration
# Comprehensive MySQL replication monitoring with master/slave and GTID support

receivers:
  # Primary MySQL instance monitoring
  mysql/primary:
    endpoint: ${env:MYSQL_PRIMARY_ENDPOINT:-mysql-primary:3306}
    username: ${env:MYSQL_USER}
    password: ${env:MYSQL_PASSWORD}
    collection_interval: 10s
    transport: tcp

  # Replica MySQL instance monitoring  
  mysql/replica:
    endpoint: ${env:MYSQL_REPLICA_ENDPOINT:-mysql-replica:3306}
    username: ${env:MYSQL_USER}
    password: ${env:MYSQL_PASSWORD}
    collection_interval: 10s
    transport: tcp

  # Replication status from primary
  sqlquery/primary_status:
    driver: mysql
    datasource: "${env:MYSQL_USER}:${env:MYSQL_PASSWORD}@tcp(${env:MYSQL_PRIMARY_ENDPOINT})/information_schema"
    collection_interval: 10s
    queries:
      # Master status
      - sql: |
          SHOW MASTER STATUS
        metrics:
          - metric_name: mysql.replication.master.log_position
            value_column: "Position"
            attribute_columns: ["File", "Binlog_Do_DB", "Binlog_Ignore_DB", "Executed_Gtid_Set"]
      
      # Connected slaves
      - sql: |
          SELECT 
            COUNT(*) as slave_count,
            GROUP_CONCAT(HOST) as slave_hosts
          FROM information_schema.PROCESSLIST 
          WHERE COMMAND = 'Binlog Dump' OR COMMAND = 'Binlog Dump GTID'
        metrics:
          - metric_name: mysql.replication.master.connected_slaves
            value_column: "slave_count"
            attribute_columns: ["slave_hosts"]

  # Replication status from replica
  sqlquery/replica_status:
    driver: mysql
    datasource: "${env:MYSQL_USER}:${env:MYSQL_PASSWORD}@tcp(${env:MYSQL_REPLICA_ENDPOINT})/information_schema"
    collection_interval: 5s
    queries:
      # Slave status - convert to numeric values
      - sql: |
          SELECT 
            CASE WHEN Slave_IO_Running = 'Yes' THEN 1 ELSE 0 END as io_running,
            CASE WHEN Slave_SQL_Running = 'Yes' THEN 1 ELSE 0 END as sql_running,
            IFNULL(Seconds_Behind_Master, -1) as lag_seconds,
            Master_Host,
            Master_Port,
            Master_Log_File,
            Read_Master_Log_Pos,
            Relay_Log_File,
            Relay_Log_Pos,
            Exec_Master_Log_Pos,
            Last_Errno,
            Last_Error,
            Retrieved_Gtid_Set,
            Executed_Gtid_Set,
            Auto_Position
          FROM performance_schema.replication_connection_status s
          JOIN performance_schema.replication_applier_status a
          WHERE 1=1
        metrics:
          - metric_name: mysql.replication.slave.io_running
            value_column: "io_running"
            attribute_columns: ["Master_Host", "Master_Port"]
          - metric_name: mysql.replication.slave.sql_running  
            value_column: "sql_running"
            attribute_columns: ["Master_Host", "Master_Port"]
          - metric_name: mysql.replication.slave.lag_seconds
            value_column: "lag_seconds"
            attribute_columns: ["Master_Host", "Master_Port", "Master_Log_File"]
          - metric_name: mysql.replication.slave.master_log_pos
            value_column: "Read_Master_Log_Pos"
            attribute_columns: ["Master_Log_File"]
          - metric_name: mysql.replication.slave.exec_master_log_pos
            value_column: "Exec_Master_Log_Pos"
            attribute_columns: ["Master_Log_File"]
          - metric_name: mysql.replication.slave.error_number
            value_column: "Last_Errno"
            attribute_columns: ["Last_Error"]

      # Performance schema replication tables
      - sql: |
          SELECT 
            CHANNEL_NAME,
            SOURCE_UUID,
            THREAD_ID,
            SERVICE_STATE,
            RECEIVED_TRANSACTION_SET,
            LAST_ERROR_NUMBER,
            LAST_ERROR_MESSAGE,
            LAST_ERROR_TIMESTAMP,
            LAST_QUEUED_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP,
            LAST_QUEUED_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP,
            QUEUEING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP,
            QUEUEING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP
          FROM performance_schema.replication_connection_status
        metrics:
          - metric_name: mysql.replication.connection.state
            value_column: "SERVICE_STATE"
            value_type: string
            attribute_columns: ["CHANNEL_NAME", "SOURCE_UUID", "THREAD_ID"]
          - metric_name: mysql.replication.connection.error
            value_column: "LAST_ERROR_NUMBER"
            attribute_columns: ["CHANNEL_NAME", "LAST_ERROR_MESSAGE"]

      # Applier status
      - sql: |
          SELECT 
            CHANNEL_NAME,
            SERVICE_STATE,
            REMAINING_DELAY,
            COUNT_TRANSACTIONS_RETRIES
          FROM performance_schema.replication_applier_status
        metrics:
          - metric_name: mysql.replication.applier.state
            value_column: "SERVICE_STATE"
            value_type: string
            attribute_columns: ["CHANNEL_NAME"]
          - metric_name: mysql.replication.applier.remaining_delay
            value_column: "REMAINING_DELAY"
            attribute_columns: ["CHANNEL_NAME"]
          - metric_name: mysql.replication.applier.transaction_retries
            value_column: "COUNT_TRANSACTIONS_RETRIES"
            attribute_columns: ["CHANNEL_NAME"]

      # Worker status
      - sql: |
          SELECT 
            CHANNEL_NAME,
            WORKER_ID,
            THREAD_ID,
            SERVICE_STATE,
            LAST_ERROR_NUMBER,
            LAST_ERROR_MESSAGE,
            APPLYING_TRANSACTION_ORIGINAL_COMMIT_TIMESTAMP,
            APPLYING_TRANSACTION_IMMEDIATE_COMMIT_TIMESTAMP
          FROM performance_schema.replication_applier_status_by_worker
        metrics:
          - metric_name: mysql.replication.worker.state
            value_column: "SERVICE_STATE"
            value_type: string
            attribute_columns: ["CHANNEL_NAME", "WORKER_ID", "THREAD_ID"]
          - metric_name: mysql.replication.worker.error
            value_column: "LAST_ERROR_NUMBER"
            attribute_columns: ["CHANNEL_NAME", "WORKER_ID", "LAST_ERROR_MESSAGE"]

  # GTID monitoring
  sqlquery/gtid_status:
    driver: mysql
    datasource: "${env:MYSQL_USER}:${env:MYSQL_PASSWORD}@tcp(${env:MYSQL_REPLICA_ENDPOINT})/information_schema"
    collection_interval: 30s
    queries:
      - sql: |
          SELECT 
            @@gtid_mode as gtid_mode,
            CASE 
              WHEN @@gtid_mode = 'ON' THEN 1 
              WHEN @@gtid_mode = 'ON_PERMISSIVE' THEN 2
              WHEN @@gtid_mode = 'OFF_PERMISSIVE' THEN 3
              ELSE 0 
            END as gtid_mode_numeric,
            @@gtid_executed as executed_gtid_set,
            @@gtid_purged as purged_gtid_set,
            @@enforce_gtid_consistency as enforce_gtid_consistency
        metrics:
          - metric_name: mysql.replication.gtid.mode
            value_column: "gtid_mode_numeric"
            attribute_columns: ["gtid_mode"]
          - metric_name: mysql.replication.gtid.consistency_enforced
            value_column: "enforce_gtid_consistency"
            value_type: string

  # Prometheus federation
  prometheus/core_metrics:
    config:
      scrape_configs:
        - job_name: 'core-metrics-federation'
          scrape_interval: 30s
          static_configs:
            - targets: ['${env:CORE_METRICS_ENDPOINT:-core-metrics:8081}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: 'mysql_.*'
              action: keep

  # OTLP receiver
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Memory management - always first
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 30

  batch:
    timeout: 10s
    send_batch_size: 1000
    send_batch_max_size: 1500

  # Core attributes
  attributes:
    actions:
      - key: module
        value: replication-monitor
        action: insert
      - key: cluster.name
        value: ${env:CLUSTER_NAME}
        action: insert
      - key: environment
        value: ${env:ENVIRONMENT}
        action: insert
      - key: tier
        value: monitoring
        action: insert
      - key: db.system
        value: mysql
        action: insert

  resource:
    attributes:
      - key: service.name
        value: replication-monitor
        action: upsert
      - key: service.version
        value: "2.0.0"
        action: upsert
      - key: deployment.environment
        value: ${env:ENVIRONMENT}
        action: upsert

  # Transform processor for replication analysis
  transform/replication_analysis:
    error_mode: ignore
    metric_statements:
      - context: metric
        statements:
          # Add replication health status
          - set(attributes["replication_healthy"], "true") where name == "mysql.replication.slave.io_running" and value == 1
          - set(attributes["replication_healthy"], "false") where name == "mysql.replication.slave.io_running" and value == 0
          - set(attributes["replication_healthy"], "true") where name == "mysql.replication.slave.sql_running" and value == 1
          - set(attributes["replication_healthy"], "false") where name == "mysql.replication.slave.sql_running" and value == 0
          
          # Lag severity classification
          - set(attributes["lag_severity"], "critical") where name == "mysql.replication.slave.lag_seconds" and value > 300
          - set(attributes["lag_severity"], "high") where name == "mysql.replication.slave.lag_seconds" and value > 60 and value <= 300
          - set(attributes["lag_severity"], "medium") where name == "mysql.replication.slave.lag_seconds" and value > 10 and value <= 60
          - set(attributes["lag_severity"], "low") where name == "mysql.replication.slave.lag_seconds" and value > 1 and value <= 10
          - set(attributes["lag_severity"], "none") where name == "mysql.replication.slave.lag_seconds" and value <= 1
          
          # Alert on replication errors
          - set(attributes["has_error"], "true") where name == "mysql.replication.slave.error_number" and value > 0

  # New Relic attributes
  attributes/newrelic:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-replication-monitor
        action: insert
      - key: instrumentation.version
        value: "2.0.0"
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert

  # Entity synthesis
  attributes/entity_synthesis:
    actions:
      - key: entity.type
        value: "MYSQL_REPLICATION"
        action: insert
      - key: entity.guid
        value: "MYSQL_REPLICATION|${env:CLUSTER_NAME}|${env:MYSQL_PRIMARY_ENDPOINT}"
        action: insert
      - key: entity.name
        value: "${env:CLUSTER_NAME}-replication"
        action: insert
      - key: newrelic.entity.synthesis
        value: "true"
        action: insert

exporters:
  # Primary New Relic OTLP exporter
  otlphttp/newrelic:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 5
      queue_size: 10000

  # Prometheus exporter for federation
  prometheus:
    endpoint: 0.0.0.0:8086
    namespace: mysql
    resource_to_telemetry_conversion:
      enabled: true
    metric_expiration: 5m
    const_labels:
      module: replication-monitor

  # Debug exporter
  debug:
    verbosity: basic
    sampling_initial: 10
    sampling_thereafter: 100

service:
  pipelines:
    # Single comprehensive pipeline
    metrics:
      receivers: [
        mysql/primary,
        mysql/replica,
        sqlquery/primary_status,
        sqlquery/replica_status,
        sqlquery/gtid_status,
        prometheus/core_metrics,
        otlp
      ]
      processors: [
        memory_limiter,
        batch,
        attributes,
        resource,
        transform/replication_analysis,
        attributes/newrelic,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic, prometheus, debug]

  # WARNING: DO NOT ADD health_check to extensions list!
  # Health checks are validation-only, not production features.
  extensions: [zpages, pprof]  # NO health_check here!

  telemetry:
    logs:
      level: info
      output_paths: ["/tmp/logs/collector.log"]

extensions:
  # WARNING: DO NOT ADD health_check extension here!
  # Health checks have been intentionally removed from production code.
  # Use shared/validation/health-check-all.sh for validation purposes.
  # See shared/validation/README-health-check.md for details.

  zpages:
    endpoint: 0.0.0.0:55679
    
  pprof:
    endpoint: 0.0.0.0:6060