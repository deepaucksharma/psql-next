# Resource Monitor - Consolidated Configuration
# Comprehensive system resource monitoring with circuit breaker pattern
# WARNING: Health checks intentionally removed - use shared/validation/health-check-all.sh

receivers:
  # Host metrics receiver for comprehensive system resource monitoring
  hostmetrics:
    collection_interval: 10s
    scrapers:
      # CPU metrics
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      
      # Memory metrics
      memory:
        metrics:
          system.memory.usage:
            enabled: true
          system.memory.utilization:
            enabled: true
      
      # Disk I/O metrics
      disk:
        metrics:
          system.disk.io:
            enabled: true
          system.disk.operations:
            enabled: true
          system.disk.io_time:
            enabled: true
          system.disk.operation_time:
            enabled: true
      
      # Filesystem metrics
      filesystem:
        metrics:
          system.filesystem.usage:
            enabled: true
          system.filesystem.utilization:
            enabled: true
      
      # Network metrics
      network:
        metrics:
          system.network.io:
            enabled: true
          system.network.packets:
            enabled: true
          system.network.errors:
            enabled: true
          system.network.dropped:
            enabled: true
          system.network.connections:
            enabled: true
      
      # Process metrics
      process:
        metrics:
          process.cpu.time:
            enabled: true
          process.memory.usage:
            enabled: true
          process.memory.virtual:
            enabled: true
          process.disk.io:
            enabled: true
      
      # Load average
      load:
        metrics:
          system.cpu.load_average.1m:
            enabled: true
          system.cpu.load_average.5m:
            enabled: true
          system.cpu.load_average.15m:
            enabled: true
      
      # Paging metrics
      paging:
        metrics:
          system.paging.usage:
            enabled: true
          system.paging.operations:
            enabled: true
          system.paging.faults:
            enabled: true

  # Process scraper for MySQL-specific metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'mysql_process_metrics'
          scrape_interval: 15s
          static_configs:
            - targets: ['localhost:9104']  # MySQL exporter endpoint if available

  # OTLP receiver for additional metrics
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 30

  # Batch processor for standard metrics
  batch/standard:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Batch processor for critical metrics
  batch/critical:
    timeout: 2s
    send_batch_size: 100
    send_batch_max_size: 500

  # Resource processor to add metadata
  resource/standard:
    attributes:
      - key: service.name
        value: resource-monitor
        action: upsert
      - key: service.version
        value: 2.0.0
        action: upsert
      - key: deployment.environment
        value: ${env:ENVIRONMENT}
        action: upsert

  # Core attributes for resource monitor
  attributes/resource_monitor:
    actions:
      - key: module
        value: resource-monitor
        action: insert
      - key: monitor.type
        value: system-resources
        action: insert
      - key: cluster.name
        value: ${env:CLUSTER_NAME}
        action: insert
      - key: environment
        value: ${env:ENVIRONMENT}
        action: insert
      - key: tier
        value: infrastructure
        action: insert
      - key: host.name
        action: insert
        from_attribute: host.name
      - key: collection.timestamp
        action: insert
        value: ${env:HOSTNAME}

  # Resource monitoring thresholds
  attributes/thresholds:
    actions:
      - key: threshold.cpu.warning
        value: ${env:CPU_THRESHOLD_WARNING:-70}
        action: insert
      - key: threshold.cpu.critical
        value: ${env:CPU_THRESHOLD_CRITICAL:-85}
        action: insert
      - key: threshold.memory.warning
        value: ${env:MEMORY_THRESHOLD_WARNING:-75}
        action: insert
      - key: threshold.memory.critical
        value: ${env:MEMORY_THRESHOLD_CRITICAL:-90}
        action: insert
      - key: threshold.disk.warning
        value: ${env:DISK_THRESHOLD_WARNING:-80}
        action: insert
      - key: threshold.disk.critical
        value: ${env:DISK_THRESHOLD_CRITICAL:-95}
        action: insert

  # Filter processor for MySQL-specific processes
  filter/mysql:
    metrics:
      include:
        match_type: regexp
        expressions:
          - 'process\..*'
        resource_attributes:
          - key: process.name
            value: ".*mysql.*"

  # Filter for critical resource thresholds
  filter/critical:
    error_mode: ignore
    metrics:
      include:
        match_type: regexp
        metric_names:
          - "system\\.cpu\\.utilization"
          - "system\\.memory\\.utilization"
          - "system\\.disk\\.io_time"
          - "system\\.filesystem\\.utilization"

  # New Relic specific attributes for standard pipeline
  attributes/newrelic_standard:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-resource-monitor
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: standard
        action: insert

  # New Relic specific attributes for critical pipeline
  attributes/newrelic_critical:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-resource-monitor
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: critical
        action: insert
      - key: priority
        value: high
        action: insert
      - key: alert.enabled
        value: "true"
        action: insert

  # Entity synthesis for New Relic One
  attributes/entity_synthesis:
    actions:
      - key: entity.type
        value: HOST
        action: insert
      - key: entity.guid
        value: HOST|${env:CLUSTER_NAME}|${env:HOSTNAME}
        action: insert
      - key: entity.name
        value: ${env:HOSTNAME}
        action: insert
      - key: newrelic.entity.synthesis
        value: "true"
        action: insert

exporters:
  # Standard New Relic exporter for all resource metrics
  otlphttp/newrelic_standard:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 60s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 20000

  # Critical New Relic exporter for resource alerts
  otlphttp/newrelic_critical:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: none
    timeout: 10s
    retry_on_failure:
      enabled: true
      initial_interval: 2s
      max_interval: 20s
      max_elapsed_time: 120s
    sending_queue:
      enabled: true
      num_consumers: 5
      queue_size: 10000

  # Prometheus exporter for local monitoring
  prometheus:
    endpoint: "0.0.0.0:${env:EXPORT_PORT:-8088}"
    namespace: resource_monitor
    const_labels:
      module: resource-monitor
      cluster: ${env:CLUSTER_NAME}

  # Debug exporter for development
  debug:
    verbosity: basic
    sampling_initial: 5
    sampling_thereafter: 200

  # File exporter for persistent storage
  file/resource_metrics:
    path: /tmp/resource-metrics/metrics.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 10
    format: json

  # OTLP for forwarding to other systems
  otlp:
    endpoint: ${env:OTLP_ENDPOINT:-localhost:4317}
    tls:
      insecure: true

extensions:
  # WARNING: DO NOT ADD health_check extension here!
  # Health checks have been intentionally removed from production code.
  # Use shared/validation/health-check-all.sh for validation purposes.
  # See shared/validation/README-health-check.md for details.

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # Z-pages for debugging
  zpages:
    endpoint: 0.0.0.0:55679

service:
  # WARNING: DO NOT ADD health_check to extensions list!
  # Health checks are validation-only, not production features.
  extensions: [pprof, zpages]  # NO health_check here!
  
  pipelines:
    # Main metrics pipeline for all system resources
    metrics/system:
      receivers: [hostmetrics, otlp]
      processors: [
        memory_limiter,
        batch/standard,
        attributes/resource_monitor,
        attributes/thresholds,
        resource/standard,
        attributes/newrelic_standard,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_standard, prometheus, file/resource_metrics]
    
    # MySQL-specific metrics pipeline
    metrics/mysql:
      receivers: [hostmetrics, prometheus]
      processors: [
        memory_limiter,
        filter/mysql,
        batch/standard,
        attributes/resource_monitor,
        resource/standard,
        attributes/newrelic_standard,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_standard, otlp]
    
    # Critical resource metrics (CPU/Memory pressure)
    metrics/critical:
      receivers: [hostmetrics]
      processors: [
        memory_limiter,
        filter/critical,
        batch/critical,
        attributes/resource_monitor,
        attributes/thresholds,
        resource/standard,
        attributes/newrelic_critical,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_critical]
    
    # Debug pipeline for troubleshooting
    metrics/debug:
      receivers: [hostmetrics]
      processors: [memory_limiter, batch/standard]
      exporters: [debug]

  telemetry:
    logs:
      level: info
      output_paths: ["stdout"]