receivers:
  # OTLP receiver for receiving alerts from other modules
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:8089
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - "*"
          allowed_headers:
            - "*"
  
  # Prometheus federation receiver to pull metrics from other modules
  prometheus:
    config:
      scrape_configs:
        - job_name: 'anomaly-detector-federation'
          scrape_interval: 10s
          static_configs:
            - targets: ['${env:ANOMALY_DETECTOR_ENDPOINT}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '(anomaly_alert|anomaly_score_.*|anomaly_detected)'
              action: keep
              
        - job_name: 'core-metrics-federation'
          scrape_interval: 30s
          static_configs:
            - targets: ['${env:CORE_METRICS_ENDPOINT}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: 'mysql_(connections_current|threads_running|cpu_percent|memory_.*|disk_.*|errors_total)'
              action: keep
              
        - job_name: 'performance-advisor-federation'
          scrape_interval: 30s
          static_configs:
            - targets: ['${env:PERFORMANCE_ADVISOR_ENDPOINT}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: 'db\.performance\.recommendation\..*'
              action: keep

processors:
  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Batch processor for efficiency
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Group by attributes for alert aggregation
  groupbyattrs:
    keys:
      - service.name
      - alert.severity
      - alert.type
      - db.system
      - db.name

  # Transform processor for alert enrichment
  transform:
    error_mode: ignore
    metric_statements:
      - context: datapoint
        statements:
          # Add timestamp if not present
          - set(attributes["alert.timestamp"], Now()) where attributes["alert.timestamp"] == nil
          # Set default severity if not present
          - set(attributes["alert.severity"], "warning") where attributes["alert.severity"] == nil
          # Add alert state
          - set(attributes["alert.state"], "active") where attributes["alert.state"] == nil

  # Filter processor to deduplicate alerts
  filter:
    error_mode: ignore
    metrics:
      # Keep only alerts with proper structure
      include:
        match_type: regexp
        metric_names:
          - "^alert\\..*"
          - "^db\\.alert\\..*"
          - "^anomaly\\.detected"
          - "^threshold\\.exceeded"

  # Attributes processor for alert metadata
  attributes:
    actions:
      - key: alert.manager.version
        value: "1.0.0"
        action: insert
      - key: alert.processed_at
        value: $HOSTNAME
        action: insert
      - key: environment
        from_attribute: deployment.environment
        action: insert

  # Resource processor for consistent labeling
  resource:
    attributes:
      - key: service.name
        value: alert-manager
        action: insert
      - key: service.version
        value: "1.0.0"
        action: insert

exporters:
  # Webhook exporter for external notifications
  webhook:
    endpoint: ${env:WEBHOOK_ENDPOINT}
    format: json
    timeout: 10s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
    headers:
      Content-Type: application/json
      X-Alert-Source: database-intelligence

  # File exporter for alert logging
  file:
    path: ${env:ALERT_FILE_PATH}
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 3
      localtime: true
    format: json

  # Prometheus exporter for alert metrics
  prometheus:
    endpoint: 0.0.0.0:9091
    namespace: alert_manager
    const_labels:
      service: alert_manager
    metric_expiration: 5m
    enable_open_metrics: true
    resource_to_telemetry_conversion:
      enabled: true

  # Debug exporter for troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 20

  # OTLP exporter for forwarding to upstream collectors
  otlp/upstream:
    endpoint: ${env:UPSTREAM_OTLP_ENDPOINT:-localhost:4317}
    tls:
      insecure: true
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s

extensions:
  # WARNING: DO NOT ADD health_check extension here!
  # Health checks have been intentionally removed from production code.
  # Use shared/validation/health-check-all.sh for validation purposes.
  # See shared/validation/README-health-check.md for details.
  
  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777
    block_profile_fraction: 3
    mutex_profile_fraction: 5

  # Memory ballast for stable memory usage
  memory_ballast:
    size_mib: 128

service:
  # WARNING: DO NOT ADD health_check to extensions list!
  # Health checks are validation-only, not production features.
  extensions: [pprof, memory_ballast]  # NO health_check here!
  
  pipelines:
    # Main alert processing pipeline - receives alerts via OTLP
    metrics/alerts:
      receivers: [otlp]
      processors:
        - memory_limiter
        - filter
        - transform
        - groupbyattrs
        - attributes
        - resource
        - batch
      exporters: [webhook, file, prometheus, otlp/upstream]
    
    # Federation pipeline - pulls metrics from other modules
    metrics/federation:
      receivers: [prometheus]
      processors:
        - memory_limiter
        - filter
        - transform
        - groupbyattrs
        - attributes
        - resource
        - batch
      exporters: [webhook, file, prometheus]
    
    # Debug pipeline for troubleshooting
    metrics/debug:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch]
      exporters: [debug]
  
  telemetry:
    logs:
      level: ${env:OTEL_LOG_LEVEL:-info}
      initial_fields:
        service: alert-manager
