receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # MySQL receiver for database metrics
  mysql:
    endpoint: canary-mysql:3306
    username: root
    password: rootpassword
    database: test
    collection_interval: 30s

  # Prometheus receiver for canary metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'canary-tester'
          scrape_interval: 15s
          static_configs:
            - targets: ['canary-tester:8090']

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024

  # Add resource attributes
  resource:
    attributes:
      - key: service.name
        value: canary-tester
        action: insert
      - key: service.version
        value: "1.0.0"
        action: insert
      - key: deployment.environment
        value: ${env:ENVIRONMENT}
        action: insert

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Add metric attributes for canary queries
  attributes/canary:
    actions:
      - key: monitoring.type
        value: synthetic
        action: insert
      - key: canary.enabled
        value: "true"
        action: insert
      - key: module
        value: canary-tester
        action: insert

  # New Relic specific attributes
  attributes/newrelic:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-otel-collector
        action: insert
      - key: instrumentation.version
        value: "2.0.0"
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: environment
        value: ${env:ENVIRONMENT}
        action: insert

  # Entity synthesis for New Relic One
  attributes/entity_synthesis:
    actions:
      - key: entity.type
        value: "SYNTHETIC_MONITOR"
        action: insert
      - key: entity.guid
        value: "SYNTHETIC|${env:CLUSTER_NAME}|canary-mysql"
        action: insert
      - key: entity.name
        value: "MySQL Canary Monitor"
        action: insert
      - key: newrelic.entity.synthesis
        value: "true"
        action: insert

exporters:
  # Primary New Relic OTLP exporter for standard metrics
  otlphttp/newrelic_standard:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 5
      queue_size: 10000

  # High-priority exporter for canary alerts
  otlphttp/newrelic_critical:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
      X-Priority: critical
    compression: none  # No compression for lower latency
    timeout: 10s
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 10s
      max_elapsed_time: 60s

  # Console exporter for debugging
  debug:
    verbosity: detailed
    sampling_initial: 10
    sampling_thereafter: 100

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    metrics:
      receivers: [otlp, mysql, prometheus]
      processors: [memory_limiter, batch, resource, attributes/canary, attributes/newrelic, attributes/entity_synthesis]
      exporters: [otlphttp/newrelic_standard, debug]
    
    metrics/alerts:
      receivers: [mysql]
      processors: [memory_limiter, batch, resource, attributes/canary, attributes/newrelic, attributes/entity_synthesis]
      exporters: [otlphttp/newrelic_critical]