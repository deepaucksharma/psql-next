version: '3.8'

services:
  # PostgreSQL Database with monitoring enabled
  postgres:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    container_name: dbintel-postgres-nr
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Enable statement tracking
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=pg_stat_statements"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./logs/postgres:/var/log/postgresql
    command: 
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.track=all"
      - "-c"
      - "logging_collector=on"
      - "-c"
      - "log_directory=/var/log/postgresql"
      - "-c"
      - "log_filename=postgresql-%Y-%m-%d_%H%M%S.log"
      - "-c"
      - "log_rotation_age=1d"
      - "-c"
      - "log_rotation_size=100MB"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dbintel-network

  # OpenTelemetry Collector configured for New Relic
  otel-collector:
    build:
      context: ./database-intelligence-mvp
      dockerfile: Dockerfile
    container_name: dbintel-collector-nr
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - ./config/collector-newrelic.yaml:/etc/otel/config.yaml:ro
      - ./logs/collector:/var/log/otel
    environment:
      # PostgreSQL connection
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DB}
      POSTGRES_TLS_INSECURE: "true"
      
      # New Relic configuration
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_OTLP_ENDPOINT: ${NEW_RELIC_OTLP_ENDPOINT}
      
      # Environment settings
      ENVIRONMENT: ${ENVIRONMENT}
      SERVICE_VERSION: ${SERVICE_VERSION}
      DEPLOYMENT_TYPE: ${DEPLOYMENT_TYPE}
      AWS_REGION: ${AWS_REGION}
      
      # Collection settings
      COLLECTION_INTERVAL: ${COLLECTION_INTERVAL}
      BATCH_SIZE: ${BATCH_SIZE}
      BATCH_TIMEOUT: ${BATCH_TIMEOUT}
      LOG_LEVEL: ${LOG_LEVEL}
      DEBUG_VERBOSITY: ${DEBUG_VERBOSITY}
      
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "13133:13133" # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dbintel-network

  # Load generator for testing
  load-generator:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    container_name: dbintel-load-generator
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./scripts/generate-load.sql:/generate-load.sql:ro
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        sleep 10 &&
        echo 'Starting load generation...' &&
        while true; do
          psql -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /generate-load.sql || true
          sleep 5
        done
      "
    networks:
      - dbintel-network

volumes:
  postgres_data:
  
networks:
  dbintel-network:
    driver: bridge
