# Production Environment Values
# This file overrides the default values.yaml for production environments

# Use standard mode for stability
config:
  mode: standard
  service:
    telemetry:
      logs:
        level: warn
      metrics:
        level: detailed
  
  # Production receiver configuration
  receivers:
    postgresql:
      enabled: true
      collection_interval: 120s
      endpoint: "${env:POSTGRES_HOST}:${env:POSTGRES_PORT}"
      databases:
        - "${env:POSTGRES_DB}"
      tls:
        insecure_skip_verify: false
        ca_file: /etc/ssl/certs/postgres-ca.crt
    mysql:
      enabled: true
      collection_interval: 120s
      endpoint: "${env:MYSQL_HOST}:${env:MYSQL_PORT}"
      databases:
        - "${env:MYSQL_DB}"
      tls:
        mode: required
    sqlquery:
      enabled: true
      collection_interval: 300s
      driver: postgres
      datasource: "${env:POSTGRES_CONNECTION_STRING}"
      queries:
        - query: |
            SELECT 
              query,
              calls,
              mean_exec_time,
              max_exec_time,
              rows
            FROM pg_stat_statements
            WHERE calls > 100
            ORDER BY mean_exec_time DESC
            LIMIT 100
          metrics:
            - metric_name: db.statement.stats
              value_column: mean_exec_time
              attribute_columns: [query, calls, rows]

  # Production processor configuration
  processors:
    memory_limiter:
      check_interval: 1s
      limit_percentage: 65
      spike_limit_percentage: 20
    batch:
      timeout: 5s
      send_batch_size: 2048
      send_batch_max_size: 4096
    resource:
      attributes:
        - key: environment
          value: production
          action: upsert
        - key: region
          value: "${env:AWS_REGION}"
          action: upsert
    attributes:
      actions:
        - key: db.statement
          action: hash
        - key: db.user
          action: delete

  # Production exporters
  exporters:
    otlp:
      endpoint: "${env:NEW_RELIC_OTLP_ENDPOINT}"
      headers:
        api-key: "${env:NEW_RELIC_LICENSE_KEY}"
      compression: gzip
      retry_on_failure:
        enabled: true
        initial_interval: 5s
        max_interval: 30s
        max_elapsed_time: 300s
    prometheus:
      endpoint: "0.0.0.0:8888"
      resource_to_telemetry_conversion:
        enabled: true

# High availability configuration
replicaCount: 3

# Production resources
resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Aggressive autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

# Production-grade persistence
persistence:
  enabled: true
  size: 20Gi
  storageClass: fast-ssd-retain
  accessModes:
    - ReadWriteOnce

# Internal service only
service:
  type: ClusterIP
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"

# Strict network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: production
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: database-intelligence
      ports:
        - protocol: TCP
          port: 8888
        - protocol: TCP
          port: 13133

# Production monitoring
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 60s
    scrapeTimeout: 30s
    metricRelabelings:
      - sourceLabels: [__name__]
        regex: 'go_.*'
        action: drop

# Production environment variables
env:
  - name: ENVIRONMENT
    value: production
  - name: LOG_LEVEL
    value: warn
  - name: GOGC
    value: "80"
  - name: GOMEMLIMIT
    value: "1900MiB"

# Secrets for credentials
envFrom:
  - secretRef:
      name: database-credentials
  - secretRef:
      name: newrelic-credentials

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Security hardening
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true

# Production affinity rules
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - database-intelligence
        topologyKey: kubernetes.io/hostname
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: node-role.kubernetes.io/monitoring
              operator: In
              values:
                - "true"

# Topology spread constraints
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: database-intelligence

# Priority class for critical workload
priorityClassName: high-priority

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0