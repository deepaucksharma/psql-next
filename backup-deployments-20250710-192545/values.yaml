# Default values for database-intelligence collector
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  # Image pull secrets for private registries
  imagePullSecrets: []
  # - name: myregistrykey
  
  # Storage class for persistent volumes
  storageClass: ""
  
  # Node selector for all pods
  nodeSelector: {}
  
  # Tolerations for all pods
  tolerations: []

# Collector deployment settings
replicaCount: 1

image:
  repository: database-intelligence/otelcol-db-intelligence
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations
podAnnotations: {}

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10001
  fsGroup: 10001

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10001

# Service configuration
service:
  type: ClusterIP
  # Health check endpoint
  health:
    port: 13133
    annotations: {}
  # Internal metrics endpoint
  metrics:
    port: 8888
    annotations: {}
  # Prometheus metrics endpoint
  prometheus:
    port: 8889
    annotations: {}
  # OTLP receiver endpoint (if enabled)
  otlp:
    grpc:
      port: 4317
      annotations: {}
    http:
      port: 4318
      annotations: {}

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
  # Custom metrics for scaling
  metrics: []
  # - type: Pods
  #   pods:
  #     metric:
  #       name: collector_queue_size
  #     target:
  #       type: AverageValue
  #       averageValue: "30"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  maxUnavailable: 1

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity: {}
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 100
  #     podAffinityTerm:
  #       labelSelector:
  #         matchExpressions:
  #         - key: app.kubernetes.io/name
  #           operator: In
  #           values:
  #           - database-intelligence
  #       topologyKey: kubernetes.io/hostname

# Volume mounts for the container
volumeMounts:
  - name: config
    mountPath: /etc/otel
    readOnly: true
  - name: state
    mountPath: /var/lib/otel
  - name: tmp
    mountPath: /tmp

# Volumes for the pod
volumes:
  - name: config
    configMap:
      name: '{{ include "database-intelligence.fullname" . }}-config'
  - name: state
    persistentVolumeClaim:
      claimName: '{{ include "database-intelligence.fullname" . }}-state'
  - name: tmp
    emptyDir: {}

# Persistent volume for state storage
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Collector configuration
config:
  # Mode: standard or experimental
  mode: standard
  
  # Receivers configuration
  receivers:
    # PostgreSQL receiver settings
    postgresql:
      enabled: true
      endpoint: "postgres:5432"
      username: monitoring_user
      # Password from secret
      passwordSecret:
        name: db-credentials
        key: postgres-password
      databases: []
      collectionInterval: 60s
      tls:
        insecure: true
        
    # MySQL receiver settings
    mysql:
      enabled: false
      endpoint: "mysql:3306"
      username: monitoring_user
      # Password from secret
      passwordSecret:
        name: db-credentials
        key: mysql-password
      database: ""
      collectionInterval: 60s
      tls:
        insecure: true
        
    # SQL Query receiver for custom queries
    sqlquery:
      enabled: true
      driver: postgres
      collectionInterval: 300s
      queries:
        # Active Session History sampling
        ashSampling:
          enabled: true
          interval: 1s
        # pg_stat_statements collection
        pgStatStatements:
          enabled: true
          interval: 300s
          
  # Processors configuration
  processors:
    # Memory limiter (always enabled)
    memoryLimiter:
      checkInterval: 1s
      limitPercentage: 80
      spikePercentage: 30
      
    # Batch processor (always enabled)
    batch:
      timeout: 10s
      sendBatchSize: 8192
      
    # Resource processor
    resource:
      attributes:
        - key: service.name
          value: database-monitoring
          action: upsert
        - key: service.namespace
          value: '{{ .Release.Namespace }}'
          action: upsert
        - key: deployment.environment
          value: '{{ .Values.environment }}'
          action: insert
          
    # Transform processor for PII sanitization
    transform:
      enabled: true
      errorMode: ignore
      logStatements: []
      metricStatements: []
      
    # Custom processors (experimental mode)
    experimental:
      # Adaptive sampler configuration
      adaptiveSampler:
        enabled: false
        rules:
          - name: slow_queries
            condition: "duration_ms > 1000"
            samplingRate: 1.0
            priority: 100
          - name: error_queries
            condition: "error_count > 0"
            samplingRate: 0.8
            priority: 90
        defaultSamplingRate: 0.1
        stateFile: /var/lib/otel/adaptive_sampler.state
        
      # Circuit breaker configuration
      circuitBreaker:
        enabled: false
        failureThreshold: 5
        timeout: 30s
        halfOpenRequests: 3
        databases: {}
          # postgres:
          #   maxFailures: 10
          #   timeout: 60s
          
      # Plan extractor configuration
      planExtractor:
        enabled: false
        timeout: 5s
        maxPlanSize: 10485760  # 10MB
        cacheSize: 1000
        
      # Verification processor configuration
      verification:
        enabled: false
        qualityChecks:
          - metricBounds
          - dataConsistency
          - schemaValidation
        piiDetection:
          enabled: true
          patterns:
            - email
            - ssn
            - creditCard
        autoTuning:
          enabled: true
          interval: 5m
          
  # Exporters configuration
  exporters:
    # OTLP exporter to New Relic
    otlp:
      enabled: true
      endpoint: "otlp.nr-data.net:4317"
      compression: gzip
      timeout: 30s
      retry:
        enabled: true
        initialInterval: 5s
        maxInterval: 30s
        maxElapsedTime: 300s
      # Headers from secret
      headersSecret:
        name: newrelic-license
        key: license-key
        
    # Prometheus exporter
    prometheus:
      enabled: true
      endpoint: "0.0.0.0:8889"
      namespace: database_intelligence
      
    # Debug exporter (development only)
    debug:
      enabled: false
      verbosity: detailed
      samplingInitial: 5
      samplingThereafter: 20

# Environment
environment: production

# Extra environment variables
extraEnvVars: []
# - name: CUSTOM_VAR
#   value: custom_value

# Extra environment variables from secrets or configmaps
extraEnvFrom: []
# - secretRef:
#     name: my-secret
# - configMapRef:
#     name: my-configmap

# Liveness probe configuration
livenessProbe:
  httpGet:
    path: /
    port: health
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

# Readiness probe configuration
readinessProbe:
  httpGet:
    path: /
    port: health
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

# Monitoring configuration
monitoring:
  # ServiceMonitor for Prometheus Operator
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    honorLabels: true
    metricRelabelings: []
    relabelings: []
    
  # PrometheusRule for alerting
  prometheusRule:
    enabled: false
    labels: {}
    rules: []
    # - alert: CollectorDown
    #   expr: up{job="{{ include "database-intelligence.fullname" . }}"} == 0
    #   for: 5m
    #   labels:
    #     severity: critical
    #   annotations:
    #     summary: "Collector {{ $labels.instance }} is down"
    
  # Grafana dashboards
  grafanaDashboard:
    enabled: false
    labels:
      grafana_dashboard: "1"
    folder: "Database Intelligence"

# Network policies
networkPolicy:
  enabled: false
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8889
  egress:
    - to:
      - namespaceSelector: {}
      ports:
      - protocol: TCP
        port: 5432
      - protocol: TCP
        port: 3306
      - protocol: TCP
        port: 4317

# Test databases (for development/testing)
postgresql:
  enabled: false
  auth:
    postgresPassword: postgres
    database: testdb
    username: monitoring_user
    password: monitoring
  primary:
    initdb:
      scriptsConfigMap: '{{ include "database-intelligence.fullname" . }}-postgres-init'
      
mysql:
  enabled: false
  auth:
    rootPassword: mysql
    database: testdb
    username: monitoring_user
    password: monitoring
  initdbScriptsConfigMap: '{{ include "database-intelligence.fullname" . }}-mysql-init'

# Prometheus subchart configuration
prometheus:
  enabled: false
  alertmanager:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false

# Grafana subchart configuration
grafana:
  enabled: false
  adminPassword: admin
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://{{ .Release.Name }}-prometheus-server
        access: proxy
        isDefault: true
# Ingress configuration
ingress:
  enabled: false
  className: nginx
  annotations: {}
  hosts:
    - host: db-intelligence.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
