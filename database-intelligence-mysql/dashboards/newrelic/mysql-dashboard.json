{
  "name": "MySQL Performance Monitoring - OpenTelemetry",
  "description": "Comprehensive MySQL monitoring dashboard using OpenTelemetry metrics",
  "permissions": "PUBLIC_READ_WRITE",
  "pages": [
    {
      "name": "Overview",
      "description": "High-level MySQL performance metrics",
      "widgets": [
        {
          "title": "Connection Utilization by Instance",
          "configuration": {
            "billboard": {
              "nrqlQueries": [{
                "query": "SELECT latest(mysql.threads) as 'Current Connections', latest(mysql.connection.max) as 'Max Connections', (latest(mysql.threads) / latest(mysql.connection.max)) * 100 as 'Utilization %' FROM Metric WHERE instrumentation.provider = 'opentelemetry' AND mysql.threads IS NOT NULL FACET mysql.instance.endpoint, mysql.instance.role SINCE 30 minutes ago",
                "accountId": 0
              }],
              "thresholds": [
                {"value": 80, "alertSeverity": "WARNING"},
                {"value": 90, "alertSeverity": "CRITICAL"}
              ]
            }
          }
        },
        {
          "title": "Query Performance Metrics",
          "configuration": {
            "area": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.query.count), 1 minute) as 'Total QPS', rate(sum(mysql.query.slow.count), 1 minute) as 'Slow QPS', rate(sum(mysql.query.client.count), 1 minute) as 'Client QPS' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.role TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Buffer Pool Hit Rate",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT (1 - (rate(sum(mysql.buffer_pool.operations), 1 minute) WHERE buffer_pool.operations = 'reads') / (rate(sum(mysql.buffer_pool.operations), 1 minute) WHERE buffer_pool.operations = 'read_requests')) * 100 as 'Hit Rate %' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }],
              "yAxisLeft": {"min": 0, "max": 100}
            }
          }
        },
        {
          "title": "MySQL Uptime",
          "configuration": {
            "billboard": {
              "nrqlQueries": [{
                "query": "SELECT latest(mysql.uptime) / 86400 as 'Days' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint, mysql.instance.role SINCE 5 minutes ago",
                "accountId": 0
              }]
            }
          }
        }
      ]
    },
    {
      "name": "Query Analysis",
      "description": "Deep dive into query performance",
      "widgets": [
        {
          "title": "Command Breakdown",
          "configuration": {
            "pie": {
              "nrqlQueries": [{
                "query": "SELECT sum(mysql.commands) FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET command SINCE 1 hour ago",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Slow Query Trend",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.query.slow.count), 1 minute) as 'Slow Queries/min' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Statement Events by Schema",
          "configuration": {
            "bar": {
              "nrqlQueries": [{
                "query": "SELECT sum(mysql.statement_event.count) as 'Statement Count' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET db.schema LIMIT 20 SINCE 1 hour ago",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Query Response Time",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT average(mysql.statement_event.wait.time) as 'Avg Wait Time (ms)' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        }
      ]
    },
    {
      "name": "InnoDB Metrics",
      "description": "InnoDB storage engine performance",
      "widgets": [
        {
          "title": "Buffer Pool Usage",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT latest(mysql.buffer_pool.usage) / 1024 / 1024 as 'Used (MB)', latest(mysql.buffer_pool.limit) / 1024 / 1024 as 'Total (MB)' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "InnoDB Row Operations",
          "configuration": {
            "area": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.innodb.row_operations), 1 minute) as 'Operations/min' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET row_operations TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Row Lock Metrics",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.innodb.row_lock_waits), 1 minute) as 'Lock Waits/min', average(mysql.innodb.row_lock_time) as 'Avg Lock Time (ms)' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Page Operations",
          "configuration": {
            "area": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.innodb.pages_created), 1 minute) as 'Pages Created/min', rate(sum(mysql.innodb.pages_read), 1 minute) as 'Pages Read/min', rate(sum(mysql.innodb.pages_written), 1 minute) as 'Pages Written/min' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        }
      ]
    },
    {
      "name": "Table & Index I/O",
      "description": "Table and index level performance metrics",
      "widgets": [
        {
          "title": "Top Tables by I/O Wait Time",
          "configuration": {
            "bar": {
              "nrqlQueries": [{
                "query": "SELECT sum(mysql.table.io.wait.time) as 'Total Wait Time (ms)' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET table, schema LIMIT 20 SINCE 1 hour ago",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Top Indexes by I/O Wait Count",
          "configuration": {
            "bar": {
              "nrqlQueries": [{
                "query": "SELECT sum(mysql.index.io.wait.count) as 'Total Wait Count' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET index, table LIMIT 20 SINCE 1 hour ago",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Table Lock Wait Time",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT average(mysql.table.lock_wait.time) as 'Avg Lock Wait Time (ms)' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET table TIMESERIES AUTO LIMIT 10",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Table I/O Operations",
          "configuration": {
            "area": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.table.io.wait.count), 1 minute) as 'I/O Operations/min' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET io.operation TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        }
      ]
    },
    {
      "name": "Replication",
      "description": "MySQL replication monitoring",
      "widgets": [
        {
          "title": "Replication Lag",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT latest(mysql.replica.time_behind_source) as 'Lag (seconds)' FROM Metric WHERE instrumentation.provider = 'opentelemetry' AND mysql.instance.role = 'replica' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }],
              "thresholds": [
                {"value": 10, "alertSeverity": "WARNING"},
                {"value": 30, "alertSeverity": "CRITICAL"}
              ]
            }
          }
        },
        {
          "title": "SQL Delay",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT latest(mysql.replica.sql_delay) as 'SQL Delay (seconds)' FROM Metric WHERE instrumentation.provider = 'opentelemetry' AND mysql.instance.role = 'replica' FACET mysql.instance.endpoint TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        }
      ]
    },
    {
      "name": "Resource Utilization",
      "description": "System resource usage metrics",
      "widgets": [
        {
          "title": "Connection & Thread Status",
          "configuration": {
            "table": {
              "nrqlQueries": [{
                "query": "SELECT latest(mysql.threads) as 'Connected', latest(mysql.connection.count) as 'Total Connections', latest(mysql.connection.errors) as 'Connection Errors', latest(mysql.threads) filter(WHERE threads = 'running') as 'Running Threads' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint, mysql.instance.role SINCE 5 minutes ago",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Network I/O",
          "configuration": {
            "area": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.client.network.io), 1 minute) / 1024 / 1024 as 'MB/min' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET client.network.io TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Temporary Resources",
          "configuration": {
            "line": {
              "nrqlQueries": [{
                "query": "SELECT rate(sum(mysql.tmp_resources), 1 minute) as 'Temp Resources/min' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET tmp_resource TIMESERIES AUTO",
                "accountId": 0
              }]
            }
          }
        },
        {
          "title": "Table Cache Status",
          "configuration": {
            "billboard": {
              "nrqlQueries": [{
                "query": "SELECT latest(mysql.table_open_cache) as 'Open Tables', latest(mysql.opened_resources) filter(WHERE opened_resources = 'table') as 'Opened Tables' FROM Metric WHERE instrumentation.provider = 'opentelemetry' FACET mysql.instance.endpoint SINCE 5 minutes ago",
                "accountId": 0
              }]
            }
          }
        }
      ]
    }
  ]
}