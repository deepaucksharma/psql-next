apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "database-intelligence.configMapName" . }}
  namespace: {{ include "database-intelligence.namespace" . }}
  labels:
    {{- include "database-intelligence.labels" . | nindent 4 }}
data:
  collector-config.yaml: |
    receivers:
      {{- if .Values.config.postgres.enabled }}
      postgresql:
        endpoint: ${POSTGRES_HOST}:${POSTGRES_PORT}
        username: ${POSTGRES_USER}
        password: ${POSTGRES_PASSWORD}
        databases:
          - ${POSTGRES_DB}
        collection_interval: {{ .Values.config.postgres.collectionInterval }}
        tls:
          insecure: true
        metrics:
          postgresql.database.size:
            enabled: true
          postgresql.backends:
            enabled: true
          postgresql.connections:
            enabled: true
          postgresql.commits:
            enabled: true
          postgresql.rollbacks:
            enabled: true
          postgresql.blocks.read:
            enabled: true
          postgresql.blocks.hit:
            enabled: true
          postgresql.deadlocks:
            enabled: true
          postgresql.temp.files:
            enabled: true
          postgresql.bgwriter:
            enabled: true
          postgresql.locks:
            enabled: true
          postgresql.replication:
            enabled: true
          postgresql.wal:
            enabled: true
      
      sqlquery/postgresql:
        driver: postgres
        datasource: "host=${POSTGRES_HOST} port=${POSTGRES_PORT} user=${POSTGRES_USER} password=${POSTGRES_PASSWORD} dbname=${POSTGRES_DB} sslmode={{ .Values.config.postgres.sslmode }}"
        collection_interval: {{ .Values.config.postgres.collectionInterval }}
        queries:
          - query: |
              SELECT 
                query,
                calls,
                total_exec_time,
                mean_exec_time,
                stddev_exec_time,
                min_exec_time,
                max_exec_time,
                rows
              FROM pg_stat_statements
              WHERE query NOT LIKE '%pg_stat_statements%'
              ORDER BY total_exec_time DESC
              LIMIT 100
            metrics:
              - metric_name: postgresql.query.calls
                value_column: calls
                value_type: int
                attribute_columns:
                  - query
              - metric_name: postgresql.query.total_time
                value_column: total_exec_time
                value_type: double
                attribute_columns:
                  - query
              - metric_name: postgresql.query.mean_time
                value_column: mean_exec_time
                value_type: double
                attribute_columns:
                  - query
      {{- end }}
      
      {{- if .Values.config.mysql.enabled }}
      mysql:
        endpoint: ${MYSQL_HOST}:${MYSQL_PORT}
        username: ${MYSQL_USER}
        password: ${MYSQL_PASSWORD}
        database: ${MYSQL_DB}
        collection_interval: {{ .Values.config.mysql.collectionInterval }}
        metrics:
          mysql.buffer_pool.pages:
            enabled: true
          mysql.buffer_pool.data_pages:
            enabled: true
          mysql.buffer_pool.page_flushes:
            enabled: true
          mysql.commands:
            enabled: true
          mysql.handlers:
            enabled: true
          mysql.locks:
            enabled: true
          mysql.log_operations:
            enabled: true
          mysql.operations:
            enabled: true
          mysql.page_operations:
            enabled: true
          mysql.row_locks:
            enabled: true
          mysql.row_operations:
            enabled: true
          mysql.sorts:
            enabled: true
          mysql.threads:
            enabled: true
      
      sqlquery/mysql:
        driver: mysql
        datasource: "${MYSQL_USER}:${MYSQL_PASSWORD}@tcp(${MYSQL_HOST}:${MYSQL_PORT})/${MYSQL_DB}"
        collection_interval: {{ .Values.config.mysql.collectionInterval }}
        queries:
          - query: |
              SELECT 
                DIGEST_TEXT as query,
                COUNT_STAR as calls,
                SUM_TIMER_WAIT/1000000000 as total_time_ms,
                AVG_TIMER_WAIT/1000000000 as avg_time_ms,
                MIN_TIMER_WAIT/1000000000 as min_time_ms,
                MAX_TIMER_WAIT/1000000000 as max_time_ms,
                SUM_ROWS_SENT as rows_sent,
                SUM_ROWS_EXAMINED as rows_examined
              FROM performance_schema.events_statements_summary_by_digest
              WHERE DIGEST_TEXT IS NOT NULL
              ORDER BY SUM_TIMER_WAIT DESC
              LIMIT 100
            metrics:
              - metric_name: mysql.query.calls
                value_column: calls
                value_type: int
                attribute_columns:
                  - query
              - metric_name: mysql.query.total_time
                value_column: total_time_ms
                value_type: double
                attribute_columns:
                  - query
              - metric_name: mysql.query.avg_time
                value_column: avg_time_ms
                value_type: double
                attribute_columns:
                  - query
      {{- end }}

    processors:
      memory_limiter:
        check_interval: 1s
        limit_mib: {{ .Values.resources.limits.memory | trimSuffix "Mi" | default "512" }}
        spike_limit_mib: 128
        limit_percentage: 75
        spike_limit_percentage: 20

      adaptive_sampler:
        default_sampling_rate: {{ .Values.config.sampling.defaultRate }}
        in_memory_only: true
        max_cache_size: 10000
        cache_ttl: 5m
        {{- if .Values.config.sampling.rules }}
        rules:
          {{- toYaml .Values.config.sampling.rules | nindent 10 }}
        {{- end }}

      {{- if .Values.config.circuitBreaker.enabled }}
      circuit_breaker:
        failure_threshold: {{ .Values.config.circuitBreaker.failureThreshold }}
        success_threshold: 2
        timeout: {{ .Values.config.circuitBreaker.timeout }}
        half_open_max_requests: 3
        backoff_multiplier: 2.0
        max_backoff: 5m
        error_patterns:
          - "connection refused"
          - "too many connections"
          - "database is shutting down"
        cardinality_limits:
          max_unique_queries: 10000
          max_unique_users: 1000
          window_duration: 5m
      {{- end }}

      batch:
        send_batch_size: 500
        send_batch_max_size: 1000
        timeout: 200ms

      plan_attribute_extractor:
        safe_mode: true
        timeout: 100ms
        max_plan_size: 10240
        anonymize_plans: true
        plan_anonymization:
          enabled: true
          anonymize_filters: true
          anonymize_join_conditions: true
          remove_cost_estimates: false
          sensitive_node_types:
            - "Function Scan"
            - "CTE Scan"
        error_mode: ignore

      verification:
        pii_detection:
          enabled: {{ .Values.config.piiDetection.enabled }}
          patterns:
            credit_card: '\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b'
            ssn: '\b\d{3}-\d{2}-\d{4}\b'
            email: '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
            phone: '\b\d{3}[-.]?\d{3}[-.]?\d{4}\b'
          scan_query_text: true
          scan_plan_json: true
          action_on_detection: {{ .Values.config.piiDetection.action }}
        data_quality:
          enabled: true
          required_attributes:
            - db.system
            - db.name
          max_attribute_length: 1000
          max_metric_value: 1e9
        cardinality_protection:
          enabled: true
          max_unique_queries: 10000
          max_unique_plans: 5000
          max_unique_users: 1000
          window_duration: 5m
        auto_tuning:
          enabled: true
          target_false_positive_rate: 0.01
          adjustment_interval: 5m

      resource:
        attributes:
          - key: deployment.environment
            value: ${ENVIRONMENT}
            action: upsert
          - key: service.name
            value: {{ printf "%s-database-intelligence" (include "database-intelligence.fullname" .) }}
            action: upsert
          - key: service.version
            value: ${VERSION}
            action: upsert
          - key: collector.name
            value: database-intelligence-collector
            action: insert
          - key: k8s.node.name
            value: ${NODE_NAME}
            action: insert
          - key: k8s.pod.name
            value: ${POD_NAME}
            action: insert
          - key: k8s.namespace.name
            value: ${POD_NAMESPACE}
            action: insert

      transform:
        metric_statements:
          - context: metric
            statements:
              {{- if .Values.config.postgres.enabled }}
              - set(attributes["db.system"], "postgresql") where IsMatch(name, "^postgresql\\.")
              {{- end }}
              {{- if .Values.config.mysql.enabled }}
              - set(attributes["db.system"], "mysql") where IsMatch(name, "^mysql\\.")
              {{- end }}
              - set(attributes["db.deployment.environment"], "${ENVIRONMENT}")

    exporters:
      otlp:
        endpoint: ${OTLP_ENDPOINT}
        headers:
          api-key: ${NEW_RELIC_LICENSE_KEY}
        compression: gzip
        retry_on_failure:
          enabled: true
          initial_interval: 5s
          max_interval: 30s
          max_elapsed_time: 300s

      prometheus:
        endpoint: 0.0.0.0:8889
        namespace: dbintel
        const_labels:
          environment: ${ENVIRONMENT}
          service: {{ include "database-intelligence.fullname" . }}

      debug:
        verbosity: detailed

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
        path: /health
        check_collector_pipeline:
          enabled: true
          interval: 5s
          exporter_failure_threshold: 3

      pprof:
        endpoint: 0.0.0.0:1777

      zpages:
        endpoint: 0.0.0.0:55679

    service:
      extensions: [health_check, pprof, zpages]
      pipelines:
        metrics:
          receivers: 
            {{- $receivers := list }}
            {{- if .Values.config.postgres.enabled }}
              {{- $receivers = append $receivers "postgresql" "sqlquery/postgresql" }}
            {{- end }}
            {{- if .Values.config.mysql.enabled }}
              {{- $receivers = append $receivers "mysql" "sqlquery/mysql" }}
            {{- end }}
            {{ toJson $receivers }}
          processors: 
            - memory_limiter
            - adaptive_sampler
            {{- if .Values.config.circuitBreaker.enabled }}
            - circuit_breaker
            {{- end }}
            - batch
            - plan_attribute_extractor
            - verification
            - resource
            - transform
          exporters: [otlp, prometheus]
      telemetry:
        logs:
          level: ${LOG_LEVEL}
          development: false
          encoding: json
        metrics:
          level: detailed
          address: 0.0.0.0:8888