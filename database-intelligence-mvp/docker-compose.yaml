version: '3.9'

x-common-variables: &common-variables
  NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
  ENVIRONMENT: ${ENVIRONMENT:-development}
  LOG_LEVEL: ${LOG_LEVEL:-info}

x-healthcheck-defaults: &healthcheck-defaults
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 10s

services:
  # ============================================
  # Core Services
  # ============================================
  
  collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        - VERSION=${VERSION:-dev}
    image: database-intelligence:${VERSION:-latest}
    container_name: db-intelligence-collector
    environment:
      <<: *common-variables
      # PostgreSQL Configuration
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-monitoring_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-monitoring}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-testdb}
      # MySQL Configuration
      MYSQL_HOST: ${MYSQL_HOST:-mysql}
      MYSQL_PORT: ${MYSQL_PORT:-3306}
      MYSQL_USER: ${MYSQL_USER:-monitoring_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-monitoring}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-testdb}
      # OTLP Configuration
      OTLP_ENDPOINT: ${OTLP_ENDPOINT:-https://otlp.nr-data.net:4317}
      # Feature Flags
      ENABLE_ADAPTIVE_SAMPLING: ${ENABLE_ADAPTIVE_SAMPLING:-true}
      ENABLE_CIRCUIT_BREAKER: ${ENABLE_CIRCUIT_BREAKER:-true}
      ENABLE_PLAN_EXTRACTOR: ${ENABLE_PLAN_EXTRACTOR:-true}
      ENABLE_VERIFICATION: ${ENABLE_VERIFICATION:-true}
    ports:
      - "13133:13133"  # Health check endpoint
      - "8888:8888"    # Internal metrics
      - "8889:8889"    # Prometheus metrics
      - "55679:55679"  # zPages (debug)
    volumes:
      - ./config/${CONFIG_FILE:-collector.yaml}:/etc/otel/config.yaml:ro
      - collector-state:/var/lib/otel
    depends_on:
      postgres:
        condition: service_healthy
        required: false
      mysql:
        condition: service_healthy
        required: false
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
    profiles: ["collector", "all"]
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Database Services
  # ============================================
  
  postgres:
    image: postgres:15-alpine
    container_name: db-intelligence-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - ./scripts/sql/postgres-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U postgres -d testdb"]
    profiles: ["databases", "dev", "all"]
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  mysql:
    image: mysql:8.0
    container_name: db-intelligence-mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: testdb
      MYSQL_USER: monitoring_user
      MYSQL_PASSWORD: monitoring
    volumes:
      - ./scripts/sql/mysql-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - mysql-data:/var/lib/mysql
    ports:
      - "${MYSQL_EXTERNAL_PORT:-3306}:3306"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pmysql"]
    profiles: ["databases", "dev", "all"]
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Monitoring Stack
  # ============================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: db-intelligence-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    depends_on:
      - collector
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
    profiles: ["monitoring", "all"]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: db-intelligence-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
    profiles: ["monitoring", "all"]
    restart: unless-stopped

  # ============================================
  # Testing Services
  # ============================================
  
  load-generator:
    build:
      context: ./tests/load
      dockerfile: Dockerfile
    container_name: db-intelligence-load-gen
    environment:
      POSTGRES_URL: postgres://postgres:postgres@postgres:5432/testdb?sslmode=disable
      MYSQL_URL: mysql://root:mysql@mysql:3306/testdb
      TARGET_QPS: ${LOAD_QPS:-10}
      DURATION: ${LOAD_DURATION:-5m}
    volumes:
      - ./tests/load/scenarios:/scenarios:ro
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    profiles: ["load-test"]
    restart: "no"

  k6:
    image: grafana/k6:latest
    container_name: db-intelligence-k6
    environment:
      K6_POSTGRES_URL: postgres://postgres:postgres@postgres:5432/testdb
      K6_MYSQL_URL: mysql://root:mysql@mysql:3306/testdb
      K6_COLLECTOR_URL: http://collector:8889/metrics
    volumes:
      - ./tests/k6:/scripts:ro
    command: run /scripts/database-load.js --duration=${K6_DURATION:-5m} --vus=${K6_VUS:-10}
    depends_on:
      - postgres
      - mysql
      - collector
    profiles: ["k6-test"]
    networks:
      - default

  # ============================================
  # Development Tools
  # ============================================
  
  devcontainer:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    container_name: db-intelligence-dev
    environment:
      <<: *common-variables
    volumes:
      - .:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build
    command: sleep infinity
    profiles: ["devcontainer"]
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: db-intelligence-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    profiles: ["tools"]
    restart: unless-stopped

  adminer:
    image: adminer:latest
    container_name: db-intelligence-adminer
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - postgres
      - mysql
    profiles: ["tools"]
    restart: unless-stopped

# ============================================
# Networks
# ============================================

networks:
  default:
    name: db-intelligence-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# Volumes
# ============================================

volumes:
  collector-state:
    name: db-intelligence-collector-state
  postgres-data:
    name: db-intelligence-postgres-data
  mysql-data:
    name: db-intelligence-mysql-data
  prometheus-data:
    name: db-intelligence-prometheus-data
  grafana-data:
    name: db-intelligence-grafana-data
  pgadmin-data:
    name: db-intelligence-pgadmin-data
  go-mod-cache:
    name: db-intelligence-go-mod-cache
  go-build-cache:
    name: db-intelligence-go-build-cache