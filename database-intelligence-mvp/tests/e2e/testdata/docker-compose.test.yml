version: '3.8'

services:
  # PostgreSQL for testing
  postgres-test:
    image: postgres:15-alpine
    container_name: postgres-e2e-test
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries='auto_explain,pg_stat_statements'"
    command:
      - postgres
      - -c
      - shared_preload_libraries=auto_explain,pg_stat_statements
      - -c
      - auto_explain.log_min_duration=10
      - -c
      - auto_explain.log_analyze=true
      - -c
      - auto_explain.log_buffers=true
      - -c
      - auto_explain.log_format=json
      - -c
      - auto_explain.log_nested_statements=true
      - -c
      - log_destination=jsonlog
      - -c
      - logging_collector=on
      - -c
      - log_directory=/var/log/postgresql
      - -c
      - log_filename=postgresql.log
      - -c
      - log_rotation_age=0
      - -c
      - log_rotation_size=0
      - -c
      - log_statement=all
      - -c
      - log_duration=on
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
    volumes:
      - postgres-logs:/var/log/postgresql
      - ./init-test-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - test-network

  # Mock OTLP endpoint (simulates New Relic)
  otlp-mock:
    image: mockserver/mockserver:latest
    container_name: otlp-mock-e2e
    ports:
      - "4317:1080"  # OTLP gRPC port
      - "4318:1080"  # OTLP HTTP port
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/expectations.json
    volumes:
      - ./otlp-mock-config:/config:ro
    networks:
      - test-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.88.0
    container_name: otel-collector-e2e
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - ./collector-e2e-config.yaml:/etc/otel/config.yaml:ro
      - postgres-logs:/var/log/postgresql:ro
    environment:
      POSTGRES_HOST: postgres-test
      POSTGRES_PORT: 5432
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
      POSTGRES_LOG_PATH: /var/log/postgresql/postgresql.log
      NEW_RELIC_LICENSE_KEY: test-license-key
      NEW_RELIC_OTLP_ENDPOINT: otlp-mock:1080
      LOG_LEVEL: debug
    ports:
      - "8888:8888"   # Prometheus metrics
      - "13133:13133" # Health check
      - "55679:55679" # ZPages
    depends_on:
      postgres-test:
        condition: service_healthy
      otlp-mock:
        condition: service_started
    networks:
      - test-network

  # Test runner container
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: e2e-test-runner
    environment:
      POSTGRES_HOST: postgres-test
      POSTGRES_PORT: 5432
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
      OTLP_ENDPOINT: otlp-mock:1080
      COLLECTOR_ENDPOINT: otel-collector:8888
      TEST_TIMEOUT: 30m
    volumes:
      - test-results:/test-results
      - ../../../:/workspace:ro
    command: |
      bash -c "
        echo 'Waiting for services...'
        sleep 10
        
        echo 'Running E2E tests...'
        cd /workspace/tests/e2e
        go test -v -timeout ${TEST_TIMEOUT} -tags=e2e ./... | tee /test-results/e2e-test.log
        
        echo 'Running benchmarks...'
        go test -bench=. -benchmem -run=^$ ./... | tee /test-results/benchmark.log
        
        echo 'Tests completed!'
      "
    depends_on:
      - otel-collector
    networks:
      - test-network

  # Grafana for test visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-e2e
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - test-network

volumes:
  postgres-logs:
  test-results:

networks:
  test-network:
    driver: bridge