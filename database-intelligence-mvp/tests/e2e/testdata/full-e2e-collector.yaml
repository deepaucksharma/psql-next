# Full E2E Test Configuration with all Database Intelligence processors
# This configuration demonstrates the complete pipeline with real databases

receivers:
  # PostgreSQL receiver for real database metrics
  postgresql:
    endpoint: ${env:POSTGRES_HOST}:${env:POSTGRES_PORT}
    transport: tcp
    username: ${env:POSTGRES_USER}
    password: ${env:POSTGRES_PASSWORD}
    databases:
      - ${env:POSTGRES_DB}
    collection_interval: 10s
    tls:
      insecure: true
      insecure_skip_verify: true
    metrics:
      postgresql.backends:
        enabled: true
      postgresql.commits:
        enabled: true
      postgresql.database.size:
        enabled: true
      postgresql.rollbacks:
        enabled: true
      postgresql.blocks_read:
        enabled: true
      postgresql.rows:
        enabled: true
      postgresql.table.size:
        enabled: true
      postgresql.index.scans:
        enabled: true
      postgresql.bgwriter.buffers.allocated:
        enabled: true

  # MySQL receiver for real database metrics
  mysql:
    endpoint: ${env:MYSQL_HOST}:${env:MYSQL_PORT}
    username: ${env:MYSQL_USER}
    password: ${env:MYSQL_PASSWORD}
    database: ${env:MYSQL_DB}
    collection_interval: 10s
    tls:
      insecure: true
    metrics:
      mysql.buffer_pool.data_pages:
        enabled: true
      mysql.buffer_pool.operations:
        enabled: true
      mysql.handlers:
        enabled: true
      mysql.locks:
        enabled: true
      mysql.operations:
        enabled: true
      mysql.table.io.wait:
        enabled: true
      mysql.threads:
        enabled: true
      mysql.uptime:
        enabled: true

  # SQL Query receiver for pg_stat_statements
  sqlquery:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST} port=${env:POSTGRES_PORT} user=${env:POSTGRES_USER} password=${env:POSTGRES_PASSWORD} dbname=${env:POSTGRES_DB} sslmode=disable"
    queries:
      - sql: |
          SELECT 
            queryid::text as query_id,
            query,
            calls,
            total_exec_time,
            mean_exec_time,
            rows,
            shared_blks_hit,
            shared_blks_read,
            blk_read_time,
            blk_write_time
          FROM pg_stat_statements
          WHERE query NOT LIKE '%pg_stat_statements%'
          ORDER BY total_exec_time DESC
          LIMIT 100
        collection_interval: 30s
        logs:
          - body_column: query
            tracking_start_value: "2000-01-01T00:00:00Z"
            tracking_column: "query_id"
            attributes:
              - attribute_column: "query_id"
              - attribute_column: "calls"
              - attribute_column: "total_exec_time"
              - attribute_column: "mean_exec_time"
              - attribute_column: "rows"

  # OTLP receiver for application logs/traces
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4320
      http:
        endpoint: 0.0.0.0:4321

processors:
  # Standard processors
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  resource:
    attributes:
      - key: service.name
        value: database-intelligence-e2e
        action: insert
      - key: environment
        value: ${env:ENVIRONMENT}
        action: insert
      - key: collector.version
        value: "2.0.0"
        action: insert

  transform:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - set(attributes["db.statement"], body) where attributes["query"] != nil
          - set(attributes["db.system"], "postgresql") where attributes["query_id"] != nil

  batch:
    timeout: 10s
    send_batch_size: 1000

  # Custom Database Intelligence processors
  
  # Circuit breaker for database protection
  circuitbreaker:
    failure_threshold: 5
    success_threshold: 2
    timeout: 30s
    max_concurrent_requests: 100
    error_patterns:
      - "connection refused"
      - "timeout"
      - "too many connections"
    per_database_limits:
      enabled: true
      default_limit: 50

  # Plan attribute extractor for query intelligence
  planattributeextractor:
    safe_mode: true
    error_mode: ignore
    timeout: 500ms
    query_anonymization:
      enabled: true
      preserve_structure: true
    plan_extraction:
      extract_costs: true
      extract_operations: true
      extract_indexes: true

  # Verification processor for data quality and PII
  verification:
    pii_detection:
      enabled: true
      action_on_detection: redact
      patterns:
        - email
        - ssn
        - credit_card
        - phone
      custom_patterns:
        - name: "api_key"
          pattern: "(?i)(api[_-]?key|apikey)\\s*[:=]\\s*['\"]?([a-zA-Z0-9-_]{20,})['\"\\s]?"
          replacement: "API_KEY=[REDACTED]"
    quality_checks:
      enabled: true
      max_attribute_length: 4096
      max_attribute_count: 100
    cardinality_control:
      enabled: true
      max_cardinality_per_metric: 10000
      enforcement_action: drop_label

  # Adaptive sampler for intelligent data reduction
  adaptivesampler:
    in_memory_only: true
    default_sample_rate: 1.0
    sampling_rules:
      - name: "expensive_queries"
        condition: 'double(attributes["mean_exec_time"]) > 100'
        sample_rate: 1.0
        priority: 100
      - name: "high_frequency"
        condition: 'int(attributes["calls"]) > 1000'
        sample_rate: 0.1
        priority: 90
      - name: "system_queries"
        condition: 'attributes["query"] matches "pg_*"'
        sample_rate: 0.01
        priority: 80
    deduplication:
      enabled: true
      window_seconds: 300
      cache_size: 10000
      hash_attribute: "query_id"

  # Query correlator for transaction tracking
  querycorrelator:
    session_timeout: 300s
    transaction_timeout: 60s
    correlation_attributes:
      - "application_name"
      - "client_addr"
      - "database"
    enable_table_correlation: true
    enable_database_correlation: true
    enable_temporal_correlation: true

  # NR error monitor for proactive issue detection
  nrerrormonitor:
    max_attribute_length: 4096
    max_metric_name_length: 255
    cardinality_warning_threshold: 5000
    alert_threshold: 10
    reporting_interval: 60s
    enable_proactive_validation: true
    validation_rules:
      - metric_name_pattern: "^[a-zA-Z][a-zA-Z0-9._]*$"
      - attribute_key_pattern: "^[a-zA-Z][a-zA-Z0-9._]*$"

  # Cost control for budget management
  costcontrol:
    monthly_budget_usd: 1000.0
    metric_cardinality_limit: 50000
    cost_per_gb_usd: 0.35
    aggressive_mode: false
    cardinality_reduction:
      enabled: true
      target_reduction_percent: 30
      preserve_attributes:
        - "db.system"
        - "db.name"
        - "service.name"
        - "environment"
    alerting:
      enabled: true
      thresholds:
        - percent: 80
          action: warn
        - percent: 95
          action: throttle

exporters:
  # Debug exporter for troubleshooting
  debug:
    verbosity: detailed
    sampling_initial: 10
    sampling_thereafter: 100

  # File exporter for local validation
  file:
    path: /var/lib/otel/e2e-output.json
    flush_interval: 5s

  # Real OTLP export to New Relic
  otlp/newrelic:
    endpoint: ${env:OTLP_ENDPOINT}
    tls:
      insecure: false
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

  # Prometheus for local metrics
  prometheus:
    endpoint: 0.0.0.0:8890
    resource_to_telemetry_conversion:
      enabled: true
    enable_open_metrics: true

  # Optional: Jaeger for trace visualization
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

service:
  pipelines:
    # Metrics pipeline for database metrics
    metrics/databases:
      receivers: [postgresql, mysql]
      processors: 
        - memory_limiter
        - resource
        - querycorrelator
        - nrerrormonitor
        - costcontrol
        - batch
      exporters: [prometheus, file, otlp/newrelic, debug]

    # Logs pipeline for query logs
    logs/queries:
      receivers: [sqlquery, otlp]
      processors:
        - memory_limiter
        - resource
        - transform
        - circuitbreaker
        - planattributeextractor
        - verification
        - adaptivesampler
        - costcontrol
        - batch
      exporters: [file, otlp/newrelic, debug]

  telemetry:
    logs:
      level: ${env:LOG_LEVEL}
      development: true
      encoding: console
    metrics:
      level: detailed
      readers:
        - pull:
            exporter:
              prometheus:
                host: 0.0.0.0
                port: 8889