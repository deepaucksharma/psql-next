version: '3'

tasks:
  binary:
    desc: Build collector binary for current platform
    vars:
      OUTPUT: '{{.OUTPUT | default (print .DIST_DIR "/" .BINARY_NAME)}}'
      GOOS: '{{.GOOS | default OS}}'
      GOARCH: '{{.GOARCH | default ARCH}}'
    cmds:
      - echo "[BUILD] Building for {{.GOOS}}/{{.GOARCH}}..."
      - mkdir -p {{.DIST_DIR}}
      - |
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} \
        ocb --config=ocb-config.yaml \
            --output-path={{.OUTPUT}}-{{.GOOS}}-{{.GOARCH}}
      - |
        if [ "{{.GOOS}}/{{.GOARCH}}" = "{{OS}}/{{ARCH}}" ]; then
          cp {{.OUTPUT}}-{{.GOOS}}-{{.GOARCH}} {{.OUTPUT}}
        fi
      - echo "[OK] Built: {{.OUTPUT}}-{{.GOOS}}-{{.GOARCH}}"

  multi:
    desc: Build for multiple platforms
    cmds:
      - task: build:binary
        vars:
          GOOS: linux
          GOARCH: amd64
      - task: build:binary
        vars:
          GOOS: linux
          GOARCH: arm64
      - task: build:binary
        vars:
          GOOS: darwin
          GOARCH: amd64
      - task: build:binary
        vars:
          GOOS: darwin
          GOARCH: arm64
      - echo "[OK] Multi-platform build complete"

  docker:
    desc: Build Docker image
    vars:
      IMAGE: '{{.DOCKER_REGISTRY}}/{{.DOCKER_ORG}}/{{.BINARY_NAME}}'
      TAG: '{{.TAG | default .VERSION}}'
      PLATFORM: '{{.PLATFORM | default "linux/amd64,linux/arm64"}}'
    deps: [binary]
    vars:
      DOCKER_BUILD_CMD: |
        docker buildx build 
          --platform {{.PLATFORM}} 
          --tag {{.IMAGE}}:{{.TAG}} 
          --tag {{.IMAGE}}:latest 
          $(if .PUSH) --push $(end)
    cmds:
      - echo "[DOCKER] Building Docker image: {{.IMAGE}}:{{.TAG}}"
      - "{{.DOCKER_BUILD_CMD}}"

  docker:push:
    desc: Build and push Docker image
    cmds:
      - task: build:docker
        vars:
          PUSH: true

  processors:
    desc: Build only custom processors
    cmds:
      - echo "[BUILD] Building custom processors..."
      - go build -v ./processors/adaptivesampler/...
      - go build -v ./processors/circuitbreaker/...
      - go build -v ./processors/planattributeextractor/...
      - go build -v ./processors/verification/...
      - echo "[OK] Processors built"

  quick:
    desc: Quick build without OCB (for development)
    cmds:
      - echo "[START] Quick build..."
      - go build -o {{.DIST_DIR}}/{{.BINARY_NAME}}-dev ./main.go
      - echo "[OK] Development build ready"

  release:
    desc: Build release artifacts
    vars:
      VERSION: '{{.VERSION}}'
    cmds:
      - |
        if [ -z "{{.VERSION}}" ]; then
          echo "[ERROR] VERSION is required"
          exit 1
        fi
      - task: build:multi
      - task: build:docker
        vars:
          TAG: '{{.VERSION}}'
      - task: helm:package
      - |
        echo "[PACKAGE] Creating release archive..."
        cd {{.DIST_DIR}} && \
        tar czf {{.BINARY_NAME}}-{{.VERSION}}.tar.gz \
          {{.BINARY_NAME}}-* \
          *.tgz
      - echo "[OK] Release {{.VERSION}} ready in {{.DIST_DIR}}/"