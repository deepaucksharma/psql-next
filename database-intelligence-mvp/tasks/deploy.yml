version: '3'

vars:
  NAMESPACE: '{{.NAMESPACE | default "database-intelligence"}}'
  RELEASE_NAME: '{{.RELEASE_NAME | default "db-intelligence"}}'

tasks:
  local:
    desc: Deploy locally using Docker Compose
    deps: ['build:docker']
    cmds:
      - echo "[START] Deploying locally with Docker Compose..."
      - docker compose --profile all up -d
      - |
        echo "[WAIT] Waiting for services to be healthy..."
        timeout 60 bash -c '
          until docker compose ps | grep -E "collector.*healthy" &>/dev/null; do 
            echo -n "."
            sleep 2
          done
        '
      - echo ""
      - task: deploy:status

  docker:
    desc: Deploy specific Docker Compose profile
    vars:
      PROFILE: '{{.PROFILE | default "all"}}'
    cmds:
      - echo "[START] Deploying profile: {{.PROFILE}}"
      - docker compose --profile {{.PROFILE}} up -d
      - echo "[OK] Profile {{.PROFILE}} deployed"

  k8s:
    desc: Deploy to Kubernetes using Helm
    deps: ['helm:package']
    cmds:
      - echo "[K8S] Deploying to Kubernetes..."
      - |
        kubectl create namespace {{.NAMESPACE}} --dry-run=client -o yaml | kubectl apply -f -
      - task: deploy:k8s:secrets
      - |
        helm upgrade --install {{.RELEASE_NAME}}           ./deployments/helm/db-intelligence           --namespace {{.NAMESPACE}}           --values ./deployments/helm/db-intelligence/values.yaml           {{if .VALUES_FILE}}--values {{.VALUES_FILE}}{{end}}           --wait --timeout 10m
      - echo "[OK] Deployed to Kubernetes"
      - task: deploy:k8s:status

  k8s:secrets:
    desc: Create Kubernetes secrets
    vars:
      LICENSE_KEY: '{{.NEW_RELIC_LICENSE_KEY | default ""}}'
    cmds:
      - |
        if [ -z "{{.LICENSE_KEY}}" ]; then
          echo "[WARNING]  NEW_RELIC_LICENSE_KEY not set, skipping secret creation"
          exit 0
        fi
      - echo "[SECRET] Creating Kubernetes secrets..."
      - |
        kubectl create secret generic newrelic-license \
          --from-literal=license-key={{.LICENSE_KEY}} \
          --namespace {{.NAMESPACE}} \
          --dry-run=client -o yaml | kubectl apply -f -
      - |
        kubectl create secret generic db-credentials \
          --from-literal=postgres-password=${POSTGRES_PASSWORD:-monitoring} \
          --from-literal=mysql-password=${MYSQL_PASSWORD:-monitoring} \
          --namespace {{.NAMESPACE}} \
          --dry-run=client -o yaml | kubectl apply -f -

  k8s:status:
    desc: Check Kubernetes deployment status
    cmds:
      - echo "[STATUS] Kubernetes deployment status:"
      - kubectl get all -n {{.NAMESPACE}}
      - echo ""
      - echo "[CHECK] Pod status:"
      - kubectl get pods -n {{.NAMESPACE}} -o wide
      - echo ""
      - echo "[SERVICES] Services:"
      - kubectl get svc -n {{.NAMESPACE}}

  k8s:logs:
    desc: Show Kubernetes pod logs
    vars:
      POD_LABEL: '{{.POD_LABEL | default "app=database-intelligence"}}'
      FOLLOW: '{{.FOLLOW | default "true"}}'
    cmds:
      - |
        POD=$(kubectl get pod -n {{.NAMESPACE}} -l {{.POD_LABEL}} -o jsonpath="{.items[0].metadata.name}")
        echo "[LOGS] Logs for pod: $POD"
        kubectl logs -n {{.NAMESPACE}} $POD {{if eq .FOLLOW "true"}}-f{{end}}

  k8s:port-forward:
    desc: Port forward to Kubernetes services
    cmds:
      - echo "[FORWARD] Setting up port forwards..."
      - |
        # Collector health
        kubectl port-forward -n {{.NAMESPACE}} svc/{{.RELEASE_NAME}}-collector 13133:13133 &
        # Collector metrics
        kubectl port-forward -n {{.NAMESPACE}} svc/{{.RELEASE_NAME}}-collector 8888:8888 &
        # Prometheus metrics
        kubectl port-forward -n {{.NAMESPACE}} svc/{{.RELEASE_NAME}}-collector 8889:8889 &
        echo "[OK] Port forwards established:"
        echo "  - Health: http://localhost:13133/"
        echo "  - Metrics: http://localhost:8888/metrics"
        echo "  - Prometheus: http://localhost:8889/metrics"

  terraform:
    desc: Deploy using Terraform
    dir: terraform
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
    cmds:
      - echo "[TERRAFORM] Deploying with Terraform..."
      - terraform init
      - terraform workspace select {{.ENVIRONMENT}} || terraform workspace new {{.ENVIRONMENT}}
      - terraform plan -var-file=environments/{{.ENVIRONMENT}}.tfvars -out=tfplan
      - |
        echo "[REVIEW] Review the plan above. Deploy? (y/N)"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
          terraform apply tfplan
        else
          echo "[ERROR] Deployment cancelled"
        fi

  status:
    desc: Check deployment status
    cmds:
      - echo "[CHECK] Checking deployment status..."
      - |
        # Check Docker
        if docker compose ps 2>/dev/null | grep -q collector; then
          echo "[DOCKER] Docker deployment:"
          docker compose ps | grep -E "(collector|postgres|mysql)"
        fi
      - |
        # Check Kubernetes
        if kubectl get ns {{.NAMESPACE}} &>/dev/null; then
          echo ""
          echo "[K8S] Kubernetes deployment:"
          kubectl get pods -n {{.NAMESPACE}} | grep -E "(collector|postgres|mysql)"
        fi
      - |
        # Check collector health
        if curl -sf http://localhost:13133/ > /dev/null; then
          echo ""
          echo "[OK] Collector is healthy"
        else
          echo ""
          echo "[WARNING]  Collector health check failed"
        fi

  rollback:
    desc: Rollback deployment
    vars:
      TYPE: '{{.TYPE | default "k8s"}}'
    cmds:
      - |
        case {{.TYPE}} in
          docker)
            echo "[ROLLBACK] Rolling back Docker deployment..."
            docker compose down
            docker compose --profile all up -d --force-recreate
            ;;
          k8s)
            echo "[ROLLBACK] Rolling back Kubernetes deployment..."
            helm rollback {{.RELEASE_NAME}} -n {{.NAMESPACE}}
            ;;
          *)
            echo "[ERROR] Unknown deployment type: {{.TYPE}}"
            exit 1
            ;;
        esac

  clean:
    desc: Clean up deployments
    cmds:
      - |
        echo "[CLEAN] Cleaning up deployments..."
        # Docker
        docker compose down -v || true
        # Kubernetes
        helm uninstall {{.RELEASE_NAME}} -n {{.NAMESPACE}} || true
        kubectl delete namespace {{.NAMESPACE}} || true
        echo "[OK] Cleanup complete"

  backup:
    desc: Backup deployment configurations
    vars:
      BACKUP_DIR: '{{.BACKUP_DIR | default "./backups"}}'
      TIMESTAMP: '{{now | date "20060102-150405"}}'
    cmds:
      - echo "[BACKUP] Backing up configurations..."
      - mkdir -p {{.BACKUP_DIR}}/{{.TIMESTAMP}}
      - |
        # Backup Docker configs
        cp docker-compose.yaml {{.BACKUP_DIR}}/{{.TIMESTAMP}}/
        cp -r config/ {{.BACKUP_DIR}}/{{.TIMESTAMP}}/
      - |
        # Backup Kubernetes configs
        kubectl get all -n {{.NAMESPACE}} -o yaml > {{.BACKUP_DIR}}/{{.TIMESTAMP}}/k8s-resources.yaml || true
        helm get values {{.RELEASE_NAME}} -n {{.NAMESPACE}} > {{.BACKUP_DIR}}/{{.TIMESTAMP}}/helm-values.yaml || true
      - echo "[OK] Backup saved to {{.BACKUP_DIR}}/{{.TIMESTAMP}}/"