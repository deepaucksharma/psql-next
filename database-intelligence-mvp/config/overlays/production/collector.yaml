# Production Environment Overlay
# Includes base configuration with production-grade settings

# Include base configuration
__includes:
  - ../base/collector.yaml

# Production-specific overrides
service:
  telemetry:
    logs:
      level: warn
      sampling:
        initial: 100
        thereafter: 1000
    metrics:
      level: normal
      
receivers:
  postgresql:
    collection_interval: 120s
    timeout: 60s
    tls:
      insecure: false
      ca_file: /etc/ssl/certs/postgres-ca.crt
      cert_file: /etc/ssl/certs/postgres-client.crt
      key_file: /etc/ssl/private/postgres-client.key
    databases:
      - ${env:POSTGRES_DB_PRIMARY}
      - ${env:POSTGRES_DB_SECONDARY}
    
  mysql:
    collection_interval: 120s
    timeout: 60s
    allow_native_passwords: false
    tls:
      mode: required
    
  sqlquery:
    collection_interval: 300s
    timeout: 120s
    queries:
      # Production query for monitoring
      - query: |
          WITH slow_queries AS (
            SELECT 
              queryid,
              query,
              calls,
              total_exec_time,
              mean_exec_time,
              max_exec_time,
              rows
            FROM pg_stat_statements
            WHERE mean_exec_time > 1000
            ORDER BY mean_exec_time DESC
            LIMIT 50
          )
          SELECT * FROM slow_queries
        metrics:
          - metric_name: db.slow_queries
            value_column: mean_exec_time
            attribute_columns: [queryid, calls, rows]

processors:
  # Conservative memory limits
  memory_limiter:
    check_interval: 1s
    limit_percentage: 65
    spike_limit_percentage: 15
    
  # Production batching
  batch:
    timeout: 10s
    send_batch_size: 4096
    send_batch_max_size: 8192
    
  # Resource detection for full metadata
  resourcedetection:
    detectors: [env, system, aws, gcp, azure]
    timeout: 10s
    override: false
    
  # Data sanitization
  attributes:
    actions:
      # Remove sensitive data
      - key: db.statement
        action: hash
      - key: db.user
        action: delete
      - key: client_addr
        action: delete
      # Add production metadata
      - key: environment
        value: production
        action: upsert
      - key: datacenter
        value: ${env:DATACENTER}
        action: upsert
        
  # Tail sampling for errors
  tail_sampling:
    decision_wait: 30s
    num_traces: 50000
    expected_new_traces_per_sec: 100
    policies:
      - name: errors-policy
        type: status_code
        status_code:
          status_codes: [ERROR]
      - name: slow-queries-policy
        type: numeric_attribute
        numeric_attribute:
          key: db.duration
          min_value: 5000

exporters:
  # Production OTLP with HA
  otlp/newrelic:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
      X-License-Key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 60s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 5000
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 60s
      max_elapsed_time: 600s
      
  # Failover exporter
  otlp/failover:
    endpoint: ${env:FAILOVER_ENDPOINT}
    headers:
      api-key: ${env:FAILOVER_KEY}
    compression: gzip
    
  # Production Prometheus with relabeling
  prometheus:
    endpoint: 0.0.0.0:8888
    namespace: dbintel
    const_labels:
      environment: production
      region: ${env:AWS_REGION}
    metric_relabeling_configs:
      - source_labels: [__name__]
        regex: 'go_.*'
        action: drop
      - source_labels: [__name__]
        regex: 'process_.*'
        action: drop

# Production pipelines with failover
service:
  pipelines:
    metrics/infrastructure:
      receivers: [postgresql, mysql]
      processors: [memory_limiter, resourcedetection, resource, attributes, batch]
      exporters: [otlp/newrelic, otlp/failover, prometheus]
      
    metrics/queries:
      receivers: [sqlquery]
      processors: [memory_limiter, resource, attributes, tail_sampling, batch]
      exporters: [otlp/newrelic, otlp/failover]