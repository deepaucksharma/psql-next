# MySQL Query Library with Fallback Patterns
# This file defines queries in priority order with feature requirements

slow_queries:
  # Priority 100: Performance Schema with full details
  - name: performance_schema_full
    priority: 100
    description: "Complete slow query analysis from performance schema"
    requirements:
      required_capabilities: ["performance_schema_enabled", "events_statements_summary_by_digest"]
    sql: |
      SELECT
        DIGEST as query_id,
        DIGEST_TEXT as query_text,
        COUNT_STAR as execution_count,
        SUM_TIMER_WAIT/1000000000 as total_time_ms,
        AVG_TIMER_WAIT/1000000000 as mean_time_ms,
        MIN_TIMER_WAIT/1000000000 as min_time_ms,
        MAX_TIMER_WAIT/1000000000 as max_time_ms,
        QUANTILE_95/1000000000 as p95_time_ms,
        QUANTILE_99/1000000000 as p99_time_ms,
        SUM_ROWS_SENT as rows_sent,
        SUM_ROWS_EXAMINED as rows_examined,
        SUM_CREATED_TMP_DISK_TABLES as tmp_disk_tables,
        SUM_CREATED_TMP_TABLES as tmp_tables,
        SUM_SELECT_FULL_JOIN as full_joins,
        SUM_SELECT_RANGE as range_selects,
        SUM_SELECT_SCAN as table_scans,
        SUM_NO_INDEX_USED as no_index_used,
        SUM_NO_GOOD_INDEX_USED as no_good_index_used,
        FIRST_SEEN,
        LAST_SEEN,
        SCHEMA_NAME as database_name
      FROM performance_schema.events_statements_summary_by_digest
      WHERE SCHEMA_NAME IS NOT NULL
        AND AVG_TIMER_WAIT > $1 * 1000000000
        AND COUNT_STAR > 5
      ORDER BY AVG_TIMER_WAIT DESC
      LIMIT $2

  # Priority 90: Performance Schema basic
  - name: performance_schema_basic
    priority: 90
    description: "Basic slow query metrics from performance schema"
    requirements:
      required_capabilities: ["performance_schema_enabled", "events_statements_summary_by_digest"]
    sql: |
      SELECT
        DIGEST as query_id,
        DIGEST_TEXT as query_text,
        COUNT_STAR as execution_count,
        SUM_TIMER_WAIT/1000000000 as total_time_ms,
        AVG_TIMER_WAIT/1000000000 as mean_time_ms,
        MIN_TIMER_WAIT/1000000000 as min_time_ms,
        MAX_TIMER_WAIT/1000000000 as max_time_ms,
        SUM_ROWS_SENT as rows_sent,
        SUM_ROWS_EXAMINED as rows_examined,
        SUM_NO_INDEX_USED as no_index_used,
        SCHEMA_NAME as database_name
      FROM performance_schema.events_statements_summary_by_digest
      WHERE SCHEMA_NAME IS NOT NULL
        AND AVG_TIMER_WAIT > $1 * 1000000000
      ORDER BY AVG_TIMER_WAIT DESC
      LIMIT $2

  # Priority 50: Slow query log table (if available)
  - name: slow_log_table
    priority: 50
    description: "Slow queries from mysql.slow_log table"
    requirements:
      required_capabilities: ["slow_query_log"]
    sql: |
      SELECT
        MD5(sql_text) as query_id,
        sql_text as query_text,
        COUNT(*) as execution_count,
        SUM(query_time) * 1000 as total_time_ms,
        AVG(query_time) * 1000 as mean_time_ms,
        MIN(query_time) * 1000 as min_time_ms,
        MAX(query_time) * 1000 as max_time_ms,
        SUM(rows_sent) as rows_sent,
        SUM(rows_examined) as rows_examined,
        db as database_name
      FROM mysql.slow_log
      WHERE start_time > DATE_SUB(NOW(), INTERVAL 1 HOUR)
      GROUP BY sql_text, db
      HAVING AVG(query_time) * 1000 > $1
      ORDER BY mean_time_ms DESC
      LIMIT $2

  # Priority 10: Current processlist fallback
  - name: processlist_fallback
    priority: 10
    description: "Emergency fallback using processlist"
    requirements:
      required_capabilities: ["processlist_access"]
    sql: |
      SELECT
        ID as query_id,
        INFO as query_text,
        1 as execution_count,
        TIME * 1000 as total_time_ms,
        TIME * 1000 as mean_time_ms,
        TIME * 1000 as min_time_ms,
        TIME * 1000 as max_time_ms,
        0 as rows_sent,
        0 as rows_examined,
        0 as no_index_used,
        DB as database_name
      FROM information_schema.PROCESSLIST
      WHERE COMMAND != 'Sleep'
        AND TIME > $1 / 1000
        AND INFO IS NOT NULL
        AND INFO NOT LIKE '%PROCESSLIST%'
      ORDER BY TIME DESC
      LIMIT $2

active_sessions:
  # Priority 90: Performance Schema threads
  - name: performance_schema_threads
    priority: 90
    description: "Active threads from performance schema"
    requirements:
      required_capabilities: ["performance_schema_enabled"]
    sql: |
      SELECT 
        t.THREAD_ID as thread_id,
        t.PROCESSLIST_ID as connection_id,
        t.PROCESSLIST_USER as username,
        t.PROCESSLIST_HOST as host,
        t.PROCESSLIST_DB as database_name,
        t.PROCESSLIST_COMMAND as command,
        t.PROCESSLIST_TIME as time_seconds,
        t.PROCESSLIST_STATE as state,
        t.PROCESSLIST_INFO as query,
        esc.TIMER_WAIT/1000000000 as current_statement_duration_ms,
        esc.SQL_TEXT as current_statement
      FROM performance_schema.threads t
      LEFT JOIN performance_schema.events_statements_current esc
        ON t.THREAD_ID = esc.THREAD_ID
      WHERE t.TYPE = 'FOREGROUND'
        AND t.PROCESSLIST_COMMAND != 'Sleep'

  # Priority 50: Information Schema processlist
  - name: processlist_standard
    priority: 50
    description: "Standard processlist information"
    requirements:
      required_capabilities: ["processlist_access"]
    sql: |
      SELECT 
        ID as connection_id,
        USER as username,
        HOST as host,
        DB as database_name,
        COMMAND as command,
        TIME as time_seconds,
        STATE as state,
        INFO as query
      FROM information_schema.PROCESSLIST
      WHERE COMMAND != 'Sleep'
      ORDER BY TIME DESC

  # Priority 10: Basic connection count
  - name: connection_count
    priority: 10
    description: "Basic connection statistics"
    requirements: []
    sql: |
      SELECT 
        COUNT(*) as connection_count,
        COMMAND as command,
        STATE as state,
        COUNT(DISTINCT USER) as unique_users,
        COUNT(DISTINCT DB) as unique_databases
      FROM information_schema.PROCESSLIST
      GROUP BY COMMAND, STATE
      ORDER BY connection_count DESC

wait_events:
  # Priority 100: Performance Schema wait events
  - name: wait_events_detailed
    priority: 100
    description: "Detailed wait event analysis"
    requirements:
      required_capabilities: ["performance_schema_enabled", "events_waits_summary"]
    sql: |
      SELECT 
        EVENT_NAME as wait_event,
        COUNT_STAR as wait_count,
        SUM_TIMER_WAIT/1000000000 as total_wait_time_ms,
        AVG_TIMER_WAIT/1000000000 as avg_wait_time_ms,
        MIN_TIMER_WAIT/1000000000 as min_wait_time_ms,
        MAX_TIMER_WAIT/1000000000 as max_wait_time_ms
      FROM performance_schema.events_waits_summary_global_by_event_name
      WHERE COUNT_STAR > 0
        AND EVENT_NAME NOT LIKE 'idle%'
      ORDER BY SUM_TIMER_WAIT DESC
      LIMIT 50

  # Priority 50: Current waits
  - name: wait_events_current
    priority: 50
    description: "Currently waiting threads"
    requirements:
      required_capabilities: ["performance_schema_enabled"]
    sql: |
      SELECT 
        esc.EVENT_NAME as wait_event,
        COUNT(*) as waiting_threads,
        AVG(esc.TIMER_WAIT)/1000000000 as avg_wait_time_ms
      FROM performance_schema.events_waits_current esc
      JOIN performance_schema.threads t ON t.THREAD_ID = esc.THREAD_ID
      WHERE t.TYPE = 'FOREGROUND'
        AND esc.EVENT_NAME IS NOT NULL
      GROUP BY esc.EVENT_NAME
      ORDER BY waiting_threads DESC

table_stats:
  # Priority 90: Detailed table statistics with indexes
  - name: table_stats_detailed
    priority: 90
    description: "Comprehensive table statistics"
    requirements: []
    sql: |
      SELECT 
        t.TABLE_SCHEMA as schema_name,
        t.TABLE_NAME as table_name,
        t.ENGINE as storage_engine,
        t.TABLE_ROWS as estimated_rows,
        t.AVG_ROW_LENGTH as avg_row_length,
        t.DATA_LENGTH as data_size,
        t.INDEX_LENGTH as index_size,
        t.DATA_LENGTH + t.INDEX_LENGTH as total_size,
        t.AUTO_INCREMENT as auto_increment_value,
        t.CREATE_TIME as created_at,
        t.UPDATE_TIME as updated_at,
        COUNT(DISTINCT s.INDEX_NAME) as index_count,
        SUM(s.CARDINALITY) as total_cardinality
      FROM information_schema.TABLES t
      LEFT JOIN information_schema.STATISTICS s
        ON t.TABLE_SCHEMA = s.TABLE_SCHEMA 
        AND t.TABLE_NAME = s.TABLE_NAME
      WHERE t.TABLE_SCHEMA NOT IN ('mysql', 'information_schema', 'performance_schema', 'sys')
        AND t.TABLE_TYPE = 'BASE TABLE'
      GROUP BY 
        t.TABLE_SCHEMA, t.TABLE_NAME, t.ENGINE, t.TABLE_ROWS,
        t.AVG_ROW_LENGTH, t.DATA_LENGTH, t.INDEX_LENGTH,
        t.AUTO_INCREMENT, t.CREATE_TIME, t.UPDATE_TIME
      ORDER BY total_size DESC
      LIMIT 50

  # Priority 50: Basic table information
  - name: table_stats_basic
    priority: 50
    description: "Basic table size and row counts"
    requirements: []
    sql: |
      SELECT 
        TABLE_SCHEMA as schema_name,
        TABLE_NAME as table_name,
        TABLE_ROWS as estimated_rows,
        DATA_LENGTH as data_size,
        INDEX_LENGTH as index_size,
        DATA_LENGTH + INDEX_LENGTH as total_size
      FROM information_schema.TABLES
      WHERE TABLE_SCHEMA NOT IN ('mysql', 'information_schema', 'performance_schema', 'sys')
        AND TABLE_TYPE = 'BASE TABLE'
      ORDER BY total_size DESC
      LIMIT 50

innodb_stats:
  # Priority 90: InnoDB buffer pool statistics
  - name: innodb_buffer_pool_stats
    priority: 90
    description: "InnoDB buffer pool performance metrics"
    requirements:
      required_capabilities: ["innodb_metrics"]
    sql: |
      SELECT 
        POOL_ID as pool_id,
        POOL_SIZE as pool_size_pages,
        FREE_BUFFERS as free_pages,
        DATABASE_PAGES as database_pages,
        OLD_DATABASE_PAGES as old_pages,
        PAGES_MADE_YOUNG as pages_made_young,
        PAGES_NOT_MADE_YOUNG as pages_not_made_young,
        NUMBER_PAGES_READ as pages_read,
        NUMBER_PAGES_CREATED as pages_created,
        NUMBER_PAGES_WRITTEN as pages_written,
        HIT_RATE as hit_rate,
        YOUNG_MAKE_PER_THOUSAND_GETS as young_make_rate,
        NOT_YOUNG_MAKE_PER_THOUSAND_GETS as not_young_make_rate,
        NUMBER_PAGES_GET as pages_get,
        READ_AHEAD as read_ahead_pages,
        READ_AHEAD_EVICTED as read_ahead_evicted,
        LRU_IO_TOTAL as lru_io_total,
        LRU_IO_CURRENT as lru_io_current
      FROM information_schema.INNODB_BUFFER_POOL_STATS

  # Priority 50: Basic InnoDB metrics
  - name: innodb_basic_metrics
    priority: 50
    description: "Basic InnoDB performance indicators"
    requirements: []
    sql: |
      SELECT 
        VARIABLE_NAME as metric_name,
        VARIABLE_VALUE as metric_value
      FROM information_schema.GLOBAL_STATUS
      WHERE VARIABLE_NAME IN (
        'Innodb_buffer_pool_read_requests',
        'Innodb_buffer_pool_reads',
        'Innodb_buffer_pool_pages_total',
        'Innodb_buffer_pool_pages_data',
        'Innodb_buffer_pool_pages_dirty',
        'Innodb_buffer_pool_pages_flushed',
        'Innodb_rows_read',
        'Innodb_rows_inserted',
        'Innodb_rows_updated',
        'Innodb_rows_deleted',
        'Innodb_row_lock_waits',
        'Innodb_row_lock_time',
        'Innodb_deadlocks'
      )