# PostgreSQL Query Library with Fallback Patterns
# This file defines queries in priority order with feature requirements

slow_queries:
  # Priority 100: pg_stat_monitor (most advanced)
  - name: pg_stat_monitor_advanced
    priority: 100
    description: "Advanced slow query metrics with percentiles and resource usage"
    requirements:
      required_extensions: ["pg_stat_monitor"]
    sql: |
      SELECT 
        queryid::text as query_id,
        query as query_text,
        calls as execution_count,
        total_time as total_time_ms,
        mean_time as mean_time_ms,
        p50 as p50_time_ms,
        p95 as p95_time_ms,
        p99 as p99_time_ms,
        rows,
        shared_blks_hit,
        shared_blks_read,
        local_blks_hit,
        local_blks_read,
        cpu_user_time,
        cpu_sys_time,
        wal_records,
        wal_bytes,
        current_database() as database_name,
        userid::regrole::text as username
      FROM pg_stat_monitor
      WHERE mean_time > $1
        AND query NOT LIKE '%pg_stat%'
        AND query NOT LIKE '%EXPLAIN%'
      ORDER BY mean_time DESC
      LIMIT $2

  # Priority 90: pg_stat_statements with I/O timing
  - name: pg_stat_statements_io_timing
    priority: 90
    description: "Slow queries with I/O timing breakdown"
    requirements:
      required_extensions: ["pg_stat_statements"]
      required_capabilities: ["track_io_timing"]
    sql: |
      SELECT 
        queryid::text as query_id,
        query as query_text,
        calls as execution_count,
        total_exec_time as total_time_ms,
        mean_exec_time as mean_time_ms,
        stddev_exec_time as stddev_time_ms,
        min_exec_time as min_time_ms,
        max_exec_time as max_time_ms,
        rows,
        shared_blks_hit,
        shared_blks_read,
        shared_blks_written,
        local_blks_hit,
        local_blks_read,
        local_blks_written,
        blk_read_time,
        blk_write_time,
        -- Calculate CPU time as total minus I/O time
        (total_exec_time - COALESCE(blk_read_time + blk_write_time, 0)) as cpu_time_ms,
        COALESCE(blk_read_time + blk_write_time, 0) as io_time_ms,
        current_database() as database_name,
        userid::regrole::text as username
      FROM pg_stat_statements
      WHERE mean_exec_time > $1
        AND query NOT LIKE '%pg_stat%'
        AND query NOT LIKE '%EXPLAIN%'
      ORDER BY mean_exec_time DESC
      LIMIT $2

  # Priority 80: pg_stat_statements with kcache
  - name: pg_stat_statements_kcache
    priority: 80
    description: "Slow queries with kernel-level metrics"
    requirements:
      required_extensions: ["pg_stat_statements", "pg_stat_kcache"]
    sql: |
      SELECT 
        s.queryid::text as query_id,
        s.query as query_text,
        s.calls as execution_count,
        s.total_exec_time as total_time_ms,
        s.mean_exec_time as mean_time_ms,
        s.rows,
        s.shared_blks_hit,
        s.shared_blks_read,
        k.user_time as cpu_user_time_ms,
        k.system_time as cpu_sys_time_ms,
        k.reads as physical_reads,
        k.writes as physical_writes,
        current_database() as database_name
      FROM pg_stat_statements s
      LEFT JOIN pg_stat_kcache k USING (queryid, userid, dbid)
      WHERE s.mean_exec_time > $1
        AND s.query NOT LIKE '%pg_stat%'
      ORDER BY s.mean_exec_time DESC
      LIMIT $2

  # Priority 50: Basic pg_stat_statements
  - name: pg_stat_statements_basic
    priority: 50
    description: "Basic slow query statistics"
    requirements:
      required_extensions: ["pg_stat_statements"]
    sql: |
      SELECT 
        queryid::text as query_id,
        query as query_text,
        calls as execution_count,
        total_exec_time as total_time_ms,
        mean_exec_time as mean_time_ms,
        min_exec_time as min_time_ms,
        max_exec_time as max_time_ms,
        rows,
        shared_blks_hit,
        shared_blks_read,
        shared_blks_hit::float / NULLIF(shared_blks_hit + shared_blks_read, 0) as cache_hit_ratio,
        current_database() as database_name
      FROM pg_stat_statements
      WHERE mean_exec_time > $1
        AND query NOT LIKE '%pg_stat%'
      ORDER BY mean_exec_time DESC
      LIMIT $2

  # Priority 10: Fallback using current activity
  - name: pg_stat_activity_fallback
    priority: 10
    description: "Emergency fallback using only current activity"
    requirements: []
    sql: |
      SELECT 
        pid::text as query_id,
        query as query_text,
        1 as execution_count,
        EXTRACT(EPOCH FROM (now() - query_start)) * 1000 as total_time_ms,
        EXTRACT(EPOCH FROM (now() - query_start)) * 1000 as mean_time_ms,
        EXTRACT(EPOCH FROM (now() - query_start)) * 1000 as min_time_ms,
        EXTRACT(EPOCH FROM (now() - query_start)) * 1000 as max_time_ms,
        0 as rows,
        0 as shared_blks_hit,
        0 as shared_blks_read,
        0.0 as cache_hit_ratio,
        current_database() as database_name
      FROM pg_stat_activity
      WHERE state = 'active' 
        AND query_start < now() - interval '1 second'
        AND query NOT LIKE '%pg_stat%'
        AND backend_type = 'client backend'
      ORDER BY query_start
      LIMIT $2

active_sessions:
  # Priority 90: Detailed with wait sampling
  - name: active_sessions_wait_sampling
    priority: 90
    description: "Active sessions with detailed wait event sampling"
    requirements:
      required_extensions: ["pg_wait_sampling"]
    sql: |
      WITH session_waits AS (
        SELECT 
          pid,
          event_type,
          event,
          sum(count) as wait_count
        FROM pg_wait_sampling_current
        GROUP BY pid, event_type, event
      )
      SELECT 
        a.pid,
        a.usename as username,
        a.application_name,
        a.client_addr::text as client_address,
        a.backend_start,
        a.query_start,
        a.state_change,
        a.state,
        a.wait_event_type,
        a.wait_event,
        a.query,
        a.backend_type,
        EXTRACT(EPOCH FROM (now() - a.query_start)) as query_duration_seconds,
        EXTRACT(EPOCH FROM (now() - a.state_change)) as state_duration_seconds,
        w.wait_count,
        s.queryid::text as query_id
      FROM pg_stat_activity a
      LEFT JOIN pg_stat_statements s 
        ON s.query = a.query AND s.userid = a.usesysid
      LEFT JOIN session_waits w 
        ON w.pid = a.pid
      WHERE a.state != 'idle'
        AND a.backend_type = 'client backend'

  # Priority 80: With blocking information
  - name: active_sessions_blocking
    priority: 80
    description: "Active sessions with blocking chain analysis"
    requirements: []
    sql: |
      WITH blocking_tree AS (
        SELECT 
          blocked_locks.pid AS blocked_pid,
          blocked_activity.usename AS blocked_user,
          blocking_locks.pid AS blocking_pid,
          blocking_activity.usename AS blocking_user,
          blocked_activity.query AS blocked_query,
          blocking_activity.query AS blocking_query,
          blocked_locks.locktype,
          blocked_locks.mode AS blocked_mode,
          blocking_locks.mode AS blocking_mode
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks 
          ON blocking_locks.locktype = blocked_locks.locktype
          AND blocking_locks.database IS NOT DISTINCT FROM blocked_locks.database
          AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
          AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page
          AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple
          AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid
          AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid
          AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid
          AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid
          AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid
          AND blocking_locks.granted
        JOIN pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
      )
      SELECT 
        a.pid,
        a.usename as username,
        a.application_name,
        a.client_addr::text as client_address,
        a.backend_start,
        a.query_start,
        a.state_change,
        a.state,
        a.wait_event_type,
        a.wait_event,
        a.query,
        a.backend_type,
        EXTRACT(EPOCH FROM (now() - a.query_start)) as query_duration_seconds,
        b.blocking_pid,
        b.blocking_user,
        b.locktype as blocked_on_locktype
      FROM pg_stat_activity a
      LEFT JOIN blocking_tree b ON b.blocked_pid = a.pid
      WHERE a.state != 'idle'
        AND a.backend_type = 'client backend'

  # Priority 50: Standard active sessions
  - name: active_sessions_standard
    priority: 50
    description: "Standard active session information"
    requirements: []
    sql: |
      SELECT 
        pid,
        usename as username,
        application_name,
        client_addr::text as client_address,
        backend_start,
        query_start,
        state_change,
        state,
        wait_event_type,
        wait_event,
        query,
        backend_type,
        CASE 
          WHEN state = 'active' THEN 
            EXTRACT(EPOCH FROM (now() - query_start))
          ELSE 
            EXTRACT(EPOCH FROM (now() - state_change))
        END as duration_seconds
      FROM pg_stat_activity
      WHERE state != 'idle'
        AND backend_type = 'client backend'
      ORDER BY 
        CASE state 
          WHEN 'active' THEN 1
          WHEN 'idle in transaction' THEN 2
          ELSE 3
        END,
        query_start

  # Priority 10: Basic count only
  - name: active_sessions_count
    priority: 10
    description: "Basic active session counts"
    requirements: []
    sql: |
      SELECT 
        COUNT(*) as session_count,
        state,
        wait_event_type,
        wait_event,
        COUNT(*) FILTER (WHERE wait_event IS NOT NULL) as waiting_count
      FROM pg_stat_activity
      WHERE state != 'idle'
        AND backend_type = 'client backend'
      GROUP BY state, wait_event_type, wait_event
      ORDER BY session_count DESC

wait_events:
  # Priority 100: pg_wait_sampling detailed
  - name: wait_events_sampling
    priority: 100
    description: "Detailed wait event statistics from sampling"
    requirements:
      required_extensions: ["pg_wait_sampling"]
    sql: |
      SELECT 
        queryid::text as query_id,
        query,
        event_type,
        event,
        sum(count) as wait_count,
        sum(count) * 0.01 as wait_time_seconds, -- Assuming 10ms samples
        current_database() as database_name
      FROM pg_wait_sampling_profile
      WHERE queryid IS NOT NULL
      GROUP BY queryid, query, event_type, event
      HAVING sum(count) > 10
      ORDER BY wait_count DESC
      LIMIT 100

  # Priority 50: Current waits from activity
  - name: wait_events_current
    priority: 50
    description: "Current wait events from pg_stat_activity"
    requirements: []
    sql: |
      SELECT 
        wait_event_type,
        wait_event,
        COUNT(*) as session_count,
        array_agg(pid) as pids,
        array_agg(DISTINCT usename) as users,
        array_agg(DISTINCT application_name) as applications
      FROM pg_stat_activity
      WHERE wait_event IS NOT NULL
        AND state != 'idle'
      GROUP BY wait_event_type, wait_event
      ORDER BY session_count DESC

table_stats:
  # Priority 90: With TOAST and index details
  - name: table_stats_detailed
    priority: 90
    description: "Detailed table statistics with TOAST and indexes"
    requirements: []
    sql: |
      WITH table_sizes AS (
        SELECT 
          n.nspname as schema_name,
          c.relname as table_name,
          pg_total_relation_size(c.oid) as total_size,
          pg_table_size(c.oid) as table_size,
          pg_indexes_size(c.oid) as indexes_size,
          pg_total_relation_size(c.oid) - pg_relation_size(c.oid) as toast_size,
          c.reltuples as estimated_rows
        FROM pg_class c
        JOIN pg_namespace n ON n.oid = c.relnamespace
        WHERE c.relkind = 'r'
          AND n.nspname NOT IN ('pg_catalog', 'information_schema')
      )
      SELECT 
        ts.schema_name,
        ts.table_name,
        ts.total_size,
        ts.table_size,
        ts.indexes_size,
        ts.toast_size,
        ts.estimated_rows,
        s.n_tup_ins as inserts,
        s.n_tup_upd as updates,
        s.n_tup_del as deletes,
        s.n_tup_hot_upd as hot_updates,
        s.n_live_tup as live_tuples,
        s.n_dead_tup as dead_tuples,
        s.n_mod_since_analyze as modifications_since_analyze,
        s.last_vacuum,
        s.last_autovacuum,
        s.last_analyze,
        s.last_autoanalyze,
        s.vacuum_count,
        s.autovacuum_count,
        s.analyze_count,
        s.autoanalyze_count
      FROM table_sizes ts
      JOIN pg_stat_user_tables s 
        ON s.schemaname = ts.schema_name 
        AND s.tablename = ts.table_name
      ORDER BY ts.total_size DESC
      LIMIT 50

  # Priority 50: Basic table stats
  - name: table_stats_basic
    priority: 50
    description: "Basic table statistics"
    requirements: []
    sql: |
      SELECT 
        schemaname as schema_name,
        tablename as table_name,
        pg_total_relation_size(schemaname||'.'||tablename) as total_size,
        n_live_tup as live_tuples,
        n_dead_tup as dead_tuples,
        last_vacuum,
        last_autovacuum,
        last_analyze,
        last_autoanalyze
      FROM pg_stat_user_tables
      ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
      LIMIT 50