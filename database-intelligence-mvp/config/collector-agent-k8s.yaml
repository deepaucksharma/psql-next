# Agent Collector Configuration for Kubernetes DaemonSet
# This runs on every node and collects local telemetry before forwarding to gateway

receivers:
  # OTLP receiver for local pods
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Host metrics collection
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
      disk:
      filesystem:
      load:
      memory:
      network:
      paging:
      processes:
      process:

  # Kubernetes metrics
  kubeletstats:
    collection_interval: 30s
    auth_type: serviceAccount
    endpoint: "${env:KUBELET_ENDPOINT:-https://${env:NODE_IP}:10250}"
    insecure_skip_verify: true
    metric_groups:
      - node
      - pod
      - container
      - volume

  # Container logs
  filelog:
    include:
      - /var/log/pods/*/*/*.log
    exclude:
      - /var/log/pods/*/otel-collector*/*.log
    start_at: end
    include_file_path: true
    include_file_name: false
    operators:
      # Parse container logs
      - type: router
        id: get-format
        routes:
          - output: parser-docker
            expr: 'body matches "^\\{"'
          - output: parser-crio
            expr: 'body matches "^[^ Z]+ "'
          - output: parser-containerd
            expr: 'body matches "^[^ ]+ "'
      # Parse JSON logs
      - type: json_parser
        id: parser-docker
        output: extract_metadata_from_filepath
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      # Parse CRI-O logs
      - type: regex_parser
        id: parser-crio
        regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
        output: extract_metadata_from_filepath
      # Extract metadata from file path
      - type: regex_parser
        id: extract_metadata_from_filepath
        regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
        parse_from: attributes["log.file.path"]
      # Move parsed fields to attributes
      - type: move
        from: attributes.log
        to: body
      - type: move
        from: attributes.stream
        to: attributes["log.iostream"]
      - type: move
        from: attributes.container_name
        to: resource["k8s.container.name"]
      - type: move
        from: attributes.namespace
        to: resource["k8s.namespace.name"]
      - type: move
        from: attributes.pod_name
        to: resource["k8s.pod.name"]
      - type: move
        from: attributes.restart_count
        to: resource["k8s.container.restart_count"]
      - type: move
        from: attributes.uid
        to: resource["k8s.pod.uid"]

processors:
  # Memory limiter MUST be first
  memory_limiter:
    check_interval: 1s
    limit_percentage: 50  # Lower limit for agent
    spike_limit_percentage: 15

  # k8sattributes is CRITICAL for correlation
  k8sattributes:
    auth_type: serviceAccount
    passthrough: false
    filter:
      node_from_env_var: ${env:NODE_NAME}
    extract:
      metadata:
        - k8s.namespace.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name
        - k8s.cronjob.name
        - k8s.job.name
        - k8s.replicaset.name
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.pod.start_time
      labels:
        - tag_name: app
          key: app
          from: pod
        - tag_name: component
          key: component
          from: pod
      annotations:
        - tag_name: workload.type
          key: workload.type
          from: pod
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection

  # Resource detection for infrastructure correlation
  resourcedetection:
    detectors: [env, system, docker, gcp, ec2, azure]
    system:
      hostname_sources: ["os"]
    ec2:
      tags:
        - ^aws:autoscaling:groupName
        - ^kubernetes.io/cluster/.*$

  # Resource processor to ensure critical attributes
  resource:
    attributes:
      - key: host.id
        from_attribute: host.name
        action: insert
      - key: telemetry.sdk.name
        value: "opentelemetry"
        action: insert
      - key: collector.name
        value: "agent"
        action: upsert
      - key: k8s.node.name
        value: ${env:NODE_NAME}
        action: insert

  # Batch for efficiency before sending to gateway
  batch:
    send_batch_size: 512
    timeout: 100ms

exporters:
  # Forward to gateway collector
  otlp/gateway:
    endpoint: ${env:GATEWAY_ENDPOINT:-otel-gateway:4317}
    headers:
      authorization: "Bearer ${env:GATEWAY_AUTH_TOKEN}"
    compression: gzip
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 30s
    sending_queue:
      enabled: true
      num_consumers: 2
      queue_size: 1000

  # Local debugging
  debug:
    verbosity: basic
    sampling_initial: 2
    sampling_thereafter: 500

extensions:
  healthcheck:
    endpoint: 0.0.0.0:13133

  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [healthcheck, zpages]
  
  pipelines:
    # Application traces
    traces:
      receivers: [otlp]
      processors: [memory_limiter, k8sattributes, resourcedetection, resource, batch]
      exporters: [otlp/gateway]
    
    # Application and infrastructure metrics
    metrics:
      receivers: [otlp, hostmetrics, kubeletstats]
      processors: [memory_limiter, k8sattributes, resourcedetection, resource, batch]
      exporters: [otlp/gateway]
    
    # Application and container logs
    logs:
      receivers: [otlp, filelog]
      processors: [memory_limiter, k8sattributes, resource, batch]
      exporters: [otlp/gateway]
  
  telemetry:
    logs:
      level: info
    metrics:
      level: detailed
      address: 0.0.0.0:8888