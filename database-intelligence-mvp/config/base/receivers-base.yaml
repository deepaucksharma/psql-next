# Base Receivers Configuration
# Common receiver patterns extracted from all collector configurations

receivers:
  # Standard OTEL receivers for database metrics
  postgresql:
    endpoint: ${env:POSTGRES_HOST:-localhost}:${env:POSTGRES_PORT:-5432}
    username: ${env:POSTGRES_USER:-postgres}  
    password: ${env:POSTGRES_PASSWORD:-postgres}
    databases:
      - ${env:POSTGRES_DB:-postgres}
    tls:
      insecure: true
    collection_interval: ${env:POSTGRES_COLLECTION_INTERVAL:-60s}

  mysql:
    endpoint: ${env:MYSQL_HOST:-localhost}:${env:MYSQL_PORT:-3306}
    username: ${env:MYSQL_USER:-root}
    password: ${env:MYSQL_PASSWORD:-mysql}
    database: ${env:MYSQL_DB:-mysql}
    collection_interval: ${env:MYSQL_COLLECTION_INTERVAL:-60s}

  # SQL query receiver for custom database statistics
  sqlquery/postgresql:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST:-localhost} port=${env:POSTGRES_PORT:-5432} user=${env:POSTGRES_USER:-postgres} password=${env:POSTGRES_PASSWORD:-postgres} dbname=${env:POSTGRES_DB:-postgres} sslmode=disable"
    collection_interval: ${env:POSTGRES_QUERY_INTERVAL:-300s}
    queries:
      # Feature detection - check available extensions
      - sql: |
          SET LOCAL statement_timeout = '3000ms';
          SET LOCAL lock_timeout = '100ms';
          SELECT extname as extension_name, extversion as version, 1 as available
          FROM pg_extension
          WHERE extname IN ('pg_stat_statements', 'pg_stat_monitor', 'pg_wait_sampling', 'auto_explain')
        metrics:
          - metric_name: postgresql_extension_available
            value_column: available
            attribute_columns: [extension_name, version]

      # Active session monitoring  
      - sql: |
          SET LOCAL statement_timeout = '3000ms';
          SELECT 
            datname as database_name,
            state,
            COUNT(*) as session_count,
            COALESCE(AVG(EXTRACT(EPOCH FROM (clock_timestamp() - query_start))), 0) as avg_duration_seconds
          FROM pg_stat_activity 
          WHERE state IS NOT NULL
          GROUP BY datname, state
        metrics:
          - metric_name: postgresql_active_sessions
            value_column: session_count
            attribute_columns: [database_name, state]
          - metric_name: postgresql_avg_query_duration
            value_column: avg_duration_seconds
            attribute_columns: [database_name, state]

  sqlquery/mysql:
    driver: mysql
    datasource: "${env:MYSQL_USER:-root}:${env:MYSQL_PASSWORD:-mysql}@tcp(${env:MYSQL_HOST:-localhost}:${env:MYSQL_PORT:-3306})/${env:MYSQL_DB:-mysql}"
    collection_interval: ${env:MYSQL_QUERY_INTERVAL:-300s}
    queries:
      # MySQL performance metrics
      - sql: |
          SELECT 
            VARIABLE_NAME as metric_name,
            VARIABLE_VALUE as metric_value
          FROM performance_schema.global_status 
          WHERE VARIABLE_NAME IN (
            'Queries', 'Slow_queries', 'Connections', 'Aborted_connects',
            'Threads_connected', 'Threads_running', 'Created_tmp_tables'
          )
        metrics:
          - metric_name: mysql_global_status
            value_column: metric_value
            attribute_columns: [metric_name]

  # OTLP receiver for receiving data from other collectors
  otlp:
    protocols:
      grpc:
        endpoint: ${env:OTLP_GRPC_ENDPOINT:-0.0.0.0:4317}
        max_recv_msg_size_mib: ${env:OTLP_MAX_RECV_MSG_SIZE:-32}
      http:
        endpoint: ${env:OTLP_HTTP_ENDPOINT:-0.0.0.0:4318}
        max_request_body_size_mib: ${env:OTLP_MAX_REQUEST_BODY_SIZE:-32}

  # Enhanced SQL receiver for plan collection (optional)
  enhancedsql/postgresql:
    driver: postgres
    datasource: "host=${env:POSTGRES_HOST:-localhost} port=${env:POSTGRES_PORT:-5432} user=${env:POSTGRES_USER:-postgres} password=${env:POSTGRES_PASSWORD:-postgres} dbname=${env:POSTGRES_DB:-postgres} sslmode=disable"
    collection_interval: ${env:ENHANCED_SQL_INTERVAL:-60s}
    enable_plan_collection: ${env:ENABLE_PLAN_COLLECTION:-false}
    plan_cache_size: ${env:PLAN_CACHE_SIZE:-1000}