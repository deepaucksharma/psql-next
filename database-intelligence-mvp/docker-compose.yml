services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dbintel-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: dbintel-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: testdb
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-mysql.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenTelemetry Collector with Database Intelligence
  otel-collector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dbintel-collector
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - ./config/docker-collector.yaml:/etc/otel/config.yaml
      - ./data:/var/lib/otel
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Health check
      - "13133:13133" # Health check extension
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=testdb
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=mysql
      - MYSQL_PASSWORD=mysql
      - MYSQL_DB=testdb
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-dummy_key}
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics visualization
  prometheus:
    image: prom/prometheus:latest
    container_name: dbintel-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: dbintel-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # Test data generator
  test-generator:
    build:
      context: .
      dockerfile: Dockerfile.test-generator
    container_name: dbintel-test-generator
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=testdb
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=mysql
      - MYSQL_PASSWORD=mysql
      - MYSQL_DB=testdb
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    profiles:
      - test

volumes:
  postgres_data:
  mysql_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: dbintel-network