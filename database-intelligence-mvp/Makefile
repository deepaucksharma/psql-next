# Database Intelligence MVP - OTEL-First Makefile
# This Makefile supports building a custom OpenTelemetry collector with
# standard OTEL components and minimal custom processors for gaps.

.PHONY: all build test clean run install-tools help docker-up docker-down lint fmt vet deps
.PHONY: verify quickstart docker-simple docker-prod k8s-minimal k8s-prod test-integration
.PHONY: build-image push-image generate-config validate-config collector-debug

# Variables
BINARY_NAME := otelcol-db-intelligence
DIST_DIR := dist
CONFIG_DIR := config
DOCKER_REGISTRY ?= docker.io
DOCKER_ORG ?= database-intelligence
DOCKER_TAG ?= latest
COLLECTOR_CONFIG ?= $(CONFIG_DIR)/collector.yaml

# Default target
all: deps build test

## Primary targets

build: ## Build the OTEL-first collector
	@echo "üî® Building OTEL-first collector..."
	@if command -v ocb >/dev/null 2>&1; then \
		echo "Using OpenTelemetry Collector Builder (ocb)..."; \
		ocb --config=ocb-config.yaml; \
	elif command -v builder >/dev/null 2>&1; then \
		echo "Using legacy builder..."; \
		builder --config=otelcol-builder.yaml --output-path=$(DIST_DIR); \
	else \
		echo "‚ùå Error: OCB/builder not found. Run 'make install-tools' first."; \
		exit 1; \
	fi

test: ## Run all tests
	@echo "üß™ Running unit tests..."
	@go test -v -race -coverprofile=coverage.out ./processors/...
	@echo "‚úÖ Tests completed"

test-integration: ## Run integration tests
	@echo "üß™ Running integration tests..."
	@cd tests/integration && go test -v -tags=integration
	@echo "‚úÖ Integration tests completed"

clean: ## Clean build artifacts
	@echo "üßπ Cleaning build artifacts..."
	@rm -rf $(DIST_DIR) bin/ tmp/ coverage.out
	@go clean -cache
	@echo "‚úÖ Clean completed"

run: build ## Build and run the collector
	@echo "üöÄ Running OTEL collector..."
	@$(DIST_DIR)/$(BINARY_NAME) --config=$(COLLECTOR_CONFIG)

## Development targets

lint: ## Run linters
	@echo "üîç Running linters..."
	@golangci-lint run --timeout=5m ./processors/...
	@echo "‚úÖ Linting completed"

fmt: ## Format code
	@echo "üìù Formatting code..."
	@go fmt ./...
	@goimports -w ./processors/
	@echo "‚úÖ Formatting completed"

vet: ## Run go vet
	@echo "üîç Running go vet..."
	@go vet ./...
	@echo "‚úÖ Vet completed"

## Installation targets

install-tools: ## Install required tools
	@echo "üì¶ Installing required tools..."
	@go install go.opentelemetry.io/collector/cmd/ocb@latest
	@go install go.opentelemetry.io/collector/cmd/builder@latest
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@go install golang.org/x/tools/cmd/goimports@latest
	@echo "‚úÖ Tools installed"

## Docker targets

docker-build: ## Build Docker image
	@echo "üê≥ Building Docker image..."
	@docker build -t $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$(BINARY_NAME):$(DOCKER_TAG) .
	@echo "‚úÖ Docker image built"

docker-push: docker-build ## Push Docker image
	@echo "üì§ Pushing Docker image..."
	@docker push $(DOCKER_REGISTRY)/$(DOCKER_ORG)/$(BINARY_NAME):$(DOCKER_TAG)
	@echo "‚úÖ Docker image pushed"

docker-up: ## Start production services with Docker Compose
	@echo "üöÄ Starting production services..."
	@docker-compose -f deploy/docker/docker-compose.yaml up -d
	@echo "‚úÖ Services started. Check health: http://localhost:13133/"

docker-down: ## Stop all Docker Compose services
	@echo "üõë Stopping Docker Compose services..."
	@docker-compose -f deploy/docker/docker-compose.yaml down
	@echo "‚úÖ Services stopped"

docker-simple: ## Start simple development setup
	@echo "üöÄ Starting simple development setup..."
	@cd deploy/examples && docker-compose -f docker-compose-simple.yaml up -d
	@echo "‚úÖ Simple setup started. Dashboard: http://localhost:3000"

docker-prod: ## Start full production setup
	@echo "üöÄ Starting production setup..."
	@cd deploy/examples && docker-compose -f docker-compose-production.yaml up -d
	@echo "‚úÖ Production setup started. Grafana: http://localhost:3000"

## Kubernetes targets

k8s-minimal: ## Deploy minimal Kubernetes setup
	@echo "‚ò∏Ô∏è  Deploying minimal Kubernetes setup..."
	@kubectl apply -f deploy/examples/kubernetes-minimal.yaml
	@echo "‚úÖ Minimal K8s deployment complete"

k8s-prod: ## Deploy production Kubernetes setup
	@echo "‚ò∏Ô∏è  Deploying production Kubernetes setup..."
	@kubectl apply -f deploy/examples/kubernetes-production.yaml
	@echo "‚úÖ Production K8s deployment complete"

## Verification targets

verify: ## Run verification checks
	@echo "‚úÖ Running verification..."
	@./scripts/verify-metrics.sh
	@echo "‚úÖ Verification complete"

quickstart: ## Run quickstart setup
	@echo "üöÄ Running quickstart..."
	@./scripts/init-env.sh
	@make build
	@make docker-simple
	@echo "‚úÖ Quickstart complete"

## Configuration targets

generate-config: ## Generate collector configuration
	@echo "üìù Generating collector configuration..."
	@./scripts/generate-config.sh > $(CONFIG_DIR)/collector-generated.yaml
	@echo "‚úÖ Configuration generated"

validate-config: ## Validate collector configuration
	@echo "üîç Validating collector configuration..."
	@$(DIST_DIR)/$(BINARY_NAME) validate --config=$(COLLECTOR_CONFIG)
	@echo "‚úÖ Configuration valid"

## Debug targets

collector-debug: build ## Run collector with debug logging
	@echo "üêõ Running collector in debug mode..."
	@$(DIST_DIR)/$(BINARY_NAME) --config=$(COLLECTOR_CONFIG) --log-level=debug

## Dependency management

deps: ## Download and tidy dependencies
	@echo "üì¶ Managing dependencies..."
	@go mod download
	@go mod tidy
	@echo "‚úÖ Dependencies updated"

deps-upgrade: ## Upgrade all dependencies
	@echo "‚¨ÜÔ∏è  Upgrading dependencies..."
	@go get -u ./...
	@go mod tidy
	@echo "‚úÖ Dependencies upgraded"

## Documentation

docs: ## Generate documentation
	@echo "üìö Generating documentation..."
	@go doc -all ./processors/... > docs/API.md
	@echo "‚úÖ Documentation generated"

## Metrics and monitoring

metrics: ## Show current metrics
	@echo "üìä Current metrics:"
	@curl -s http://localhost:8888/metrics | grep -E "^(# HELP|# TYPE|db_|postgresql_|mysql_)"

health: ## Check collector health
	@echo "üè• Checking collector health..."
	@curl -s http://localhost:13133/ | jq '.' || echo "Collector not running"

## Help

help: ## Display this help message
	@echo "Database Intelligence MVP - OTEL-First Build System"
	@echo ""
	@echo "Usage: make [target]"
	@echo ""
	@echo "Primary targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E '^(build|test|run|clean):' | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Docker targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E '^docker-' | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Kubernetes targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E '^k8s-' | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Development targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -E '^(lint|fmt|vet|deps):' | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Other targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -vE '^(build|test|run|clean|docker-|k8s-|lint|fmt|vet|deps):' | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
