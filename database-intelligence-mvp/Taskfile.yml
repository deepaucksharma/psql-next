version: '3'

vars:
  PROJECT_NAME: database-intelligence-collector
  BINARY_NAME: otelcol-db-intelligence
  DIST_DIR: dist
  CONFIG_DIR: config
  DOCKER_REGISTRY: docker.io
  DOCKER_ORG: database-intelligence
  VERSION: latest

env:
  CGO_ENABLED: 0

includes:
  build: ./tasks/build.yml
  test: ./tasks/test.yml
  deploy: ./tasks/deploy.yml
  dev: ./tasks/dev.yml
  validate: ./tasks/validate.yml

tasks:
  default:
    desc: List available tasks
    cmds:
      - task --list-all

  setup:
    desc: Complete development environment setup
    cmds:
      - task: setup:tools
      - task: setup:deps
      - echo "[OK] Development environment ready!"

  setup:tools:
    desc: Install required development tools
    cmds:
      - echo "[INSTALL] Installing development tools..."
      - go install go.opentelemetry.io/collector/cmd/builder@latest || true
      - echo "[OK] Tools installed"

  setup:deps:
    desc: Download and verify dependencies
    cmds:
      - echo "[DEPS] Managing Go dependencies..."
      - go mod download
      - go mod verify
      - go mod tidy
      - echo "[OK] Dependencies ready"

  build:
    desc: Build the collector binary
    cmds:
      - echo "[BUILD] Building collector..."
      - mkdir -p dist
      - |
        if command -v builder &> /dev/null; then
          builder --config=otelcol-builder.yaml || echo "[WARN] Build failed - check configuration"
        else
          echo "[ERROR] Builder not found. Run 'task setup:tools' first"
          exit 1
        fi
      - echo "[OK] Build complete"

  build:docker:
    desc: Build Docker image
    cmds:
      - echo "[DOCKER] Building image..."
      - docker build -t database-intelligence:latest .
      - echo "[OK] Docker image built"

  dev:up:
    desc: Start development environment
    cmds:
      - echo "[START] Starting development environment..."
      - docker compose --profile dev up -d
      - echo "[OK] Development environment ready"

  dev:down:
    desc: Stop development environment
    cmds:
      - echo "[STOP] Stopping development environment..."
      - docker compose down
      - echo "[OK] Development environment stopped"

  test:
    desc: Run all tests
    cmds:
      - echo "[TEST] Running tests..."
      - go test -v ./...
      - echo "[OK] Tests passed"

  clean:
    desc: Clean all generated files
    cmds:
      - echo "[CLEAN] Cleaning..."
      - rm -rf dist
      - rm -rf coverage.*
      - echo "[OK] Cleaned"